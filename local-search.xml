<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2021/08/09/6/"/>
    <url>/2021/08/09/6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-计算机系统概述"><a href="#1-计算机系统概述" class="headerlink" title="1. 计算机系统概述"></a>1. 计算机系统概述</h1><h2 id="1-1-计算机的发展和应用"><a href="#1-1-计算机的发展和应用" class="headerlink" title="1.1 计算机的发展和应用"></a>1.1 计算机的发展和应用</h2><ol><li><p>计算机的发展</p><p>1946 年，世界上第一台计算机（ENIAC）诞生于美国宾夕法尼亚大学；此后，计算机硬件技术获得了飞速地发展，主要可分为四个阶段</p><p><img src="/images/image-20210809152037830.png" alt="image-20210809152037830"></p></li><li><p>计算机的应用</p><ol><li><p>科学计算</p><p>这是计算机应用最早的领域，利用计算机来完成科学研究和工程技术中提出的数学问题的计算。</p></li><li><p>过程控制</p><p>将计算机应用于机械、冶金、纺织、水电、航天等各个领域生产过程的自动控制，减轻劳动强度，提高产品质量和生产效率。</p></li><li><p>人工智能</p><p>人工智能是计算机模拟人类的智能活动，近年来主要应用于图像识别、语音识别、语言翻译、专家系统、机器人等领域。</p></li><li><p>数据处理</p><p>用计算机对各种数据进行分析、加工、变换或综合处理。据统计，80%以上的计算机主要用于数据处理。</p></li><li><p>计算机辅助应用</p><ul><li>计算机辅助设计（CAD）</li><li>计算机辅助制造（CAM）</li><li>计算机辅助教学（CAI）</li><li>计算机辅助测试（CAT）</li><li>计算机辅助工程（CAE）</li></ul></li><li><p>网络应用</p><p>计算机技术与通信技术的结合构成了计算机网络。目前，网络应用已经涉及人类生活的方方面面，正在改变着整个世界。</p></li><li><p>多媒体技术</p><p>最初的计算机只能处理文字，由于新技术的运用，计算机可以处理文字、图像、</p><p>动画、声音等各种数据，这种技术被称为“多媒体技术”。</p></li><li><p>电子商务</p><p>电子商务通常是指在全球各地广泛的商业贸易活动中，在因特网开放的网络环境下，基于浏览器/服务器应用方式进行各种商贸活动。电子商务主要的分类有： B2B、B2C、C2C、B2G、C2G、O2O 等。</p></li></ol></li><li><p>计算机的发展趋势</p><ol><li><p>巨型化</p><p>巨型化是指计算机的运算速度更高、存储容量更大、功能更强。目前正在研制的</p><p>巨型计算机其运算速度可达每秒亿亿次级别。</p></li><li><p>微型化</p><p>微型计算机已进入仪器、仪表、家用电器等小型仪器设备中，同时也作为工业控制过程的心脏，使仪器设备实现“智能化”。随着微电子技术的进一步发展，笔记本型、掌上型等微型计算机必将以更优的性能价格比受到人们的欢迎。</p></li><li><p>智能化</p><p>计算机人工智能化是未来发展的必然趋势。现代计算机具有强大的功能和运行速度，但与人脑相比，其智能化和逻辑能力仍有待提高。新一代计算机，将可以模拟人的感觉行为和思维过程的机理，进行“看”、“听”、“说”、“想”、“做”，具有逻辑推理、学习与证明的能力。</p></li><li><p>网络化</p><p>互联网将世界各地的计算机连接在一起，从此进入了互联网时代。</p></li><li><p>多媒体化</p><p>传统的计算机处理的信息主要是字符和数字。事实上，人们更习惯的是图片、文字、声音等多种形式的多媒体信息。多媒体技术可以集图形、图像、音频、视频、文字为一体，使信息处理的对象和内容更加接近于真实世界。</p></li></ol></li></ol><h2 id="1-2-计算机的特点和分类"><a href="#1-2-计算机的特点和分类" class="headerlink" title="1.2 计算机的特点和分类"></a>1.2 计算机的特点和分类</h2><ol><li><p>按数据处理方式</p><ol><li><p>数字式计算机</p><p>数字式电子计算机是当今世界电子计算机行业中的主流，其内部处理的是一种称为符号信号或数字信号的电信号。</p></li><li><p>模拟式计算机</p><p>模拟式电子计算机问世较早，内部所使用的电信号模拟自然界的实际信号，因而称为模拟电信号。</p></li><li><p>数字模拟混合式计算机</p><p>混合计算机是取数字、模拟计算机之长，既能高速运算，又便于存储信息。</p></li></ol></li><li><p>按计算机用途</p><ol><li><p>专用计算机</p><p>专用计算机是指为适应某种特殊应用而设计的计算机，一般用在过程控制中，如智能仪表、飞机的自动控制、导弹的导航系统等。</p></li><li><p>通用计算机</p><p>通用计算机是指为解决各种问题，具有较强的通用性而设计的计算机。该机适用于一般的科学计算、学术研究、工程设计和数据处理等用途，具有较大的适用范围。</p></li></ol></li><li><p>按计算机性能</p><ol><li><p>巨型计算机</p><p>运算速度快、存储容量大，价格相当昂贵，主要用于复杂、尖端的科学研究领域，特别是军事科学计算。</p></li><li><p>大/中型计算机</p><p>通用性能好、外部设备负载能力强、处理速度快。它有完善的指令系统，丰富的外部设备和功能齐全的软件系统，并允许多个用户同时使用。主要用于科学计算、数据处理或做网络服务器。</p></li><li><p>小型计算机</p><p>具有规模较小、结构简单、成本较低、操作简单、易于维护、与外部设备连接容易等特点。</p></li><li><p>微型计算机</p><p>以运算器和控制器为核心，加上由大规模集成电路制作的存储器、输入/输出接口和系统总线，构成了体积小、结构紧凑、价格低但又具有一定功能的计算机。</p></li><li><p>单片机</p><p>单片机把 CPU、一定容量的存储器和输入/输出接口电路集成到一个芯片上，它是一片特殊的、具有计算机功能的集成电路芯片，一般用作专用机或用来控制高级仪器、家用电器等。</p></li></ol></li><li><p>按计算机使用方式</p><ol><li><p>桌面型计算机</p><p>桌上型计算机包括 PC 机、工作站和笔记本型计算机，为用户提供良好的计算性能和较低成本的工作环境。桌上型计算机是成本低、应用广的计算机类型。</p></li><li><p>服务器型计算机</p><p>服务器型计算机是指在网络环境或具有客户-服务器结构的分布式计算环境中，为客户请求提供服务的节点计算机。</p></li><li><p>嵌入式计算机</p><p>嵌入式计算机是将计算机作为一个部件，成为某个设备的一部分，嵌入式计算机成本更低，用途更广。它一般面向特定应用。不同的嵌入式应用有不同的要求，需要根据不同的应用进行专门的开发设计。</p></li></ol></li></ol><h2 id="1-3-计算机的性能指标"><a href="#1-3-计算机的性能指标" class="headerlink" title="1.3 计算机的性能指标"></a>1.3 计算机的性能指标</h2><ol><li><p>字长</p><p>字长以二进制为单位，是 CPU 一次能够处理的二进制数据的位数，它直接关系到计算机的计算精度和运算能力。微机字长一般都以 2 的 n 次方为单位，如 8 位、16 位、32 位、64 位等。</p></li><li><p>运算速度</p><p>由于计算机执行不同类型指令所需时间不同，所以通常用各类指令的平均执行时间和相应指令的运行比例进行综合计算，作为衡量计算机运行速度的标准。用来衡量运算速度的指标有 MIPS（百万条指令/秒）、MFLOPS（百万次浮点运算/秒）以及 CPI（Clock cycle Per Instruction，执行一条指令所需的时钟周期）。</p></li><li><p>时钟频率</p><p>时钟频率，也称主频，是指 CPU 在单位时间（秒）内发出的脉冲数。通常，时钟频率以兆赫（MHz）和吉赫（GHz）为单位。一般时钟频率越高，其运算速度就越快。</p></li><li><p>内存容量</p><ul><li><p>位</p><p>计算机中最小的数据单位是二进制的一个数位，简称为位（bit，比特）。一个二进制位可表示两种状态（0 或 1）</p></li><li><p>字节</p><p>为了表示数据中的字符（包括字母、数字以及各种专用符号等），需要用 7 位或8 位二进制数，人们选定 8 位为一个字节（Byte），通常用 B 表示。字节是计算机中用来表示存储空间的最基本的容量单位。</p><p>除用字节为单位表示存储容量外，还可以用千字节（KB）、兆字节（MB）以及吉兆字节（GB）等表示存储容量，它们之间存在下列换算关系</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1B</span> = <span class="hljs-number">8</span> bit<br><span class="hljs-attribute">1KB</span> = <span class="hljs-number">2</span>^<span class="hljs-number">10</span> B =<span class="hljs-number">1024</span> B<br><span class="hljs-attribute">1MB</span> = <span class="hljs-number">2</span>^<span class="hljs-number">20</span> B =<span class="hljs-number">1024</span> KB<br><span class="hljs-attribute">1GB</span> = <span class="hljs-number">2</span>^<span class="hljs-number">30</span> B = <span class="hljs-number">1024</span> MB<br><span class="hljs-attribute">1TB</span> = <span class="hljs-number">2</span>^<span class="hljs-number">40</span> B = <span class="hljs-number">1024</span> GB<br></code></pre></td></tr></table></figure><p>内存一般以 KB、MB 或 GB 为单位。内存容量反映了内存储器存储数据的能力。存储容量越大，其主机处理数据的范围就越广，运算速度一般也就越快。</p></li></ul></li></ol><h2 id="1-4-计算机系统的组成和结构"><a href="#1-4-计算机系统的组成和结构" class="headerlink" title="1.4 计算机系统的组成和结构"></a>1.4 计算机系统的组成和结构</h2><ol><li><p>冯·诺依曼计算机</p><p><strong>存储程序</strong>的概念是由冯·诺依曼于 1945 年提出的，它奠定了现代计算机的结构基础。尽管过去了几十年，但目前广泛应用的计算机仍然是依据冯·诺依曼提出的结构体系和工作原理来设计制造的，故又统称为“冯·诺依曼计算机”。</p><ol><li><p>冯·诺依曼思想</p><ul><li><p>计算机的五大组成</p><p>计算机由运算器、控制器、存储器、输入设备和输出设备五大部件组成。</p></li><li><p>采用二进制</p><p>采用二进制形式存储所有的信息，即计算机内不管是程序还是待处理的数据或是其他信息均为二进制编码形式。</p></li><li><p>存储程序</p><p>这是冯·诺依曼思想的核心。将事先编好的程序存入计算机中，计算机按照这些程序自动运行，这是计算机自动连续工作的基础。</p></li></ul></li><li><p>冯·诺依曼计算机的工作原理</p><ol><li><p>存储程序：将要执行的程序和数据事先编成二进制形式的编码存入主存储器中。</p></li><li><p>程序控制：程序自动地、连续地从主存储器中依次取出指令并执行，直到获得所要求的结果为止。</p></li></ol><p>典型的冯·诺依曼计算机是以运算器为中心的，而现代的计算机已经转为以存储器为中心。</p></li></ol></li><li><p>计算机系统的构成</p><p>一个计算机系统包括硬件系统和软件系统两大部分。硬件是由各种电介质、磁介质及机械的器件组成的物理实体，包括运算器、控制器、存储器、输入设备和输出设备等五个基本部分。软件则是程序和有关文档的总称，通常存放在计算机的主存或辅存内。</p><p>在一个具体的计算机系统中，硬件、软件是紧密相关、缺一不可的，但对某一具体功能来说，既可以用硬件实现，也可以用软件实现，这是硬件、软件在逻辑功能上的等效。硬件、软件在逻辑功能上的等效是指任何由硬件实现的操作，在原理上均可用软件模拟来实现；同样，任何由软件实现的操作，在原理上都可由硬件来实现。因此在设计一个计算机系统时，须根据设计要求、现有技术与器件条件，首先确定哪些功能直接由硬件实现，哪些功能通过软件实现，这是硬件和软件的功能分配。</p><ol><li><p>硬件系统</p><p>计算机的硬件系统由主机系统和外部设备两部分组成，把运算器、控制器与内存储器统称为计算机主机，而把外存储器、输入设备、输出设备称为计算机的外部设备</p><p><img src="/images/image-20210809161507099.png" alt="image-20210809161507099"></p><ol><li>主机</li></ol><ul><li><p>运算器用于对数据的加工处理，完成算术运算和逻辑运算。算术运算是指按照算术运算规则进行的运算，如加、减、乘、除及其复合运算。逻辑运算为非算术性的运算，如与、或、非、异或等。运算器的核心是算术逻辑部件(ALU，Arithmetic Logical Unit)。运算器中还设有若干寄存器，用于暂存操作数据和中间结果。由于这些寄存器往往兼备多种用途，如用作累加器、变址寄存器、基址寄存器等，所以通常称为通用寄存器。</p></li><li><p>控制器是整个计算机的指挥中心，它按照事先安排好的步骤，控制计算机各个部件有条不紊地自动工作。通常把运算器和控制器统称为 CPU。</p></li><li><p>计算机具有超强的记忆能力，是因为计算机中有存储器部件。CPU 能够直接访问的是内存储器（也称内存，主存）。内存主要由两部分组成：随机存储器和只读存储器。</p><p><strong>随机存储器</strong></p><p> 随机存储器（RAM，Random Access Memory）可以随时读写，而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储媒介。</p><p><strong>只读存储器</strong></p><p>只读存储器（ROM，Read Only Memory）所存数据，一般是装入整机前事先写好的，计算机工作过程中只能读出，而不像随机存储器那样能快速、方便地加以改写。ROM 所存数据稳定，断电后也不会改变，常用于存储各种固定程序和数据。</p></li></ul><ol start="2"><li>外部设备</li></ol><ul><li>外存储器又称为外存、辅存，是计算机系统中除内存储器外，以计算机能接受的形式存储信息的媒体，如硬盘、软盘、光盘、U 盘等。其特点是能长期保存数据，而且价格便宜，存储量大。</li><li>输入设备的主要功能是将程序和数据以机器所能识别和接受的信息形式输入到计算机内。最常用也是最基本的输入设备是键盘、鼠标、扫描仪、摄像机等。</li><li>输出设备的任务是将计算机处理的结果以人们所能接受的信息形式或其他系统所要求的信息形式输出。最常用且最基本的输出设备是显示器、打印机、绘图仪等。</li></ul></li><li><p>软件系统</p><p>计算机软件系统包括系统软件和应用软件两大类。</p><ul><li>系统软件是一组保证计算机系统高效、正确运行的基础软件，通常作为系统资源提供给用户使用。主要有以下几类：操作系统，语言处理程序如编译器和解释器，数据库管理系统，各种服务程序如装入程序、调试程序、诊断程序等。</li><li>应用软件是指用户为解决某个应用领域中的各类问题而编制的程序，如各种科学计算类程序、数据统计与处理程序、情报检索程序、生产过程控制程序等。</li></ul></li><li><p>计算机系统的层次结构</p><p><img src="/images/image-20210809162855358.png" alt="image-20210809162855358"></p><ul><li>第 0 级是微程序机器层，这是一个实在的硬件层，它由机器硬件直接执行微指令。</li><li>第 1 级是机器语言层，这一层由微程序解释机器指令系统。</li><li>第 2 级是操作系统层，它由操作系统程序实现。操作系统由机器指令和广义指令组成的，这些广义指令是为扩展机器功能而设置的，是由操作系统定义和解释的软件指令。</li><li>第 3 级是汇编语言层，它为用户提供一种符号形式语言，借此可编写汇编语言源程序，这一层由汇编程序支持和执行。</li><li>第 4 级是高级语言层，它是面向用户的，为方便用户编写应用程序而设置的。该层由各种高级语言编译程序支持和执行。</li></ul></li></ol><p>从计算机系统的多级层次结构来看，可以将硬件研究的主要对象归结为机器语言层和微程序机器层。软件的研究对象主要是操作系统级以上的各级虚拟机。软硬件交界界面的划分并不是一成不变的，随着超大规模集成电路技术的不断发展，一部分软件功能将由硬件来实现，如目前操作系统已实现了部分固化（把软件永久地存于只读存储器中），称为固件。可以认为固件是一种介于传统的软件和硬件之间的实体，就它的功能来说，类似软件，但从形态来说，又类似硬件。</p></li></ol><h1 id="2-数据的表示和运算"><a href="#2-数据的表示和运算" class="headerlink" title="2. 数据的表示和运算"></a>2. 数据的表示和运算</h1><h2 id="2-1-进制转换"><a href="#2-1-进制转换" class="headerlink" title="2.1 进制转换"></a>2.1 进制转换</h2><h3 id="2-1-1-非十进制数转换成十进制数"><a href="#2-1-1-非十进制数转换成十进制数" class="headerlink" title="2.1.1 非十进制数转换成十进制数"></a>2.1.1 非十进制数转换成十进制数</h3><ol><li><p>方法</p><p>每位上的数码×基的位次方，然后求和。</p></li><li><p>例题</p><ul><li><p>二进制转化成十进制</p><p><img src="/images/image-20210809164512606-1628498745947.png" alt="image-20210809164512606"></p></li><li><p>八进制转化成十进制</p><p><img src="/images/image-20210809164624318.png" alt="image-20210809164624318"></p></li><li><p>十六进制转换成十进制</p><p><img src="/images/image-20210809164711882.png" alt="image-20210809164711882"></p></li></ul></li></ol><h3 id="2-1-2-十进制数转换成非十进制数"><a href="#2-1-2-十进制数转换成非十进制数" class="headerlink" title="2.1.2 十进制数转换成非十进制数"></a>2.1.2 十进制数转换成非十进制数</h3><ol><li><p>方法</p><p>整数部分：除 N 取余数，直至商为 0，余数倒输出。</p><p>小数部分：乘 N 取整数，直至小数部分为 0（或满足精度），整数正输出。</p></li><li><p>例题</p><ul><li><p>十进制数转换成二进制数</p><p>将十进制数（37.75）10 转换为二进制数</p><p>整数部分 37 转换如下：</p><p><img src="/images/image-20210809164922824.png" alt="image-20210809164922824"></p><p>小数部分 0.75 转换如下：</p><p><img src="/images/image-20210809165213659.png" alt="image-20210809165213659"></p></li><li><p>十进制数转换成八进制数</p><p>将十进制数（1725.6875）10 转换成八进制数。</p><p>整数部分 1725 转换如下：</p><p><img src="/images/image-20210809165314031.png" alt="image-20210809165314031"></p><p>小数部分 0.6875 转换如下：</p><p><img src="/images/image-20210809165349992.png" alt="image-20210809165349992"></p></li></ul></li></ol><h3 id="2-1-3-二-八-十六进制数的互相转换"><a href="#2-1-3-二-八-十六进制数的互相转换" class="headerlink" title="2.1.3 二/八/十六进制数的互相转换"></a>2.1.3 二/八/十六进制数的互相转换</h3><ol><li><p>方法</p><p>由于一位八/十六进制数相当于三/四位二进制数，因此，要将八/十六进制数转换成二进制数时，只需以小数点为界，向左或向右每一位八/十六进制数用相应的三/四位二进制数取代即可。如果不足三/四位，可用零补足。反之，二进制数转换成相应的八/十六进制数，只是上述方法的逆过程，即以小数点为界，向左或向右，每三/四位二进制数用相应的一位八/十六进制数取代即可。</p></li><li><p>例题</p><ol><li><p>八进制数转换成二进制数</p><p>将八进制数（624.31）8 转换成二进制数。</p><p><img src="/images/image-20210809165850639.png" alt="image-20210809165850639"></p></li><li><p>二进制数转换成八进制数</p><p>将二进制数（11101.00101011）2转换成八进制数。</p><p><img src="/images/image-20210809165955164.png" alt="image-20210809165955164"></p></li><li><p>十六进制数转换成二进制数</p><p>将十六进制数（1AC0.6D）16 转换成相应的二进制数。</p><p><img src="/images/image-20210809170053141.png" alt="image-20210809170053141"></p></li><li><p>二进制数转换成十六进制数</p><p>将二进制数（10111100101.00011001101）2 转换成相应的十六进制数。</p><p><img src="/images/image-20210809170155255.png" alt="image-20210809170155255"></p></li></ol></li></ol><h2 id="2-2-数值型数据的表示"><a href="#2-2-数值型数据的表示" class="headerlink" title="2.2 数值型数据的表示"></a>2.2 数值型数据的表示</h2><h3 id="2-2-1-机器数"><a href="#2-2-1-机器数" class="headerlink" title="2.2.1 机器数"></a>2.2.1 机器数</h3><p>无符号数，是指整个机器字长的全部二进制位均表示数值位（没有符号位），相当于数的绝对值。例如：0101 表示无符号数 5，1100 表示无符号数 12。然而，大量用到的数据还是带符号数，即正数和负数。在日常生活中用“＋”、“－”加绝对值来表示数值的大小，用这种形式表示的数值在计算机中称为“真值”。</p><p>对于数的符号 “＋”和“－”，计算机是无法识别的，需要把符号数码化。通常，约定二进制数的最高位为符号位，<strong>“0”表示正号</strong>，<strong>“1”表示负号</strong>。这种在计算机中使用的表示数的形式称为机器数，常见的机器数有原码、反码、补码等。</p><ol><li><p>原码</p><p>原码表示法是机器数的一种简单的表示法。其符号位用 0 表示正号，用 1 表示负号，数值一般用二进制形式表示。设有一数用 X 表示真值，则原码表示可记作[X]<sub>原</sub>，例如：</p><p><img src="/images/image-20210809170718607.png" alt="image-20210809170718607"></p></li><li><p>反码</p><p>机器数的反码可由原码得到。如果机器数是正数，则该机器数的反码与原码一样；如果机器数是负数，则该机器数的反码是对它的原码（符号位除外）各位取反而得到的。假设有一数用 X 表示真值，那么 X 的反码表示记作[X]<sub>反</sub>，例如</p><p><img src="/images/image-20210809170845433.png" alt="image-20210809170845433"></p></li><li><p>补码</p><p>机器数的补码可由原码得到。如果机器数是正数，则该机器数的补码与原码一样；如果机器数是负数，则该机器数的补码是对它的原码（除符号位外）各位取反，并在末位加 1 而得到的。设有一数用 X 表示真值，则 X 的补码表示记作[X]<sub>补</sub>，例如：</p><p><img src="/images/image-20210809171108042.png" alt="image-20210809171108042"></p></li><li><p>补码的加减法运算</p><ul><li><p>补码加法</p><p>两个补码表示的数相加，符号位参加运算，且两数和的补码等于两数补码之和，即：</p><p><img src="/images/image-20210809171245746.png" alt="image-20210809171245746"></p></li><li><p>补码减法</p><p>根据补码加法公式可推出：</p><p><img src="/images/image-20210809171327665.png" alt="image-20210809171327665"></p></li><li><p>符号扩展</p><p>在计算机算术运算中，有时必须将采用给定位数表示的数转换成具有更多位数的某种表示形式。如某个程序需要将一个 8 位数与另外一个 32 位数相加。要想得到正确的结果，在将 8 位数与 32 位数相加之前，必须将 8 位数转换成 32 位数形式，这被称为“符号扩展”。</p><p>对于补码，符号扩展方法是：原有符号位保持不变，若为正数则所有附加位都用0 进行填充；若为负数则所有附加位都用 1 进行填充。该方法也可以理解为是用符号位来填充附加的高位。</p><p>如将用 8 位二进制补码表示的十进制数−121，扩展成 16 位二进制补码，结果用十六进制表示。</p><p>【解析】：十进制数−121 的 8 位二进制补码表示为 10000111，扩展成 16 位二进制补码，符号扩展表示为 1111111110000111= FF87H。</p></li><li><p>补码溢出的产生</p><p>在补码加减运算中，有时会遇到这样的情况：两个正数相加，而结果的符号位却为 1（结果为负）；两个负数相加，而结果的符号位却为 0（结果为正）。发生这种错误的原因在于两数相加之和的数值已超过了机器允许的表示范围。字长为 n+1 位的定点整数（其中一位为符号位），采用补码表示，当运算结果大于 2<sup>n-1</sup> 或小于-2<sup>n</sup>时，就产生溢出。</p><p>设参加运算的两数为 X、Y，做加法运算：</p><ul><li>若 X、Y 异号，不会溢出；</li><li>若 X、Y 同号，运算结果为正且大于所能表示的最大正数或运算结果为负且小于所能表示的最小负数时，产生溢出。将两正数相加产生的溢出称为正溢；反之，两负数相加产生的溢出称为负溢。</li></ul></li><li><p>补码溢出的检测</p><p>设被操作数为[X]补=XsX1X2…Xn，操作数为[Y]补=YsY1Y2…Yn，其和（差）为[S]补</p><p>=SsS1S2…Sn，则判断溢出的方法有以下三种：</p><ol><li>采用一个符号位</li></ol><p>两正数相加，结果为负表明产生正溢；两负数相加，结果为正表明产生负溢。因此可得出采用一个符号位检测溢出的方法：</p><ul><li>当 Xs=Ys=0，Ss=1 时，产生正溢；</li><li>当 Xs=Ys=1，Ss=0 时，产生负溢。</li></ul><ol start="2"><li>采用进位位 (没看懂)</li></ol><p>两数运算时，产生的进位为：CsC1C2…Cn，其中：Cs 为符号位产生的进位，C1为</p><p>最高数值位产生的进位。两正数相加，当最高有效位产生进位（C1=1）而符号位不产生进位（Cs=0）时，发生正溢。两负数相加，当最高有效位没有进位（C1=0）而符号位产生进位（Cs=1）时，发生负溢。</p><p>3）采用变形补码（双符号位补码）</p><p>在双符号位的情况下，把左边的符号位 Ss1 叫做真符，因为它代表了该数真正的符号，两个符号位都作为数的一部分参加运算。这种编码又称为变形补码。双符号位的含义如下：</p><p><img src="/images/image-20210809173329983.png" alt="image-20210809173329983"></p></li></ul></li></ol><h3 id="2-2-2-定点数和浮点数表示"><a href="#2-2-2-定点数和浮点数表示" class="headerlink" title="2.2.2 定点数和浮点数表示"></a>2.2.2 定点数和浮点数表示</h3><p>(这里没看懂)</p><p>在计算机中，一般用若干个二进制位表示一个数或一条指令，把它们作为一个整体来处理、存储和传送。这种作为一个整体来处理的二进制位串，称为计算机字。表示数据的字称为数据字，表示指令的字称为指令字。</p><p>计算机是以字为单位进行处理、存储和传送的，所以运算器中的加法器、累加器以及其他一些寄存器，都选择与字长相同的位数。字长一定，则计算机数据字所能表示的数的范围也就确定了。例如，使用 8 位字长的计算机，它可以表示无符号整数的最大值是（255）10=（11111111）2。运算时，若数值超出机器数所能表示的范围，就会停止运算和处理，这种现象称为溢出。</p><ol><li><p>定点数</p><p>计算机中运算的数有整数也有小数，对于小数点的位置的确定，通常有两种约定：一种是规定小数点的位置固定不变，这时的机器数称为定点数；另一种是小数点的位置可以浮动，这时的机器数称为浮点数。微型机多使用定点数。</p><p>数的定点表示是指数的小数点位置是固定不变的。小数点位置可以固定在符号位和第一数值位之间，这时表示一个纯小数；如果把小数点位置固定在数值位的最后，这时表示一个纯整数。</p></li><li><p>浮点数</p><p>浮点表示法就是小数点在数中的位置是浮动的。在以数值计算为主要任务的计算机中，由于定点表示法所能表示的数的范围太窄，不能满足计算问题的需要，因此就要采用浮点表示法。在同样字长的情况下，浮点表示法能表示的数的范围扩大了。</p><p>计算机中的浮点表示法包括两个部分：一部分是阶码（表示指数，记作 E）；另一部分是尾数（表示有效数字，记作 M）。设任意一个数 N 可以表示为</p><p><img src="/images/image-20210809182327967.png" alt="image-20210809182327967"></p><p>由尾数部分隐含的小数点位置可知，尾数总是小于 1 的数字，它给出该浮点数的有效数字。尾数部分的符号位确定该浮点数的正负。阶码给出的总是整数，它确定小数点浮动的位数。</p><p>浮点数表示法对尾数有如下规定：0.5 ≤M＜l，即要求尾数中第一位数不为零，这样的浮点数称为规格化数。</p><p>在浮点数表示和运算中，当一个数的阶码大于机器所能表示的最大阶码时，产生“上溢”。上溢时机器一般不再继续运算而转入“溢出”处理。当一个数的阶码小于机器所能表示的最小阶码时，产生“下溢”，此时溢出的数绝对值很小，通常将尾数各位置为 0，按机器零来处理，此时计算机可以继续运行。 </p><p><img src="/images/image-20210809182535771.png" alt="image-20210809182535771"></p></li><li><p>IEEE754 标准</p><ul><li><p>标准格式</p><p>IEEE754 标准中 32 位浮点数的标准格式为：</p><p><img src="/images/image-20210809182642383.png" alt="image-20210809182642383"></p><p>这里 <em>M</em> 是尾数的二进制表示， (<em>E</em>)<sub>10</sub> 为阶码的十进制表示，其范围是 1～254。</p><p>当阶码 <em>E</em> 和尾数 <em>M</em> 取特殊值时，对应的 <em>x</em> 值如表 2-1 所示。</p><p><img src="/images/image-20210809182856019.png" alt="image-20210809182856019"></p></li><li><p>习题举例</p><p><img src="/images/image-20210809183233934.png" alt="image-20210809183233934"></p></li></ul></li></ol><h2 id="2-3-浮点加减法运算"><a href="#2-3-浮点加减法运算" class="headerlink" title="2.3 浮点加减法运算"></a>2.3 浮点加减法运算</h2><p>暂时不深入学习</p><h2 id="2-4-逻辑运算和移位操作"><a href="#2-4-逻辑运算和移位操作" class="headerlink" title="2.4 逻辑运算和移位操作"></a>2.4 逻辑运算和移位操作</h2><p>运算器除了要完成数值数据的算术运算外，还要完成逻辑运算和移位运算。</p><h3 id="2-4-1-逻辑运算"><a href="#2-4-1-逻辑运算" class="headerlink" title="2.4.1 逻辑运算"></a>2.4.1 逻辑运算</h3><p>计算机中的逻辑运算包括与、或、非、异或等运算。由于逻辑数是非数值数据，其每一位的 “0”、“1”仅用于表示逻辑上的“真”与“假”，因此逻辑运算的特点是：按位运算，运算结果的各位之间互不影响，不存在进位、借位、溢出等问题。</p><ol><li><p>“与”运算</p><p>“与”运算又称逻辑乘，用符号“∧”、或“×”、或 AND 表示（一假皆假）</p></li><li><p>“或”运算</p><p>“或”运算又称逻辑加，用符号“＋”、或“∨”、或 OR 表示（一真皆真）。</p></li><li><p>“非”运算</p><p>“非”运算又称“求反”，一般在变量上加横线、或加 NOT 表示（取其反值）。</p></li><li><p>“异或”运算</p><p>“异或”运算又称“按位加”，一般用符号⊕表示（相异为真）。</p></li></ol><h3 id="2-4-2-移位运算"><a href="#2-4-2-移位运算" class="headerlink" title="2.4.2 移位运算"></a>2.4.2 移位运算</h3><p>移位运算称为移位操作，对计算机来说有很大的实用价值。如当某计算机没有乘（除）法运算线路时，可以采用移位和加法相结合，以实现乘（除）运算。</p><p>计算机中机器数的字长往往是固定的，当机器数左移 n 位或右移 n 位时，必然会使其 n 位低位或 n 位高位出现空位。对空出的空位应该添补 0 还是 l，与机器数采用有符号数还是无符号数有关。对有符号数的移位称为算术移位，无符号数的移位称为逻辑移位。</p><p>算术移位的规则是：</p><ul><li><p>首先，不论是正数还是负数，移位后其符号位均不变；</p></li><li><p>其次，对于正数，移位后出现的空位均添 0；</p></li></ul><p> 对于负数，其空位的添补规则也不同：</p><ol><li><p>原码时，其空位均添 0； </p></li><li><p>反码时，其空位均添 1； </p></li><li><p>补码时，左移其空位添 0，右移其空位添 1。</p></li></ol><p>逻辑移位的规则是：</p><ul><li><p>逻辑左移时，高位移丢，低位添 0；</p></li><li><p>逻辑右移时，低位移丢，高位添 0。</p></li></ul><p>如寄存器内容为 10110010，逻辑右移为 01011001，若将其视为补码，算术右移为11011001。</p><h2 id="2-5-非数值型数据的表示"><a href="#2-5-非数值型数据的表示" class="headerlink" title="2.5 非数值型数据的表示"></a>2.5 非数值型数据的表示</h2><h3 id="2-5-1-ASCII-码"><a href="#2-5-1-ASCII-码" class="headerlink" title="2.5.1 ASCII 码"></a>2.5.1 ASCII 码</h3><p>美国信息交换标准代码（American Strandard Code for Information Interchage，ASCII）是一种西文机内码，是计算机中使用最广泛的字符编码，已经作为国际通用的信息交换标准代码。ASCII 码包括 0～9 十个数字，大小写英文字母和专用符号等 95 种可打印字符，以及 33 种控制字符（如回车、换行等），通常采用一个字节编码，由 7 位二进制编码组成，字节的最高位一般规定为 0，或用作校验码，可表示 128 个不同的字符。</p><h3 id="2-5-2-汉字的编码"><a href="#2-5-2-汉字的编码" class="headerlink" title="2.5.2 汉字的编码"></a>2.5.2 汉字的编码</h3><ol><li><p>国标码</p><p>《信息交换用汉字编码字符集·基本集》是我国于 1980 年制定的国家标准GB2312—80，简称国标码，是国家规定的用于汉字信息交换使用的代码的依据。GB2312—80 中规定了信息交换用的 6763 个汉字和 682 个非汉字图形符号（包括外文字母、数字和符号）的代码。国标码用两个字节表示一个汉字，每个字节只使用低 7位，最高位为 0。</p></li><li><p>汉字机内码</p><p>汉字的机内码是供计算机系统内部进行存储、加工处理、传输统一使用的代码，又称为汉字内部码或汉字内码。汉字机内码是将国标码的两个字节的最高位分别置为1 而得到的。其最大优点是机内码表示简单，同时也解决了中西文机内码存在的二义性的问题。</p></li><li><p>汉字输入码</p><p>汉字输入码是为了将汉字通过键盘输入计算机而设计的代码。汉字输入编码方案很多，其表示形式大多用字母、数字或符号。输入码的长度也不同，多数为四个字节。综合起来可分为流水码、音码、形码和音形码几大类。</p></li><li><p>汉字字形码</p><p>汉字字形码是汉字字库中存储的汉字字形的数字化信息，用于汉字的显示和打印。目前汉字字形的产生方式大多是数字式，即以点阵方式形成汉字。因此，汉字字形码主要是指汉字字形点阵的代码，主要有 16×16 点阵、32×32 点阵、256×256 点阵等。</p></li></ol><h3 id="2-5-3-十进制数的编码"><a href="#2-5-3-十进制数的编码" class="headerlink" title="2.5.3 十进制数的编码"></a>2.5.3 十进制数的编码</h3><p>人们习惯于使用十进制数，而计算机内部多采用二进制数表示和处理数值数据，因此在计算机输入和输出数据时，就要进行由十进制到二进制和从二进制到十进制的转换处理，显然，这项事务性工作如果由人工来完成，势必造成大量时间浪费。因此，必须采用一种编码的方法，由计算机自己来完成这种识别和转换工作。</p><p>人们通常采用把十进制数的每一位分别写成二进制数形式的编码，称为二-十进制编码或 BCD 编码。BCD 编码方法很多，通常采用的是 8421 编码。其方法是用四位二进制数表示一位十进制数，自左至右每一位对应的位权分别是 8，4，2，1。值得注意的是，四位二进制数有 0000～1111 十六种状态，这里只取了 0000～1001 十种状态，而 1010～1111 六种状态在这种编码中没有意义。如十进制数 864，其 BCD 进制编码为 100001100100。 </p><h2 id="2-6-数据校验码"><a href="#2-6-数据校验码" class="headerlink" title="2.6 数据校验码"></a>2.6 数据校验码</h2><h3 id="2-6-1-奇偶校验码"><a href="#2-6-1-奇偶校验码" class="headerlink" title="2.6.1 奇偶校验码"></a>2.6.1 奇偶校验码</h3><p>为了校验编码的正确性，在被传送的 n 位有效信息代码上增加一位校验位，并使其配置后的 n+1 位代码中“1”的个数为奇数，则称其为奇校验；若配置后“1”的个数为偶数，则称其为偶校验。对于奇校验码而言，倘若传送过程中“1”的个数不为奇数，则表明传送出错，可见，奇校验码具有检错能力。同理，偶校验码也具有检错能力。</p><h3 id="2-6-2-循环冗余校验码"><a href="#2-6-2-循环冗余校验码" class="headerlink" title="2.6.2 循环冗余校验码"></a>2.6.2 循环冗余校验码</h3><p>循环冗余校验码（CRC）在磁介质存储器和计算机之间通信方面有广泛应用。CRC码是基于模 2 运算建立的校验码，将待编码的有效信息左移若干位后，用另一个约定的多项式去除，所产生的余数就是检验位。有效信息和检验位相拼接就构成了 CRC码。</p><h3 id="2-6-3-海明校验码"><a href="#2-6-3-海明校验码" class="headerlink" title="2.6.3 海明校验码"></a>2.6.3 海明校验码</h3><p>海明码是目前广泛采用的一种有效的校验码，其实现原理是：在有效信息位中加入几个校验位形成海明码，当某一位出错后，就会引起有关的几个校验位的值发生变化，因此海明码不但可以发现错误，还能指出错误的位置，为自动纠错提供了依据。</p><h1 id="3-指令和总线"><a href="#3-指令和总线" class="headerlink" title="3. 指令和总线"></a>3. 指令和总线</h1><h2 id="3-1-指令系统"><a href="#3-1-指令系统" class="headerlink" title="3.1 指令系统"></a>3.1 指令系统</h2><h3 id="3-1-1-指令系统概述"><a href="#3-1-1-指令系统概述" class="headerlink" title="3.1.1 指令系统概述"></a>3.1.1 指令系统概述</h3><ol><li><p>指令系统组成</p><p>计算机的程序是由一系列的机器指令组成的。</p><p>指令就是要计算机执行某种操作的命令。从计算机组成的层次结构来说，计算机的指令有<strong>微指令</strong>、<strong>机器指令</strong>和<strong>宏指令</strong>之分，微指令是微程序级的命令，它属于硬件；宏指令是由若干条机器指令组成的软件指令，它属于软件；而机器指令则介于微指令与宏指令之间，是硬件和软件的交界面，通常简称为指令，每条指令可完成一个独立的算术运算或逻辑运算操作。</p><p>一台计算机中所有机器指令的集合，称为这台计算机的指令系统。指令系统是表征一台计算机性能的重要因素，它的格式与功能不仅直接影响到机器的硬件结构，而且也直接影响到系统软件，影响到机器的适用范围。</p><p>指令系统一般由两种类型的指令组成：</p><p>1）<strong>非特权指令</strong></p><p>主要供用户使用，又可分为功能性指令和非功能性指令两种。功能性指令主要包括算术逻辑指令、数据传送指令、浮点运算指令、字符串指令等；非功能性指令主要包括转移指令、控制指令等。</p><p>2）<strong>特权指令</strong></p><p>主要供系统程序员使用，一般不允许用户使用。其中包括 I/O 指令、停机等待指令、存储管理及保护指令、控制系统状态指令、诊断指令等。若用户希望使用这类指令，必须先通过访管指令调用操作系统，再由操作系统控制和执行这些特权指令。</p><p>性能较好的指令系统一般都满足以下几个原则：</p><p>1）完备性</p><p>完备性指的是指令系统应功能齐全，给用户带来方便。用户的所有操作均可通过指令或指令串（程序或软件）实现。因此，为提高效率，指令系统应将用户常用的、简单的操作通过指令（硬件）直接实现，而复杂的操作则通过指令串（程序或软件）实现。</p><p>2）规整性 </p><p>规整性指的是指令系统的正交性、均匀性、对称性。</p><ul><li>正交性表示指令格式中各个互不相关的字段之间，在编码时应相互独立、互不相关，以方便译码和执行，如指令字可分成操作码和地址码两部分。</li><li>均匀性表示指令实现的操作与处理的数据类型无关，以方便数据类型扩展，如同一指令可支持对字节、字、双字整数的运算等。</li><li>对称性表示对不同指令中相同或相似的操作数具有相同的规定，以减少配件实现的复杂性，如对不同指令中的存储单元地址所占位数、寄存器号所占位数应具有相同的规定。</li></ul><p>3）兼容性</p><p>兼容性指不同机种之间具有相同的基本结构和共同的基本指令集，目的是给软件资源的重复利用带来方便。指令系统的兼容性主要指向前兼容。对系列机而言，因为不同机种具有相同的基本指令集，因而系列机中各机种上的指令系统是兼容的，所有已编的软件基本可以通用。</p><p>4）可扩充性</p><p>可扩充性指指令系统中要保留一定的指令字空间，以便在需要时进行指令系统的功能扩充。因为计算机应用和硬件是不断发展的，原来不常用的、复杂的操作可能会变成常用的、基本的操作，需要添加到指令系统中。</p></li><li><p>指令分类</p><p>按照功能类型的不同，指令可分为数据传送类指令、算术运算类指令、逻辑运算类指令、程序控制类指令、输入输出类指令、字符串类指令、系统控制类指令和其他指令。</p><p>1）数据传送类指令</p><p>这类指令主要完成将数据从一个地方传送到另一个地方的功能，一般可按字节、字传送，特殊情况下可以位为单位进行传送。</p><p>2）算术运算类相令</p><p>这类指令主要实现对数据进行算术运算功能，主要包括加、减、乘、除指令，求反、求补指令，算术移位、算术比较指令等。</p><p>3）逻辑运算类相令</p><p>这类指令主要包括逻辑与、逻辑或、逻辑非、逻辑异或、逻辑移位等。逻辑非指令和算术运算中的求反指令含义相同。</p><p>4）程序控制类指令</p><p>这类指令主要实现改变指令执行方向的功能。主要包括无条件转移、条件转移、转子、返主、循环指令等。</p><p>计算机执行程序时，通常按 CPU 中程序计数器 PC（Program Counter） 的内容取指令并执行。<strong>PC 中的内容为下一条（后续执行）指令的地址</strong>，在指令取指完成时，CPU 将自动修改 PC的内容，以保持其总是后续执行的指令地址。</p><p>若当前指令为顺序执行指令，PC 的内容总是原 PC 的内容加上当前指令的长度（字节数）。若当前指令为非顺序执行指令（如程序控制类指令），那么后续执行指令的地址（即 PC 的内容）在转移发生时，必须从当前指令的地址码字段中取得，而不是当前指令取指完成时的下一条指令地址。程序控制类指令的地址码给出的地址格式可以是直接给定的地址，也可以是相对于当前指令位量的偏移地址，或其他方式给出的地址。</p><p>5）输入输出类指令</p><p>这类指令主要实现 CPU 与外部设备间交换数据、传送控制命令及取得设备状态等功能。各种计算机的输入输出类指令差别较大，外部设备独立编址的计算机，其指令系统必须设置这类指令。</p><p>这类指令只有输入和输出两种指令。</p><p>6）字符串类指令</p><p>这类指令主要完成对字符串操作的功能，是一组非数值运算的指令。主要包含字符串转换（把一种编码格式的字符串转换成另一种编码格式的字符串）、字符串传送、字符串比较、字符串查找（查找字符串中某一子串）、字符串抽取（提取某一子串）、字符串替换（把某一子字符串用另一字符串替换）等指令。</p><p>7）系统控制类指令</p><p>这类指令主要完成改变系统的工作状态、实现操作系统所需要的特殊功能。大多数计算机将这类指令划为特权指令，只能被操作系统等系统软件使用，而用户一般不可以使用。主要包括停机、开中断、关中断、系统管理、存储管理指令等。</p><p>8）其他指令</p><p>除上述类型指令外，系统尚有一些必须具有特定功能的专用指令。这类指令主要包含状态寄存器置位、暂停、测试、空操作、中断返回等指令。</p></li><li><p>指令格式</p><ol><li><p>基本格式</p><p>指令格式是指令字用二进制代码表示的结构形式，通常由操作码字段和地址码字段组成，操作码字段表征指令的操作特性与功能，如进行加法、取数等等；地址码字段通常指定参与操作的操作数的地址，特殊情况下也可能直接给出操作数本身。指令的基本格式如下：</p><p><img src="/images/image-20210809194403535.png" alt="image-20210809194403535"></p></li><li><p>指令长度</p><p>指令的长度是指一条指令中所包含的二进制代码的位数，它取决于操作码字段的长度、操作数地址的个数及长度。指令长度应：①尽可能短；②等于字节的整数倍。</p><p>指令长度可以等于机器字长，也可以大于或小于机器字长。</p><ul><li>指令长度等于机器字长的指令，称为单字长指令；</li><li>指令长度等于半个机器字长的指令，称为半字长指令；</li><li>指令长度等于两个机器字长的指令，称为双字长指令。</li></ul><p>使用多字长指令的目的，在于提供足够的地址位来解决访问内存任何单元的寻址问题，但是使用多字长指令的主要缺点是必须多次访问内存以取出一整条指令，这降低了 CPU 的运算速度，同时又占用了更多的存储空间。</p><p>在一个指令系统中，若所有指令的长度都是相等的，称为定长指令字结构，这种指令结构简单；若各种指令的长度随指令功能而异，称为变长指令字结构，这种指令结构灵活，能充分利用指令长度，但指令的控制较为复杂。</p></li><li><p>操作码</p><p>指令系统中的每一条指令都有一个唯一确定的操作码，指令不同，其操作码的编码也不同。为了能表示整个指令系统中的全部指令，指令的操作码字段应当具有足够的位数。一般来说，一个包含 n 位的操作码最多能表示 2<sup>n</sup>条指令。</p><p>指令操作码通常有两种编码格式：一种是固定格式，即操作码的长度固定，且集中放在指令字的一个字段中，这种格式对简化硬件设计非常有利，在字长较长的大中型计算机中广泛采用；另一种是可变格式，即操作码的长度可变，且分散地放在指令字的不同字段中，在字长较短的微型和小型计算机中广泛采用。</p><p>操作码长度不同会增加指令译码和分析的难度，使控制器的设计复杂。通常采用扩展操作码技术，使操作码的长度随地址数的减少而增加，既充分利用指令字的各字段，又在不增加指令长度的情况下扩展操作码的长度。</p></li><li><p>地址码</p><p>地址码用来指出该指令的<strong>源操作数的地址</strong>、<strong>结果的地址</strong>以及<strong>下一条指令的地址</strong>。这里的“地址”可以是主存的地址，也可以是寄存器的地址，甚至可以是 I/O 设备的地址。</p><p>下面以主存地址为例，讨论双操作数指令的地址码结构。一条双操作数指令的除操作码之外，还应包含以下信息：第一操作数地址，用 A1 表示；第二操作数地址，用 A2 表示；操作结果存放地址，用 A3 表示；下条将要执行指令的地址，用 A4 表示。这些信息可以在指令中明显的给出，称为显地址；也可以依照某种事先的约定，用隐含的方式给出，称为隐地址。</p><p>1）四地址指令</p><p><img src="/images/image-20210809195145427.png" alt="image-20210809195145427"></p><p>（A1）OP（A2）→A3, A4＝下条将要执行指令的地址</p><p>执行一条四地址指令需 4 次访问主存。</p><p>四地址指令可直接寻址的地址范围与地址字段的位数有关。如果指令字长为 32</p><p>位，操作码占 8 位，4 个地址字段各占 6 位，则指令操作数的直接寻址范围为 2<sup>6</sup>= 64。  </p><ol start="2"><li>三地址指令</li></ol><p><img src="/images/image-20210809195359829.png" alt="image-20210809195359829"></p><p>（A1）OP（A2）→A3, （PC）＋ 1＝ 下条将要执行指令的地址</p><p>执行一条三地址指令也需 4 次访问主存。</p><p>同理，若指令字长不变，设 OP 仍为 8 位，则 3 个地址字段各占 8 位，故三地址</p><p>指令操作数的直接寻址范围可达 2<sup>8</sup>=256。</p><ol start="3"><li>二地址指令 </li></ol><p><img src="/images/image-20210809195525681.png" alt="image-20210809195525681"></p><p>（A1）OP（A2）→A1, （PC）＋ 1＝下条将执行指令的地址</p><p>A1 中原存内容在指令执行后被破坏。</p><p>执行一条二地址指令需 4 次访问主存。若使其完成（A1）OP（A2）→ACC，中间结果暂存于累加器 ACC 中，则只需访存 3 次。</p><p>在不改变指令字长和操作码的位数前提下，二地址指令操作数的直接寻址范围为2<sup>12</sup> =4 K。 </p><ol start="4"><li>一地址指令</li></ol><p><img src="/images/image-20210809195747057.png" alt="image-20210809195747057"></p><p>（ACC）OP（A1）→ ACC, （PC）＋ 1＝ 下条将要执行指令的地址</p><p>执行一条一地址指令需 2 次访问主存。</p><p>一地址指令短，又由于一个操作数已在 CPU 内，所以执行速度较快。</p><p>在指令字长仍为 32 位、操作码位数为 8 位的情况下，一地址指令操作数的直接寻址范围达 2<sup>24</sup>= 16 M。</p><ol start="5"><li>零地址指令</li></ol><p><img src="/images/image-20210809195908855.png" alt="image-20210809195908855"></p><p>零地址指令的指令字中只有操作码，没有地址码。例如空操作、停机等不需要操作数的指令，或者操作数隐含在堆栈中，其地址为堆栈的栈顶或次栈顶。</p><p>指令中地址个数的选取要考虑诸多的因素。从缩短程序长度，用户使用方便等方面来看，选用三地址指令格式较好；从减少访存次数，简化硬件设计等方面来看，一地址指令格式较好。对于同一个问题，用三地址指令编写的程序最短，但指令长度最长，而用二、一地址指令来编写程序，程序的长度逐个递增，但指令的长度逐个递减。</p><p>示例：计算 x=(a×b+c-d) ÷(e+f)</p><p>①三地址指令</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">MUL A，B，<span class="hljs-keyword">X</span><br>ADD <span class="hljs-keyword">X</span>，C，<span class="hljs-keyword">X</span><br>SUB <span class="hljs-keyword">X</span>，D，<span class="hljs-keyword">X</span><br>ADD E，F，<span class="hljs-keyword">Y</span><br><span class="hljs-keyword">DIV</span> <span class="hljs-keyword">X</span>，<span class="hljs-keyword">Y</span>，<span class="hljs-keyword">X</span><br></code></pre></td></tr></table></figure><p>需要 5 条指令，每条指令 4 次访存，执行此程序共访存 20 次。</p><p>②二地址指令</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tp">MOV <span class="hljs-keyword">X</span>，A<br>MUL <span class="hljs-keyword">X</span>，B<br>ADD <span class="hljs-keyword">X</span>，C<br>SUB <span class="hljs-keyword">X</span>，D<br>MOV <span class="hljs-keyword">Y</span>，E<br>ADD <span class="hljs-keyword">Y</span>，F<br><span class="hljs-keyword">DIV</span> <span class="hljs-keyword">X</span>，<span class="hljs-keyword">Y</span><br></code></pre></td></tr></table></figure><p>需要 7 条指令，其中 MOV 指令 3 次访存，算逻指令 4 次访存，执行此程序共访存 2×3+5×4=26 次。</p><p>③一地址指令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">LOAD  E<br><span class="hljs-keyword">ADD </span>  F<br>STORE X<br>LOAD  A<br><span class="hljs-keyword">MUL </span>  <span class="hljs-keyword">B</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">ADD </span>  C<br><span class="hljs-keyword">SUB </span>  D<br><span class="hljs-keyword">DIV </span>  X<br>STORE X<br></code></pre></td></tr></table></figure><p>需要 9 条指令，每条指令 2 次访存，执行此程序共访存 9×2=18 次。</p></li></ol></li></ol><h3 id="3-1-2-寻址方式"><a href="#3-1-2-寻址方式" class="headerlink" title="3.1.2 寻址方式"></a>3.1.2 寻址方式</h3><p>存储器既可用来存放操作数，又可用来存放指令。当某个操作数或某条指令存放在某个存储单元时，其存储单元的编号，就是该操作数或指令在存储器中的地址。因此，寻址方式可以分为<strong>数据寻址</strong>和<strong>指令寻址</strong>。寻找操作数的地址称为数据寻址，数据寻址方式较多，其最终目的都是寻找所需要的操作数。寻找下一条将要执行的指令地址称为指令寻址。</p><ol><li><p>指令寻址</p><p>指令寻址比较简单，它又可以细分为顺序寻址和跳跃寻址。顺序寻址可通过程序计数器 PC 加 1，自动形成下一条指令的地址；跳跃寻址是程序转移执行时的指令寻址方式，它通过转移类指令实现。</p><p>跳跃寻址的转移地址形成方式有三种：直接（绝对）、相对和间接寻址，它与数据寻址方式中的直接、相对和间接寻址是相同的，只不过寻找到的不是操作数的有效地址而是转移的有效地址而已。</p></li><li><p>数据寻址</p><p>数据寻址方式种类较多，在指令字中必须设一字段来指明属于哪一种寻址方式。指令的地址码字段通常都不代表操作数的真实地址，把它称为形式地址，记作 A。操作数的真实地址称为有效地址，记作 EA，它是由寻址方式和形式地址共同来确定的。由此可得指令的格式应如下所示。</p><p><img src="/images/image-20210809200634180.png" alt="image-20210809200634180"></p><p>指令中的形式地址 A→(寻址方式)→有效地址 EA</p><ol><li><p>立即寻址</p><p>在取指令时，操作码和操作数被同时取出，不必再次访问存储器，从而提高了指令的执行速度。立即寻址的特点是操作数本身设在指令字内，即形式地址 A 不是操作数的地址，而是操作数本身，也称立即数。由于操作数是指令的一部分，故立即数的大小将受到指令长度的限制。</p><p><img src="/images/image-20210809200901874.png" alt="image-20210809200901874"></p></li><li><p>直接寻址</p><p>指令中地址码字段给出的地址 A 就是操作数的有效地址：EA=A。直接寻址的缺点在于 A 的位数限制了操作数的寻址范围，且必须修改 A 的值，才能修改操作数的地址。</p><p><img src="/images/image-20210809201025610.png" alt="image-20210809201025610"></p></li><li><p>间接寻址</p><p>指令中给出的地址 A 不是操作数的地址，而是存放操作数地址的地址：EA=（A）。</p><p>间接寻址要比直接寻址灵活得多，它的主要优点为：一是扩大了寻址范围，可用指令的短地址访问大的主存空间，二是可将主存单元作为程序的地址指针，用以指示操作数在主存中的位置。当操作数的地址需要改变时，不必修改指令，只需修改存放有效地址的那个主存单元（间接地址单元）的内容就可以了。 </p><p><img src="/images/image-20210809201251742.png" alt="image-20210809201251742"></p><p>除去一级间接寻址外，还有多级间接寻址。多级间接寻址为取得操作数需要多次访问主存，即使在找到操作数有效地址后，还需再访问一次主存才可得到真正的操作数。</p></li><li><p>寄存器寻址</p><p>指令中地址码部分给出某一通用寄存器的编号，所指定的寄存器中存放着操作数。它有两个明显的优点：一是从寄存器存取数据比主存快得多；二是由于寄存器的数量较少，其地址码字段比主存单元地址字段短得多。</p><p><img src="/images/image-20210809201521215.png" alt="image-20210809201521215"></p></li><li><p>寄存器间接寻址</p><p>指令中的地址码给出某一通用寄存器的编号，被指定的寄存器中存放操作数的有效地址，而操作数则存放在主存单元中。</p><p><img src="/images/image-20210809201625926.png" alt="image-20210809201625926"></p></li><li><p>变址寻址</p><p>把指令给出的形式地址 A 与变址寄存器 Rx 的内容相加，形成操作数有效地址：EA ＝ A ＋（Rx），Rx 的内容为变址值。</p><p><img src="/images/image-20210809201741051.png" alt="image-20210809201741051"></p><p>变址寻址是一种广泛采用的寻址方式，通常指令中的形式地址作为基准地址，而Rx 的内容作为修改量。在遇到需要频繁修改地址时，无须修改指令，只要修改变址值就可以了。</p><p>如要把一组连续存放在主存单元中的数据（首地址是 A）依次传送到另一存储区（首地址为 B）中去，则只需在指令中指明两个存储区的首地址 A 和 B（形式地址），用同一变址寄存器提供修改量 K，即可实现（A＋K）→B＋K。变址寄存器的内容在每次传送之后自动地修改。</p></li><li><p>基址寻址</p><p>将基址寄存器 Rb 的内容与形式地址 A 相加，形成操作数有效地址：EA＝（Rb）＋ A，基址寄存器的内容称为基址值。</p><p><img src="/images/image-20210809201924613.png" alt="image-20210809201924613"></p><p>基址寻址和变址寻址在形成有效地址时所用的算法是相同的，而且在一些计算机中，这两种寻址方式都是由同样的硬件来实现的。</p><p>但这两种寻址方式应用的场合不同，变址寻址是面向用户的，用于访问字符串、向量和数组等成批数据；而基址寻址面向系统，主要用于逻辑地址和物理地址的变换，用以解决程序在主存中的再定位和扩大寻址空间等问题。在某些大型机中，基址寄存器只能由特权指令来管理，用户指令无权操作和修改。</p></li><li><p>相对寻址</p><p>相对寻址是基址寻址的一种变通，由程序计数器 PC 提供基准地址，即EA＝（PC）＋ A， A 是操作数和现行指令之间的相对位置。</p><p>相对寻址方式的特点是：操作数的地址不是固定的，它随着 PC 值的变化而变化，并且与指令地址之间总是相差一个固定值 A。当指令地址改变时，由于其位移量不变，使得操作数与指令在可用的存储区内一起移动，所以仍能保证程序的正确执行。采用PC 相对寻址方式编写的程序可在主存中任意浮动，它放在主存的任何地方，所执行的效果都是一样的。指令中给出的位移量 A 可正、可负，通常用补码表示，故对于指令地址而言，操作数地址可能在指令地址之前或之后。</p><p><img src="/images/image-20210809202251330.png" alt="image-20210809202251330"></p></li><li><p>隐含寻址</p><p>隐含寻址是指指令字中不明显地给出操作数的地址，其操作数的地址隐含在操作码或某个寄存器中。如一地址指令格式，只给出一个操作数的地址，另一个操作数隐含在累加器 ACC 中，故累加器 ACC 对一地址指令格式来说是隐含地址。</p><p><img src="/images/image-20210809202346390.png" alt="image-20210809202346390"></p></li><li><p>堆栈寻址</p><p>在堆栈寻址的指令字中没有形式地址码字段，它是一种零地址指令。堆栈寻址要求计算机中设有堆栈。堆栈既可用寄存器组来实现，也可利用主存的一部分空间作堆栈，前者称为硬堆栈，后者称为软堆栈。</p></li></ol></li></ol><h3 id="3-1-3-RISC-技术"><a href="#3-1-3-RISC-技术" class="headerlink" title="3.1.3 RISC 技术"></a>3.1.3 RISC 技术</h3><p>随着超大规模集成电路的飞速发展，计算机硬件结构越来越复杂，大多数计算机的指令系统多达几百条，这些计算机被称为复杂指令系统计算机，简称 CISC(Complex Instruction Set Computer)。CISC的指令系统复杂庞大，指令数目多；CPU 中设有专用寄存器；指令字长不固定，指令格式多，寻址方式多；可访存指令不受限制；各种指令的执行时间相差大；采用微程序控制器；难以用优化编译生成高效的目标代码。</p><p>大量测试表明，最常使用的是一些比较简单的指令，这类指令仅占指令总数的20％，但在各种程序中出现的频率却占 80%，其余大多数指令是功能复杂的指令，这类指令占指令总数的 80%，但其使用频率很低，仅占 20%。因此，人们把这种情况称为“20%-80%律”。</p><p>从“20%-80%律”出发，人们开始了对指令系统合理性的研究，提出了精简指令系统的想法，出现了精简指令系统计算机，简称 RISC(Reduced Instruction Set Computer)。RISC 的主要特点是：</p><ol><li>选取使用频度较高的简单指令，以及很有用但不复杂的指令；</li><li>指令长度固定，指令格式种类少，寻址方式种类少；</li><li>只有取数/存数（LOAD/STORE）指令访问存储器，其余指令的操作都在寄存器内完成；</li><li>CPU 中有多个通用寄存器。</li><li>采用流水线技术，大部分指令在一个时钟周期内完成；</li><li>控制器采用组合逻辑控制为主；</li><li>采用优化编译技术。</li></ol><h2 id="3-2-总线系统"><a href="#3-2-总线系统" class="headerlink" title="3.2 总线系统"></a>3.2 总线系统</h2><h3 id="3-2-1-总线系统"><a href="#3-2-1-总线系统" class="headerlink" title="3.2.1 总线系统"></a>3.2.1 总线系统</h3><p>计算机系统各部件之同的互连方式有两种，一种是各部件之同使用单独的连线，称为分散连接；另一种是将各部件连到一组公共信息传输线上，称为总线连接。</p><p>总线是连接多个部件的信息传输线，是各部件共享的传输介质。从不同角度，总线有不同分类方法：按数据传送方式，可分为<strong>串行传输总线</strong>和<strong>并行传输总线</strong>；按连接部件不同，可分为<strong>片内总线</strong>、<strong>系统总线</strong>和<strong>通信总线</strong>。</p><ul><li>片内总线是指芯片内部的总线，如在 CPU 芯片内部，寄存器与寄存器之间、寄存器与算逻单元 ALU 之间都由片内总线连接。</li><li>通信总线用于计算机系统之间，或者计算机系统与其他系统如控制仪表、移动通信等之间的通信。</li><li>系统总线是微机系统中各部件之间传输信息的公共通路。信息可以从多个信息源中的任一信息源通过总线传送到多个信息接收部件中的任一部件。总线首先包括一组物理导线，这是信息传输的物理媒质。系统总线按照传输信息的不同，又可分为三类：地址总线、数据总线和控制总线。</li></ul><ol><li><p>地址总线</p><p>地址总线用来传送 CPU 发出的地址信息，是单向总线。</p></li><li><p>数据总线</p><p>数据总线用来传送数据信息，是双向总线。</p></li><li><p>控制总线</p><p>控制总线用来传送控制信号、时序信号和状态信息等，是双向总线。</p></li></ol><h3 id="3-2-2-总线的特性"><a href="#3-2-2-总线的特性" class="headerlink" title="3.2.2 总线的特性"></a>3.2.2 总线的特性</h3><ul><li>物理特性：总线的物理连接方式</li><li>功能特性：总线每一根线的功能</li><li>电气特性：定义每一根线上信号的传递方向及有效电平范围</li><li>时间特性：定义每一根线在什么时间有效</li></ul><h3 id="3-2-3-总线性能指标"><a href="#3-2-3-总线性能指标" class="headerlink" title="3.2.3 总线性能指标"></a>3.2.3 总线性能指标</h3><p>总线性能指标主要包括以下六个方面：</p><ol><li><p>总线频率 （我理解频率就是每秒干那一件事干了多少次）</p><p>总线的工作频率以 MHz 表示。它是总线工作进度的一个重要参数，工作频率越高，速度越快。</p></li><li><p>总线宽度</p><p>总线宽度是指数据总线的位数，用 bit（位）来表示，如 8 位、16 位、32 位、64位总线宽度。</p></li><li><p>总线的数据传输率</p><p>总线的数据传输率是指在一定的时间内总线上可传送的数据总量，用每秒最大传输数据字节量来表示。总线的数据传输率的计算公式是：</p><p><strong>总线的数据传输率＝（总线宽度/8 位）× 总线频率</strong></p><p>其单位是 MB/s，总线频率以 MHz 为单位。如 PCI 总线的总线频率为 33.3MHz，总线宽度为 32 位的情况下，其数据传输率为 133MB/s。</p></li><li><p>时钟同步/异步</p><p>总线上的数据与时钟同步工作的总线称为同步总线，与时钟不同步工作的总线称为异步总线。</p></li><li><p>总线复用</p><p>通常情况下，地址线和数据线在物理上是分开的，但为了提高总线的利用率和优化设计，在有些总线中将地址线和数据线共用同一组物理线路，然后分时传送地址或数据信号，这就是总线复用。</p></li><li><p>总线负载能力</p><p>不同的电路对总线的负载是不同的，即使是同一块电路板，在不同的工作频率下，总线的负载也不一样，所以对总线负载能力的指标并不太严格，一般情况下用可连接的扩充电路板的数目来反映总线的负载能力。</p></li></ol><p>在这些性能指标中，总线频率、总线宽度和总线的数据传输率是最重要的 3 个指标。</p><h3 id="3-2-4-总线结构"><a href="#3-2-4-总线结构" class="headerlink" title="3.2.4 总线结构"></a>3.2.4 总线结构</h3><p>按照总线的排列布置及计算机内各部件连接方式的不同，可以将单机总线结构分为三种：单总线结构、双总线结构和三总线结构。</p><ol><li><p>单总线结构</p><p>用一条系统总线连接计算机系统的各个功能部件，各功能部件间所有的信息传输都靠这条总线来实现。单总线结构多为小型机和微型机采用。</p><p><img src="/images/image-20210809205222105.png" alt="image-20210809205222105"></p></li><li><p>双总线结构</p><p>系统内增加了存储总线，存储总线专门负责 CPU 和主存之间的信息高速传输。双总线结构以增加硬件为代价，提高了 CPU 的效率，同时又保持了单总线结构系统简单、易于扩充的优点。</p><p><img src="/images/image-20210809205428249.png" alt="image-20210809205428249"></p></li><li><p>三总线结构</p><p>三总线结构在双总线结构的基础上增加了 I/O 总线，系统内有 3 条各自独立的总线：系统总线是 CPU、主存和通道之间进行信息传输的公共通路；I/O 总线是多个外部设备与通道之间进行数据传送的公共通路；存储总线负责 CPU 和主存之间的信息传输。</p><p><img src="/images/image-20210809205608729.png" alt="image-20210809205608729"></p><p>由于通道分担了一部分 CPU 的功能，可以实现对外设的统一管理及外设与主存之间的信息传输，所以三总线结构系统的效率有很大提高。</p></li></ol><h3 id="3-2-5-总线标准"><a href="#3-2-5-总线标准" class="headerlink" title="3.2.5 总线标准"></a>3.2.5 总线标准</h3><p>总线标准是系统与各模块、模块与模块之间的一个互连标准界面，按总线标准设计的接口可视为通用接口，这为计算机接口的软硬件设计提供了方便。主要的总线标准有以下几种：</p><ol><li><p>PCI</p><p>PCI（Peripheral Component Interconnect，外围部件互连）总线是现代计算机中最常用的总线之一，PCI 总线是并行的，有 32 位或 64 位，支持即插即用，支持 5V 和3.3V 两种电压标准，具有良好的兼容性和可扩充性。</p></li><li><p>SCSI</p><p>SCSI（Small Computer System Interface，小型计算机系统接口）是一种通用的并行接口标准，用于在计算机和外部设备之间进行物理连接和传输数据。SCSI 通常用在硬盘和磁带上，也可以用于其他设备如扫描仪、CD 和 DVD 驱动器等。</p></li><li><p>RS-232C</p><p>RS-232C（ RS 即 Recommended Standard，232 为标识号，C 表示修改次数）是一种串行通信总线标准，它是应用于串行二进制交换的数据终端设备和数据通信设备之间的标准接口。</p></li><li><p>FireWire</p><p>FireWire 串行总线标准由苹果公司开发，被 IEEE 组织采用并定名为 IEEE1394 标准。FireWire 可实现即插即用，能连接多个不同的设备。</p></li><li><p>USB</p><p>USB(Universal Serial Bus，通用串行总线)是一种计算机串行接口总线标准，它可实现外设的简单快速连接，几乎所有的外设装置包括显示器、键盘、鼠标、打印机、数码相机、U 盘等可直接插入标准 USB 插口。</p><p>USB2.0 版的数据传输速度最高为 480Mbps，接口供电能力为 0.5A。</p><p>USB3.0 版的理论最高数据传输速度为 5.0Gbps，接口供电能力为 1A。USB3.0 引入了全双工数据传输，5 根线路中 2 根用来发送数据，2 根用来接收数据，1 根是地线，即USB 3.0可以同步全速地进行读写操作。之前的USB版本并不支持全双工数据传输。</p></li></ol><h3 id="3-2-6-总线控制"><a href="#3-2-6-总线控制" class="headerlink" title="3.2.6 总线控制"></a>3.2.6 总线控制</h3><ol><li><p>总线仲裁</p><p>系统中多个设备或模块可能同时申请对总线的使用权，为避免产生总线冲突，在多个申请者同时提出总线请求时，以一定的优先算法仲裁哪个应获得对总线的使用权。</p><p>按照总线仲裁电路的位置不同，总线仲裁方式可分为：<strong>集中式仲裁</strong>和<strong>分布式仲裁</strong>。</p><p>集中式总线仲裁的控制逻辑基本集中在一处，需要中央仲裁器，分为：链式查询方式、计数器定时查询方式、独立请求方式。</p><p>分布式仲裁不需要中央仲裁器，每个潜在的主方功能模块都有自己的仲裁号和仲裁器。当它们有总线请求时，把它们唯一的仲裁号发送到共享的仲裁总线上，每个仲裁器将仲裁总线上得到的号与自己的号进行比较。如果仲裁总线上的号大，则它的总线请求不予响应，并撤消它的仲裁号。最后，获胜者的仲裁号保留在仲裁总线上。显然，分布式仲裁是以优先级仲裁策略为基础。</p><p>以下对集中式总线仲裁的三种方式作简要介绍：</p><ul><li><p><strong>链式查询</strong></p><p>链式查询时，总线授权信号 BG 串行地从一个 I/O 接口传送到下一个 I/O 接口。假如 BG 到达的接口无总线请求，则继续往下查询；假如 BG 到达的接口有总线请求，BG 信号便不再往下查询，该 I/O 接口获得了总线控制权。离中央仲裁器最近的设备具有最高优先级，通过接口的优先级排队电路来实现。</p><p><img src="/images/image-20210809210605892.png" alt="image-20210809210605892"></p><p>链式查询的优点在于只用很少几根线就能按一定优先次序实现总线仲裁，很容易扩充设备。其主要缺点是对询问链的电路故障很敏感，如果第 i 个设备的接口中有关链的电路有故障，那么第 i 个以后的设备都不能进行工作。查询链的优先级是固定的，如果优先级高的设备出现频繁的请求时，优先级较低的设备可能长期不能使用总线。</p></li><li><p><strong>计数器定时查询</strong></p><p>总线上的任一设备要求使用总线时，通过总线请求线 BR 发出总线请求。中央仲裁器接到请求信号以后，在总线状态线 BS 为“0”的情况下让计数器开始计数，计数值通过一组地址线发向各设备。每个设备接口都有一个设备地址判别电路，当地址线上的计数值与请求总线的设备地址相一致时，该设备置“1”BS 线，获得了总线使用权，此时中止计数查询。</p><p><img src="/images/image-20210809210720371.png" alt="image-20210809210720371"></p></li><li><p><strong>独立请求</strong></p><p>独立请求的每一个共享总线的设备均有一对总线请求线 BRi 和总线授权线 BGi。当设备要求使用总线时，便发出该设备的请求信号。中央仲裁器中的排队电路决定首先响应哪个设备的请求，给设备以授权信号 BGi。</p><p>这种方式的优点是响应时间快，确定优先响应的设备所花费的时间少，用不着一个设备接一个设备地查询。其次，对优先次序的控制相当灵活，可以预先固定也可以通过程序来改变优先次序；还可以用屏蔽某个请求的办法，不响应来自无效设备的请求。</p><p><img src="/images/image-20210809211223016.png" alt="image-20210809211223016"></p></li></ul></li><li><p>总线通信控制</p><p>总线通信控制主要解决通信双方如何获知传输开始和传输结束，以及通信双方如何协调如何配合。通常用四种方式：同步通信、异步通信、半同步通信和分离式通信。</p><ol><li><p>同步通信</p><p>通信双方由统一时标控制数据传送称为同步通信。时标通常由 CPU 的总线控制部件发出，送到总线上的所有部件；也可以由每个部件各自的时序发生器发出，但必须由总线控制部件发出的时钟信号对它们进行同步。</p><p>这种通信的优点是规定明确、统一，模块间的配合简单一致，缺点是主、从模块时间配合属于强制性同步，必须在限定时间内完成规定的要求。</p><p>同步通信一般用于总线长度较短、各部件存取时间比较一致的场合。</p></li><li><p>异步通信</p><p>异步通信没有公共的时钟标准，不要求所有部件严格的统一操作时间，而是采用应答方式，即当主模块发出请求信号时，一直等待从模块反馈回来响应信号后，才开始通信。</p><p>异步通信的应答方式又可分为不互锁、半互锁和全互锁三种类型。</p><ul><li><p>不互锁方式</p><p>主模块发出请求信号后，不必等待接到从模块的回答信号，而是经过一段时间，确认从模块已收到请求信号后，便撤销其请求信号；从模块接到请求信号后，在条件允许时发出回答信号，并且经过一段时间确认主模块已收到回答信号后，自动撤销回答信号。通信双方并无互锁关系。</p></li><li><p>半互锁方式</p><p>主模块发出请求信号，必须待接到从模块的回答信号后再撤销其请求信号，有互锁关系；而从模块在接到请求信号后发出回答信号，但不必等待获知主模块的请求信号已经撤销，而是隔一段时间后自动撤销其回答信号，无互锁关系。由于一方存在互锁关系，一方不存在互锁关系，故称半互锁方式。</p></li><li><p>全互锁方式</p><p>主模块发出请求信号，必须待从模块回答后再撤销其请求信号；从模块发出回答信号，必须待获知主模块请求信号已撤销后，再撤销其回答信号。双方存在互锁关系，故称为全互锁方式。</p><p>异步串行通信的数据传送速率用波特率来衡量。波特率是指单位时间内传送二进制数据的位数，单位用 bps(位/秒)表示，记作波特。</p></li></ul></li><li><p>半同步通信</p><p>半同步通信既保留了同步通信的基本特点，如所有的地址、命令、数据信号的发出时间，都严格参照系统时钟的某个前沿开始，而接收方都采用系统时钟后沿时刻来进行判断识别；同时又像异步通信那样，允许不同速度的模块和谐地工作。</p></li><li><p>分离式通信</p><p>为提高系统性能，人们提出了“分离式”的通信方式，其基本思想是将一个传输周期（或总线周期）分解为两个子周期。在第 1 个子周期中，主模块 A 在获得总线使用权后将命令、地址以及其他有关信息，包括该主模块编号发到系统总线上，经总线传输后，由有关的从模块 B 接收下来。主模块 A 向系统总线发布这些信息只占用总线很短的时间，一旦发送完，立即放弃总线使用权，以便其他模块使用。在第 2 个子周期中，当 B 模块收到 A 模块发来的有关命令信号后，经选择、译码、读取等一系列内部操作，将 A 模块所需的数据准备好，便由 B 模块申请总线使用权，一旦获准，B 模块便将 A 模块的编号、B 模块的地址、A 模块所需的数据等一系列信息送到总线上，供 A 模块接收。很明显，上述两个传输子周期都只有单方向的信息流，每个模块都变成了主模块。</p></li></ol></li></ol><h3 id="3-3-7-总线的信息传送模式"><a href="#3-3-7-总线的信息传送模式" class="headerlink" title="3.3.7 总线的信息传送模式"></a>3.3.7 总线的信息传送模式</h3><ol><li><p>读、写操作</p><p>读操作是从方到主方的数据传送；写操作是主方到从方的数据传送。</p></li><li><p>块传送操作</p><p>对固定块长度的数据连续读或写。</p></li><li><p>写后读、读修改写操作</p><p>写后读用于校验；读修改写用于多道程序系统中对共享存储资源的保护。</p></li><li><p>广播、广集操作</p><p>广播操作允许一个主方对多个从方进行写操作；和广播操作相反，广集将选定的多个从方数据在总线上完成 AND 或 OR 操作，用以检测多个中断源。</p></li></ol><h1 id="4-存储系统"><a href="#4-存储系统" class="headerlink" title="4. 存储系统"></a>4. 存储系统</h1><h2 id="4-1-存储器概述"><a href="#4-1-存储器概述" class="headerlink" title="4.1 存储器概述"></a>4.1 存储器概述</h2><p>存储器是计算机系统中的记忆设备，用来存放程序和数据。存储器中含有大量的存储单元。存储单元包含若干个存储元件（存储元），每个存储元能寄存一个“0”或“1”二进制数，故<strong>存储单元可存储一串二进制数，称为一个字</strong>，其位数称为存储字长，可为 8 位、16 位、32 位、64 位等，存储元件是存储器中最小的存储单元。</p><p>存放一个机器字的存储单元，通常称为字存储单元，相应的单元地址叫字地址。存放一个字节的单元，称为字节存储单元，相应的地址称为字节地址。若计算机中可编址的最小单位是字存储单元，则该计算机称为按字编址的计算机。若计算机中可编址的最小单位是字节，则该计算机称为按字节编址的计算机。通常计算机系统既可以按字寻址，也可按字节寻址。</p><h3 id="4-1-1-数据的存储"><a href="#4-1-1-数据的存储" class="headerlink" title="4.1.1 数据的存储"></a>4.1.1 数据的存储</h3><ol><li><p>存储方式</p><p>通常计算机中的数据可以存储在寄存器或存储器中。</p><p>对寄存器而言，可以存放数据的长度是固定的，一般与机器字长一致。</p><p>对存储器而言，一次访问存储器单元的取得位数一般与计算机机器字长是相同的，目的是使 CPU 能够一次访问到数据的全部。</p><p>现代计算机的存储器大多以字节为单位编址，即每个存储单元地址对应一个字节的数据空间。存储器硬件特性决定了一次访问存储器所能取得的数据肯定是在连续的地址中，因此当数据长度大于一个字节时，数据就必须存放在从指定地址开始的、相邻的多个字节的存储器空间中。</p><p>按照数据的高字节和低字节在存储器中的存储次序，可分为大端（Big-endian）和小端（Little-endian）两种数据存储方式。将最低字节存储在指定存储器空间中最小地址位置的存储方法称为小端方式；将最低字节存储在指定存储器空间中最大地址位置的存储方法称为大端方式。</p><p>假设一个数据由 4 个字节组成，需要存储在从 N 开始的存储器地址中，用 B3、 B2、B1、B0 分别表示操作数的 4 个字节，其中 B3为数据的最高字节，B0 为数据的最低字节，该操作数的大端和小端数据存储方式结果如图所示。</p><p>注意，大端、小端存储方式是指数据的字节间的存储次序，而字节内的数据无大、小端之分，永远是 bit7 为字节内数据的最高位，bit0 为字节内数据的最低位。</p><p><img src="/images/image-20210809213532023.png" alt="image-20210809213532023"></p></li><li><p>数据对齐方式</p><p>对机器指令而言，操作数长度有字节、半字、字、双字等数据长度，要求存储器必须一次能够存取这些长度的操作数。因此，数据在存储器中应存储在存储空间阵列的同一行。假如操作数不能够存储在同一行，则机器指令取操作数至少需要两个访存周期，严重影响机器指令的执行速度。</p></li></ol><h3 id="4-1-2-存储器的分类"><a href="#4-1-2-存储器的分类" class="headerlink" title="4.1.2 存储器的分类"></a>4.1.2 存储器的分类</h3><p>根据存储元件的性能及使用方法，存储器可有不同的分类。</p><ol><li><p>按存储介质分类</p><p>目前使用的存储介质主要是半导体器件、磁性材料和光盘等。用半导体器件组成的存储器称为半导体存储器；用磁性材料做成的存储器有磁表面存储器和磁芯存储器，常见的磁表面存储器有磁盘和磁带；光盘存储器是应用激光在磁光材料上进行读/写的存储器。</p></li><li><p>按存取方式分类</p><p>若存储器中任何存储单元的内容都能被随机存取，且存取时间和存储单元的物理位置无关，这种存储器称为随机存储器。半导体存储器和磁芯存储器都是随机存储器。</p><p>如果存储器只能接某种顺序来存取，即存取时间和存储单元的物理位置有关，这种存储器称为顺序存储器，如磁带存储器就是顺序存储器。</p><p>磁盘存储器是半顺序存储器，在对磁盘读/写时，首先直接指出该存储器中的某个小区域（磁道），然后再顺序寻访，直至找到位置。即其前段是直接访同，后段是顺序访问，也称为直接存取存储器。</p></li><li><p>按存储器的读写功能分类</p><p>有些半导体存储器存储的内容是固定不变的，即只能读出而不能写入，因此这种半导体存储器称为只读存储器（ROM）。</p><ul><li>早期采用掩模工艺，把原始信息记录在芯片中，一旦制成后无法更改，这种只读存储器称为掩模型只读存储器（Masked ROM，MROM）。之后又派生出可编程只读存储器（Programmable ROM，PROM）、可擦除可编程只读存储器（Erasable Programmable ROM，EPROM）以及用电可擦除可编程只读存储器（Electrically Erasable Programmable ROM，EEPROM）。PROM 只能写一次，而 EPROM 和 EEPROM 则可多次改写。后来出现的闪速存储器 Flash Memory，它具有 EPROM 和 EEPROM 的特点，但性价比更好、可靠性更高、擦除重写速度比 EEPROM 快得多。</li></ul><p>既能读出又能写入的半导体存储器，称为随机存储器（RAM）。RAM 又分为 SRAM（静态随机存储器）和 DRAM（动态随机存储器）。</p></li><li><p>按信息的可保存性分类</p><p>断电后信息即消失的存储器，称为易失性存储器。断电后仍能保存信息的存储器，称为非易失性存储器，如磁性材料做成的存储器。</p></li><li><p>按在计算机系统中的作用分类</p><p>根据存储器在计算机系统中所起的作用，可分为主存储器、辅助存储器、缓冲存储器等。</p><p><img src="/images/image-20210809214613100.png" alt="image-20210809214613100"></p></li></ol><h3 id="4-1-3-存储器的层次结构"><a href="#4-1-3-存储器的层次结构" class="headerlink" title="4.1.3 存储器的层次结构"></a>4.1.3 存储器的层次结构</h3><ol><li><p>性能指标</p><p>存储器的性能指标主要有三个：速度、容量和位价。一般来说，速度越高，位价就越高；容量越大，速度就越低，价位也越低。人们追求大容量、高速度、低价位的存储器，这就需要存储系统来平衡各种存储器。</p><p><img src="/images/image-20210809214754978.png" alt="image-20210809214754978"></p></li><li><p>层次结构</p><p>存储系统层次结构主要体现在缓存-主存和主存-辅存这两个存储层次上。缓存-主存层次主要解决 CPU 和主存速度不匹配的问题，主存-辅存层次主要解决存储系统的容量问题。现代的计算机系统几乎都具有这两个存储层次，构成了缓存、主存、辅存三级存储系统。</p></li></ol><h2 id="4-2-主存储器"><a href="#4-2-主存储器" class="headerlink" title="4.2 主存储器"></a>4.2 主存储器</h2><h3 id="4-2-1-主存的技术指标"><a href="#4-2-1-主存的技术指标" class="headerlink" title="4.2.1 主存的技术指标"></a>4.2.1 主存的技术指标</h3><p>主存储器的技术性能指标主要是存储容量、存取时间和存取周期。</p><p>在一个存储器中可以容纳的存储单元总数通常称为该存储器的存储容量。存储容量常用 B、KB、MB、GB、TB 等单位表示。存储容量反映了存储空间的大小。</p><p>存取时间又称存储器访问时间，是指从启动一次存储器操作到完成该操作所经历的时间。具体对于读操作而言，从一次读操作命令发出到该操作完成，将数据读入数据缓冲寄存器为止所经历的时间，即为存储器存取时间。</p><p>存取周期也称为存储周期，指连续启动两次独立的存储器操作（如连续两次读操作）所需的最小间隔时间。通常，存取周期略大于存取时间。存取时间和存取周期是主存的速度指标。</p><h3 id="4-2-2-半导体存储芯片的基本结构"><a href="#4-2-2-半导体存储芯片的基本结构" class="headerlink" title="4.2.2 半导体存储芯片的基本结构"></a>4.2.2 半导体存储芯片的基本结构</h3><p>现代计算机的主存都由半导体集成电路构成，而半导体存储芯片采用超大规模集成电路制造工艺，在一个芯片内集成具有记忆功能的存储矩阵、译码驱动电路和读/写电路等。</p><p>译码驱动能把地址总线送来的地址信号翻译成对应存储单元的选择信号，该信号在读/写电路的配合下完成对被选中单元的读/写操作；读/写电路包括读出放大器和写入电路，用来完成读/写操作；存储芯片通过地址总线、数据总线和控制总线与外部连接。</p><p>主存各存储单元的空间位置是由单元地址号来表示的，地址总线用来指出存储单元地址号，根据该地址可读出或写入一个存储字。</p><p>地址线的位数、数据线的位数均与芯片容量有关。地址线和数据线的位数共同反映存储芯片的容量。如地址线为 10 根，数据线为 4 根，则芯片容量为 2<sup>10</sup>×4＝4K 位；又如地址线为 14 根，数据线为 1 根，则其容量为 2<sup>14</sup>×1＝16K 位。控制线主要有读/写控制线与片选线两种，读/写控制线决定芯片进行读/写操作，片选线用来选择存储芯片。如一个 64K×8 位的存储器可由 32 片 16K×1 位的存储芯片组成，每次读出一个存储字时，只需选中 8 片。</p><h3 id="4-2-3-DRAM的刷新"><a href="#4-2-3-DRAM的刷新" class="headerlink" title="4.2.3 DRAM的刷新"></a>4.2.3 DRAM的刷新</h3><p>动态随机存储器刷新的过程实质上是先将原存信息读出，再由刷新放大器形成原信息并重新写入的再生过程。</p><p>DRAM 是靠电容来存储信息的，由于存储单元被访问是随机的，有可能某些存储单元长期得不到访问，不进行存储器的读/写操作，其存储单元内的原信息将会慢慢消失。为此，必须采用定时刷新的方法，它规定在一定的时间内，对 DRAM 的全部基本单元电路必作一次刷新，一般取 2ms（2000μs），这个时间称为刷新周期。刷新是一行行进行的，必须在刷新周期内，由专用的刷新电路来完成对基本电路的逐行刷新，才能保证 DRAM 内的信息不会丢失。通常有三种方式刷新：<strong>集中刷新</strong>、<strong>分散刷新</strong>和<strong>异步刷新</strong>。</p><ol><li><p>集中刷新</p><p>集中刷新是在规定的一个刷新周期内，对全部存储单元集中一段时间逐行进行刷新，此刻必须停止读/写操作。如对 128×128 矩阵的存储芯片进行刷新，刷新的时间相当于128个读周期。若读/写周期为0.5μs，则对128行集中刷新共需128×0.5＝64μs，其余的 1936μs（=2000－64）用来读/写或维持信息。由于在这 64μs 时间内不能进行读写操作，故称为“死时间”。</p></li><li><p>分散刷新</p><p>分散刷新把对每行存储单元的刷新分散到每个存取周期内完成。其中，把机器的存取周期分成两段，前半段用来读/写或维持信息，后半段用来刷新。若读/写周期为0.5μs，则存取周期为 1μs，那么每隔 128μs 就可将 128 行的存储芯片全部刷新一遍，但这比允许的 2ms 间隔要短得多，且存取周期长了，整个系统的速度降低。</p></li><li><p>异步刷新</p><p>前两种方式的集合，既可缩短“死时间”，又充分利用最大刷新间隔为 2ms 的特点。如可在 2ms 内对 128 行各刷新一遍，即每隔 15.6μs（2000/128）刷新一行，每行的刷新时间仍为 0.5μs，但对每行来说，刷新间隔仍为 2ms，“死时间”缩短为 0.5μs。</p></li></ol><h3 id="4-2-4-存储器与-CPU-的连接"><a href="#4-2-4-存储器与-CPU-的连接" class="headerlink" title="4.2.4 存储器与 CPU 的连接"></a>4.2.4 存储器与 CPU 的连接</h3><ol><li><p>存储容量的扩展</p><p>由于单片存储芯片的容量总是有限的，很难满足实际的需要，因此，必须将若干存储芯片连在一起才能组成足够容量的存储器，称为存储容量的扩展，通常有<strong>位扩展</strong>和<strong>字扩展</strong>。</p><ol><li><p>位扩展</p><p>位扩展是指增加存储字长，只在位数方向扩展（加大字长）。位扩展的连接方式是将各存储芯片的地址线、片选线和读/写线相应地并联起来，而将各芯片的数据线单独列出。如用 64K×1 的 SRAM 芯片组成 64K×8 的存储器，需要 8 个芯片。</p><p><img src="/images/image-20210809220941362.png" alt="image-20210809220941362"></p></li><li><p>字扩展</p><p>字扩展是指增加存储器字的数量，它仅在字数方向扩展，而位数不变。字扩展将芯片的地址线、数据线、读/写线并联，由片选信号来区分各个芯片。如用 16K×8 的SRAM 组成 64K×8 的存储器，需要 4 个芯片。</p><p><img src="/images/image-20210809221101383.png" alt="image-20210809221101383"></p></li><li><p>字和位同时扩展</p><p>字和位同时扩展是指既增加存储字的数量，又增加存储字长。当构成一个容量较大的存储器时，往往需要在字数方向和位数方向上同时扩展，这将是前两种扩展的组合，实现起来也较为容易。如用 16K×4 的 SRAM 组成 64K×8 的存储器，需要 8 个芯片</p><p><img src="/images/image-20210809221227138.png" alt="image-20210809221227138"></p></li></ol></li><li><p>存储器与 CPU 的连接</p><p>存储芯片与 CPU 芯片相连时，特别要注意片与片之间的地址线、数据线和控制线的连接。</p><ol><li><p>地址线的连接</p><p>存储芯片的容量不同，其地址线数也不同，CPU 的地址线数往往比存储芯片的地址线数多。通常总是将 CPU 地址线的低位与存储芯片的地址线相连。CPU 地址线的高位或在存储芯片扩充时用，或做其他用途，如片选信号等。</p></li><li><p>数据线的连接</p><p>CPU 的数据线数与存储芯片的数据线数也不一定相等。此时，必须对存储芯片扩位，使其数据位数与 CPU 的数据线数相等。</p></li><li><p>读/写命令线的连接</p><p>CPU 读/写命令线一般可直接与存储芯片的读/写控制端相连，通常高电平为读，低电平为写。</p></li><li><p>片选线的连接</p><p>片选线的连接是 CPU 与存储芯片正确工作的关键。存储器由许多存储芯片组成，哪一片被选中完全取决于该存储芯片的片选控制端是否能接收到来自 CPU 的片选有效信号。</p></li><li><p>合理选择存储芯片</p><p>合理选择存储芯片主要是指存储芯片类型（RAM 或 ROM）和数量的选择。通常选用ROM存放系统程序、标准子程序和各类常数等。RAM则是为用户编程而设置的。此外，在考虑芯片数量时，要尽量使连线简单方便。</p></li></ol></li></ol><h2 id="4-3-高速缓冲存储器"><a href="#4-3-高速缓冲存储器" class="headerlink" title="4.3 高速缓冲存储器"></a>4.3 高速缓冲存储器</h2><h3 id="4-3-1-背景"><a href="#4-3-1-背景" class="headerlink" title="4.3.1 背景"></a>4.3.1 背景</h3><p>在多体并行存储系统中，由于 I/O 设备向主存请求的级别高于 CPU 访存，这就出现了 CPU 等待 I/O 设备访存的现象，降低了 CPU 的工作效率。为了避免 CPU 与 I/O设备争抢访存，在 CPU 和主存之间加一级缓存；另一角度看，Cache 的提出也缓解了主存和 CPU 之间速度不匹配的问题。</p><h3 id="4-3-2-工作原理"><a href="#4-3-2-工作原理" class="headerlink" title="4.3.2 工作原理"></a>4.3.2 工作原理</h3><p>CPU 欲读出主存的某个字时，有两种可能：一种是所需的字已在缓存中，即可直接访问 Cache（CPU 与 Cache 之间通常一次传送一个字），称为 CPU 访问 Cache 命中；另一种是所需的字不在 Cache 中，此时需将该字所在的主存整个字块一次调入 Cache中（Cache 与主存之间是字块传送），称为 CPU 访问 Cache 不命中。</p><p>Cache 的容量与块长是影响 Cache 效率的重要因素，通常用“命中率”来衡量 Cache的效率。命中率是指 CPU 要访问的信息已在 Cache 内的比率。在一个程序执行期间，设 <em>A</em> 为访问 Cache 的总命中次数，<em>B</em> 为访问主存的总次数，则命中率 <em>H</em> 为 </p><p><img src="/images/image-20210809222212904.png" alt="image-20210809222212904"></p><p>上面介绍的是读操作，而写操作则比较复杂，因为对 Cache 块内写入的信息，必须与被映射的主存块内的信息完全一致。当程序运行过程中需对某个单元进行写操作时，会出现如何使 Cache 与主存内容保持一致的问题。目前主要采用以下几种方法：</p><ol><li>写直达法，即写操作时数据既写入 Cache 又写入主存，能随时能保证主存和Cache 的数据始终一致，但增加了访存次数；</li><li>写回法，即写操作时只把数据写入 Cache 而不写入主存，但当 Cache 数据被替换出去时才写回主存，这样就会导致 Cache 中的数据会与主存中的不一致。为了识别Cache 中的数据是否与主存一致，Cache 中的每一块要增设一个标志位，该位有两个状态：“清”（表示未修改过，与主存一致）和“浊”（表示修改过，与主存不一致）。Cache 替换时，“清”的 Cache 块不必写回主存，因为此时主存中相应块的内容与 Cache块一致。在写 Cache 时，要将该标志位设置为“浊”，替换时此 Cache 块要写回主存，同时要使标志位为“清”。</li></ol><h3 id="4-3-3-改进"><a href="#4-3-3-改进" class="headerlink" title="4.3.3 改进"></a>4.3.3 改进</h3><ol><li><p>单一缓存和两级缓存</p><p>单一缓存是指在 CPU 和主存之间只设一个缓存。这个缓存直接与 CPU 制作在同一个芯片内，故又称为片内缓存。如果在主存与片内缓存之间再加一级缓存，称为片外缓存，由静态 RAM 组成。</p><p>由片外缓存和片内缓存组成的 Cache 称为两级缓存，并称片内缓存为第一级，片外缓存为第二级。</p></li><li><p>统一缓存和分立缓存</p><p>统一缓存是指指令和数据都存放在同一缓存内的 Cache；分立缓存是指指令和数据分别存放在两个缓存中，一个称为指令 Cache，一个称为数据 Cache。</p></li></ol><h3 id="4-3-4-地址映射"><a href="#4-3-4-地址映射" class="headerlink" title="4.3.4 地址映射"></a>4.3.4 地址映射</h3><p>由主存地址映射到 Cache 地址称为地址映射。地址映射方式有很多，有<strong>直接映射</strong>、<strong>全相联映射</strong>、<strong>组相联映射</strong>。</p><ol><li><p>直接映射</p><p>直接映射是一种固定的映射关系，每个主存块只与一个缓存块相对应，映射关系公式为：</p><p><img src="/images/image-20210809222730568.png" alt="image-20210809222730568"></p><p>其中，<em>i</em> 为缓存块号，<em>j</em> 为主存块号，<em>C</em> 为缓存块数或缓存地址位数。</p><p>如缓存有 0～3 号四块，主存有 0～15 号十六块，则直接映射方式主存块和缓存块的对应关系</p><p><img src="/images/image-20210809222846762.png" alt="image-20210809222846762"></p><p>这种方式的优点是实现简单，只需利用主存地址的某些位直接判断，即可确定所需字块是否在缓存中；缺点是不够灵活，因每个主存块只能固定地对应某个缓存块，即使缓存内还空着许多位置也不能利用。</p></li><li><p>全相联映射</p><p>全相联映射允许主存中每一字块映射到 Cache 中的任何一块位置上。优点是灵活，命中率也高，缩小了块冲突率；缺点就是所需的逻辑电路较多，成本较高。</p></li><li><p>组相联映射</p><p>组相联映射是对直接映射和全相联映射的一种折中。它把 Cache 分为 Q 组，每组有 R 块，则</p><p>​    i＝j mod Q</p><p>其中，i 为缓存的组号，j 为主存的块号。</p><p>组相联映射本质为分组采用的是直接映射的理念，而在每个分组内采用的是全相联映射的理念。</p></li></ol><h3 id="4-3-5-替换策略"><a href="#4-3-5-替换策略" class="headerlink" title="4.3.5 替换策略"></a>4.3.5 替换策略</h3><p>当新的主存块需要调入 Cache 并且它的可用空间位置又被占满时，需要替换掉Cache 的数据，这就产生了替换策略问题。常用的替换算法有先进先出（First In First Out，FIFO）算法，近期最少使用（Least Recently Used，LRU）算法，随机法。 </p><h1 id="5-中央处理器"><a href="#5-中央处理器" class="headerlink" title="5. 中央处理器"></a>5. 中央处理器</h1><h2 id="5-1-CPU-的组成和功能"><a href="#5-1-CPU-的组成和功能" class="headerlink" title="5.1 CPU 的组成和功能"></a>5.1 CPU 的组成和功能</h2><h3 id="5-1-1-CPU-的组成"><a href="#5-1-1-CPU-的组成" class="headerlink" title="5.1.1 CPU 的组成"></a>5.1.1 CPU 的组成</h3><p>计算机的工作过程就是程序的运行过程，程序一旦装入内存，就可以由计算机来自动完成取出指令和执行指令。专门用来完成此项工作的计算机部件称为中央处理器，简称 CPU（Central Processing Unit）。CPU 是整个计算机的核心，主要包括运算器和控制器。</p><p>运算器由算术逻辑单元（ALU）、累加寄存器、数据缓冲寄存器和状态标志寄存器组成，它是数据加工处理部件。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作都是由控制器发出的控制信号来指挥的，所以它是执行部件。运算器有两个主要功能：</p><ol><li>执行所有的算术运算</li><li>执行所有的逻辑运算，并进行逻辑测试，如两个值的比较</li></ol><p>通常，一个算术操作产生一个运算结果，而一个逻辑操作则产生一个判决。</p><p>控制器是计算机系统的指挥中心，由程序计数器、指令寄存器、指令译码器、时序产生器和操作控制器组成。控制器的主要功能有：</p><ol><li>从内存中取出指令，并指出下一条指令在内存中的位置</li><li>对指令进行译码或测试，并产生相应的操作控制信号，以启动规定的动作</li><li>指挥并控制 CPU、内存和输入/输出设备之间数据流动的方向</li></ol><h3 id="5-1-2-CPU-的功能"><a href="#5-1-2-CPU-的功能" class="headerlink" title="5.1.2 CPU 的功能"></a>5.1.2 CPU 的功能</h3><p>CPU 的主要功能有：</p><ol><li><p>指令控制</p><p>程序的顺序控制，称为指令控制。由于程序是一个指令序列，这些指令的相互顺序不能任意颠倒，必须严格按程序规定的顺序进行，因此，保证机器按顺序执行程序是 CPU 的首要任务。</p></li><li><p>操作控制</p><p>一条指令的功能往往是由若干个操作信号的组合来实现的，因此，CPU 管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。</p></li><li><p>时间控制</p><p>对各种操作实施时间上的控制，称为时间控制。因为在计算机中，各种指令的操作信号均受到时间的严格控制。另一方面，一条指令的整个执行过程也受到时间的严格控制。只有这佯，计算机才能有条不紊地自动工作。</p></li><li><p>数据加工</p><p>数据加工就是对数据进行算术运算和逻辑运算处理。完成数据的加工处理，这是CPU 的根本任务。</p></li></ol><h3 id="5-1-3-CPU-的主要寄存器"><a href="#5-1-3-CPU-的主要寄存器" class="headerlink" title="5.1.3 CPU 的主要寄存器"></a>5.1.3 CPU 的主要寄存器</h3><p>CPU 中的主要寄存器是用来暂时保存在运算和控制过程中的中间结果、最终结果以及控制、状态信息的，在 CPU 中有两类寄存器：一类是通用寄存器，另一类是专用寄存器。</p><ol><li><p>通用寄存器</p><p>通用寄存器可用来存放原始数据和运算结果，有的还可以作为变址寄存器、基址寄存器、栈指针等。通用寄存器都属于用户可见的寄存器，即可以通过机器语言或汇编语言访问的寄存器。</p></li><li><p>专用寄存器</p><p>专用寄存器是 CPU 专门用来完成某一种特殊功能的寄存器。这其中有一部分属于用户可见的寄存器，而另一部分在 CPU 中起操作控制作用的寄存器在大部分机器上对用户是透明的。</p><ol><li><p>指令寄存器（IR）</p><p>指令寄存器用来存放从存储器中取出的指令。当指令从主存取出暂存于指令寄存器之后，在执行指令的过程中，指令寄存器的内容不允许发生变化，以保证实现指令的全部功能。</p></li><li><p>程序计数器（PC）</p><p>程序计数器用来存放现行指令的地址或接着要执行的下条指令地址。</p><p>对于顺序执行的情况，PC 的内容修改通常是对 PC 值加 1。当遇到转移指令时，PC 的内容（即后续指令的地址）必须从指令寄存器中的地址字段取得。</p></li><li><p>存储器数据寄存器（MDR）</p><p>存储器数据寄存器用来暂时存放由主存储器读出的一条指令或一个数据字；反之，当向主存存入一条指令或一个数据字时，也暂时将它们存放在存储器数据寄存器中。</p></li><li><p>存储器地址寄存器（MAR）</p><p>存储器地址寄存器用来保存当前 CPU 所访问的存储单元的地址。由于主存和 CPU之间存在着操作速度上的差别，所以必须使用地址寄存器来保持地址信息，直到主存的读/写操作完成为止。</p></li><li><p>状态标志寄存器（PSWR）</p><p>状态标志寄存器保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容，如进位标志，结果为零标志等。除此之外，状态标志寄存器还保存中断和系统工作状态等信息，以便使 CPU 和系统能及时了解机器运行状态和程序运行状态。</p></li></ol></li></ol><h2 id="5-2-指令周期和指令流水"><a href="#5-2-指令周期和指令流水" class="headerlink" title="5.2 指令周期和指令流水"></a>5.2 指令周期和指令流水</h2><h3 id="5-2-1-指令周期"><a href="#5-2-1-指令周期" class="headerlink" title="5.2.1 指令周期"></a>5.2.1 指令周期</h3><p>CPU 每取出并执行一条指令所需的全部时间称为指令周期，也即 CPU 完成一条指令的时间。其中，取指阶段完成取指令和分析指令的操作，又称<strong>取指周期</strong>；执行阶段完成执行指令的操作，又称<strong>执行周期</strong>。</p><p>在大多数情况下，CPU 就是按“取指-执行-再取指-再执行……”的顺序自动工作的。由于各种指令的操作功能不同，因此各种指令的指令周期也不尽相同。</p><p>当遇到间接寻址的指令时，由于指令字中只给出操作数有效地址的地址，因此，为了取出操作数，需先访问一次存储器，取出有效地址，然后再访问存储器，取出操作数。故<strong>间接寻址的指令周期就包括取指周期、间址周期和执行周期 3 个阶段</strong>，其中间址周期用于取操作数的有效地址。</p><p>当 CPU 采用中断方式实现主机与 I/O 设备交换信息时，CPU 在每条指令执行阶段结束前，都要发中断查询信号，以检测是否有某个 I/O 设备提出中断请求。如果有请求，CPU 则要进入中断响应阶段，又称中断周期。在中断周期，由中断隐指令自动完成保护断点、寻找中断服务程序入口地址以及硬件关中断的操作。此时，一个完整的指令周期应包括取指、间址、执行和中断 4 个子周期。</p><h3 id="5-2-2-指令流水"><a href="#5-2-2-指令流水" class="headerlink" title="5.2.2 指令流水"></a>5.2.2 指令流水</h3><ol><li><p>原理</p><p>计算机的流水处理过程同工厂中的流水装配线类似，为了实现流水，首先必须把输入的任务（或过程）分割为一系列子任务，使各子任务能在流水线的各个阶段并发地执行，将任务连续不断地输入流水线，从而实观了子任务级的并行。因此流水处理大幅度地改善了计算机的系统性能，是在计算机上实现时间并行性的一种非常经济的方法。</p><p>计算机执行程序是按顺序的方式进行的，即程序中各条机器指令是按顺序串行执行的。如按 4 个周期完成一条指令来考虑，串行执行的过程如下。</p><p><img src="/images/image-20210809230215002.png" alt="image-20210809230215002"></p><p>如将一条指令分成 4 段，若每段所需时间为 T，那么一条指令的时间为 4T，但当第一条指令处理完后每隔 T 时间就能得到一条指令的处理结果，平均速度提高到 4 倍，把这种处理机称为流水线处理机，其工作过程如下。</p><p><img src="/images/image-20210809230305756.png" alt="image-20210809230305756"></p></li><li><p>影响流水性能的因素</p><p>流水过程中会出现三种相关，使得不断流实现起来很困难，这三种相关是：资源相关（结构相关）、数据相关和控制相关。</p><ol><li><p>资源相关</p><p>资源相关是指多条指令进入流水线后在同一机器时钟周期内争用同一个功能部件所发生的冲突，也称结构相关。解决冲突的方法可以让流水线在完成前一条指令对数据的存储器访问时，暂停取后一条指令的操作，另一种方式是采用将指令和数据分别存在两个存储器中来减少冲突。</p></li><li><p>数据相关</p><p>数据相关是在一个程序中，如果必须等前一条指令执行完毕后，才能执行后一条指令，那么这两条指令就是数据相关的。其解决办法主要有两个：</p><ul><li>采用后推法，即将相关指令延迟到所需操作数被写回到寄存器后再执行</li><li>采用定向技术，即直接将执行结果送到其他指令需要的地方，而不必等某条指令的执行结果送回寄存器，再从寄存器取出该结果来作为下条指令的操作数</li></ul></li><li><p>控制相关</p><p>控制相关冲突是由转移指令引起的。当执行转移指令时，依据转移条件的产生结果，可能是顺序取下条指令，也可能转移到新的目标地址取指令，从而使流水线发生断流。解决办法可以采用转移猜测法等来减少转移指令对流水线性能的影响。</p></li></ol></li><li><p>流水线的性能</p><p>流水线的性能通常用三个指标来衡量：吞吐率、加速比和效率。</p><ol><li><p>吞吐率</p><p>吞吐率是指单位时间内流水线所完成指令或输出结果的数量。吞吐率有最大吞吐率和实际吞吐率之分。</p><p><img src="/images/image-20210809230757059.png" alt="image-20210809230757059"></p></li><li><p>加速比</p><p><img src="/images/image-20210809230823598.png" alt="image-20210809230823598"></p></li><li><p>效率</p><p>效率是指流水线中各功能段的利用率，通常用流水线各段处于工作时间的时空区与流水线中各段总的时空区之比来衡量流水线的效率。由图易知效率的计算公式为：</p><p><img src="/images/image-20210809230921890.png" alt="image-20210809230921890"></p></li><li><p>流水线中的多发技术</p><p>为了在一个时钟周期内，产生更多条指令的结果，可开发流水线中的多发技术，包括超标量技术、超流水线技术、超长指令字技术</p><p><img src="/images/image-20210809231055866.png" alt="image-20210809231055866"></p><ol><li><p>超标量技术</p><p>超标量技术指在每个时钟周期内可同时并发多条独立指令，即以并行操作方式将两条或两条以上指令编译并执行。</p></li><li><p>超流水线技术</p><p>超流水线技术是将一些流水线寄存器插入到流水线段中，相当于将流水线再分段，如将原来的一个时钟周期又分为 3 段，使超流水线的处理器周期比普通流水线的处理器周期短。</p></li><li><p>超长指令字（VLIW）技术</p><p>由编译程序在编译时挖掘出指令间潜在的并行性后，把多条能并行操作的指令组合成一条具有多个操作码字段的超长指令，由这条超长指令控制 VLIW 机中多个独立工作的功能部件，由每一个操作码字段控制一个功能部件，相当于同时执行多条指令。</p></li></ol></li></ol></li></ol><h2 id="5-3-时序系统和控制方式"><a href="#5-3-时序系统和控制方式" class="headerlink" title="5.3 时序系统和控制方式"></a>5.3 时序系统和控制方式</h2><h3 id="5-3-1-时序系统"><a href="#5-3-1-时序系统" class="headerlink" title="5.3.1 时序系统"></a>5.3.1 时序系统</h3><ol><li><p>机器周期 (我的理解是他是一个和指令挂钩的周期)</p><p><strong>指令周期常常用若干个 CPU 周期数来表示，CPU 周期也称为机器周期。</strong>机器周期可看做是所有指令执行过程中的—个基准时间，机器周期取决于指令的功能及器件的速度。由于 CPU 内部的操作速度较快，而 CPU 访问一次内存所花的时间较长，因此通常用内存中读取一个指令字的最短时间来规定 CPU 周期。在存储字长等于指令字长的前提下，取指周期也可看做机器周期，即一条指令的取出阶段需要一个 CPU 周期时间。</p></li><li><p>时钟周期（节拍）</p><p><strong>一个机器周期又包含有若干个时钟周期（通常称为节拍或 T 周期）</strong>。</p><p>在一个机器周期里可完成若干个微操作，每个微操作都需要一定的时间，可用时钟信号来控制产生每一个微操作命令。用时钟信号控制节拍发生器，就可产生节拍。每个节拍的宽度正好对应一个时钟周期。在每个节拍内机器可完成一个或几个需同时执行的操作，它是控制计算机操作的最小时间单位。</p><p>一个指令周期包含若干个机器周期，一个机器周期又包含若干个时钟周期（节拍），每个指令周期内的机器周期数可以不等，每个机器周期内的节拍数也可以不等。</p><p>机器周期、节拍组成了多级时序系统。</p></li></ol><h3 id="5-3-2-控制方式"><a href="#5-3-2-控制方式" class="headerlink" title="5.3.2 控制方式"></a>5.3.2 控制方式</h3><p>控制单元（CU）是提供完成计算机全部指令操作的微操作命令序列部件。现代计算机中微操作命令序列的形成方法主要有两种：一种是组合逻辑设计方法，为硬连线逻辑；另一种是微程序设计方法，为存储逻辑。</p><p>通常将如何形成控制不同微操作序列所采用的时序控制方式称为 CU 的控制方式。常见的控制方式有<strong>同步控制</strong>、<strong>异步控制</strong>、<strong>联合控制</strong>和<strong>人工控制</strong>四种。</p><ol><li><p>同步控制方式</p><p>同步控制方式是指，任何一条指令或指令中任何一个微操作的执行都是事先确定的，并且都是受统一基准时标的时序信号所控制的方式。由于不同的指令，操作时间长短不一致，同步控制方式应以最复杂指令的操作时间作为统一的时间间隔标准。</p><p>这种控制方式设计简单，容易实现，但是对于许多简单指令来说会有较多的空闲时间，造成较大数量的时间浪费，从而影响了指令的执行速度。在同步控制方式中，各指令所需的时序由控制器统一发出，所有微操作都与时钟同步，所以又称为集中控制方式或中央控制方式。</p></li><li><p>异步控制方式</p><p>异步控制方式中，各项操作不采用统一的时序信号控制，而根据指令或部件的具体情况决定，需要多少时间，就占用多少时间。</p><p>异步控制采用不同时序，没有时间上的浪费，因而提高了机器的效率，但是控制比较复杂。由于这种控制方式没有统一的时钟，而是由各功能部件本身产生各自的时序信号自我控制，故又称为分散控制方式或局部控制方式。</p></li><li><p>联合控制方式</p><p>这是同步控制和异步控制相结合的方式。实际上现代计算机中几乎没有完全采用同步或完全采用异步的控制方式，大多数是采用联合控制方式。通常的设计思想是：在功能部件内部采用同步方式或以同步方式为主的控制方式，在功能部件之间采用异步方式。</p></li><li><p>人工控制方式</p><p>人工控制是为了调机和软件开发的需要，在机器面板或内部设置一些开关或按键，如 Reset 键、连续或单条执行转换开关及符合停机开关，来达到人工控制的目的。</p></li></ol><h2 id="5-4-微程序设计"><a href="#5-4-微程序设计" class="headerlink" title="5.4 微程序设计"></a>5.4 微程序设计</h2><p>微程序设计技术的实质是将程序设计技术和存储技术相结合，即用程序设计的思想方法来组织操作控制逻辑，将操作控制信号按一定规则进行信息编码，形成微指令，存放在一个只读存储器中。当机器运行时，一条又一条地读出这些微指令，从而产生全机所需要的各种操作控制信号，使相应部件执行所规定的操作。</p><h3 id="5-4-1-基本概念"><a href="#5-4-1-基本概念" class="headerlink" title="5.4.1 基本概念"></a>5.4.1 基本概念</h3><p>一条机器指令对应于一段微程序，微程序是一系列微指令的有序集合。微程序和程序是两个不同的概念。程序由机器指令组成，它是由软件设计人员事先编制好并存放在主存或辅存中的。而微程序是由微指令组成，它实际上是机器指令的实时解释器，由计算机的设计者事先编制好并存放在控制存储器中的。对于程序员来说，计算机系统中微程序的结构和功能是透明的。</p><p>一条微指令由一组实现一定操作功能的微命令构成。微命令是控制计算机各部件完成某个基本微操作的命令。这些微操作是计算机中最基本的、不可再分解的操作。微命令和微操作是一一对应的。微操作可分为相容性和相斥性两种，所谓相容性的微操作，是指在同时或同一个 CPU 周期内可以并行执行的微操作，所谓相斥性的微操作，是指不能在同时或不能在同一个 CPU 周期内并行执行的微操作。</p><p>一条微指令通常包含两部分信息：</p><ol><li>操作控制字段，又称微操作码字段，用以产生某一步操作所需的各微操作控制信号</li><li>顺序控制字段，又称微地址码字段，用以控制产生下一条要执行的微指令地址</li></ol><p>微程序控制的计算机涉及到两个层次：一个是机器语言或汇编语言程序员所看到的传统机器层，包括：机器指令、程序、主存储器；另一个是机器设计者看到的微程序层，包括：微指令、微程序和控制存储器。</p><h3 id="5-4-2-微指令编码"><a href="#5-4-2-微指令编码" class="headerlink" title="5.4.2 微指令编码"></a>5.4.2 微指令编码</h3><p>微指令编码法指的是微指令中的操作控制字段的编码方法。通常有以下三种方法：</p><ol><li><p>直接编码法（直接控制法）</p><p>操作控制字段中的各位分别可以直接控制计算机，不需要进行译码。操作控制字段的每一个独立的二进制位代表一个微命令，该位为“1”表示这个微命令有效，为“0”表示这个微命令无效。</p><p>这种方法结构简单，并行性强，操作速度快，但是微指令字太长，若微命令的总数为 N 个，则微指令字的操作控制字段就要有 N 位。</p></li><li><p>字段编码法</p><p>字段编码法可进一步分为字段直接编码法和字段间接编码法。</p><ol><li><p>字段直接编码法</p><p>字段直接编码法将一组相斥性的微命令信号组成一个字段，然后通过译码器对每一个字段译码，便可对应一个微命令。各字段都可以独立地定义本字段的微命令，而和其他字段无关，这种方式靠字段直接译码发出微命令，因此又称为显式编码。这种方法缩短了微指令字，目前应用较为普遍。</p></li><li><p>字段间接编码法</p><p>字段间接编码法是在字段直接编码法的基础上，用来进一步缩短微指令字长的方法。间接编码的含义是，一个字段的某些编码不能独立地定义某些微命令，而需要与其他字段的编码来联合定义，因此又称为隐式编码。</p><p>这种方法虽然可以进一步缩短微指令字长，但因削弱了微指令的并行控制能力，因此通常用做字段直接编码法的一种辅助手段。</p><p>字段编码法中操作控制字段的分段原则：</p><ul><li>把互斥性的微命令分在同一段内，兼容性的微命令分在不同段内。这样不仅有助于提高信息的利用率，缩短微指令字长，而且有助于充分利用硬件所具有的并行性，加快执行的速度。</li><li>一般每个小段还要留出一个状态，表示本字段不发出任何微命令。因此当某字段的长度为三位时，最多只能表示七个互斥的微命令，通常用 000 表示不操作。</li></ul></li></ol></li><li><p>最短编译法</p><p>最短编译法的基本思想是：每一条 L 位字长的微指令只定义一个微命令。如若 L取值为 6，就有 64 种编码状态，则可定义的微指令最多有 64 条。</p><p>按最短编译法编码的微指令比较简单，且微指令字长较短，微指令字中各位都能得到充分利用，然而，由于每条微指令只能对应一个微命令，因此并行控制能力差，微程序长度较长，执行速度慢。</p><p>假设某计算机共有 256 个微命令，如果采用直接控制法，微指令的操作控制字段就要有 256 位；而如果采用最短编译法，操作控制字段只需要 8 位就可以了；如果采用字段直接编码法，若 4 位为一个段，共需 18 段，操作控制字段只需 72 位，而且在同一时刻可以并行发出 18 个不同的微命令。</p></li></ol><h3 id="5-4-3-微指令格式"><a href="#5-4-3-微指令格式" class="headerlink" title="5.4.3 微指令格式"></a>5.4.3 微指令格式</h3><p>微指令有垂直型和水平型之分，水平型微指令则具有良好的并行性，每条微指令可以完成较多的基本操作。垂直型微指令接近于机器指令的格式，每条微指令只能完成一个基本操作。</p><ol><li><p>水平型微指令</p><p>水平型微指令是指一次能定义并能并行执行多个微命令的微指令。它的并行操作能力强，效率高，灵活性强，执行一条机器指令所需微指令的数目少，执行时间短；但微指令字较长，同时微指令和机器指令的差别很大，一般用户不易掌握。按直接编码法、字段直接编码法、字段间接编码法编码的微指令都属于水平型微指令。</p></li><li><p>垂直型微指令</p><p>垂直型微指令的结构类似于机器指令的结构，它有操作码，功能简单，并行操作能力差，但由于微指令与机器指令很相似，所以容易掌握和利用，编程比较简单，且微指令字较短。按最短编译法编码的微指令属于垂直型微指令。</p></li></ol><h3 id="5-4-4-微地址的形成"><a href="#5-4-4-微地址的形成" class="headerlink" title="5.4.4 微地址的形成"></a>5.4.4 微地址的形成</h3><p>微程序是由微指令组成的，执行当前一条微指令时，必须指出后继微指令的地址，以便当前一条微指令执行完毕后，取出下一条微指令。决定后继微指令地址的方法不只一种，主要有两大基本类型：增量方式和断定方式。</p><p><img src="/images/image-20210809232905351.png" alt="image-20210809232905351"></p><h1 id="6-外部设备和系统"><a href="#6-外部设备和系统" class="headerlink" title="6. 外部设备和系统"></a>6. 外部设备和系统</h1><h2 id="6-1-外存储器"><a href="#6-1-外存储器" class="headerlink" title="6.1 外存储器"></a>6.1 外存储器</h2><p>CPU 和主存构成了主机，除主机外的大部分硬件设备都可称为外部设备，简称外设。计算机的外部设备主要包括外存储器、输入设备、输出设备。</p><p><img src="/images/image-20210809233054201.png" alt="image-20210809233054201"></p><p><strong>外存储器简称外存或辅存，它与主存一起组成了存储器系统的主存-辅存层次。</strong>与主存相比，辅存具有容量大、速度慢、价格低、可脱机保存信息等特点，属“非易失性”存储器。常见的外存储器有软盘、硬盘、磁带、光盘等。前三种均属磁表面存储器。</p><h3 id="6-1-1-磁表面存储器的主要技术指标"><a href="#6-1-1-磁表面存储器的主要技术指标" class="headerlink" title="6.1.1 磁表面存储器的主要技术指标"></a>6.1.1 磁表面存储器的主要技术指标</h3><ol><li><p>记录密度</p><p>记录密度是指单位长度内所存储的二进制信息量。磁盘存储器用道密度和位密度表示；磁带存储器则用位密度表示。</p><p>道密度是磁盘沿半径方向单位长度的磁道数，单位是 tpi（道/英寸）或 tpm(道/毫 米)。相邻两条磁道中心线之间的距离称为道距，道密度等于道距的倒数。</p><p>位密度是单位长度磁道能记录二进制信息的位数，也称为线密度，单位是 bpi（位/英寸）或 bpm（位/毫米）。</p><p>在磁盘各磁道上所记录的信息量是相同的，而位密度不同。一般泛指磁盘位密度时，是指最内圈磁道上的位密度（最大位密度）。</p></li><li><p>存储容量</p><p>存储容量是指外存所能存储的二进制信息总数量，一般以位或字节为单位。</p></li><li><p>平均寻址时间</p><p>磁盘的寻道时间是指磁盘的磁头移动到指定磁道所需的时间；磁盘的等待时间是指磁头已处于要访问的磁道，等待所要访问的扇区旋转至磁头下方的时间。因磁盘每次的寻道时间和等待时间并不相同，故取这些时间的平均值并求和，得到磁盘的平均寻址时间，即：平均寻址时间=平均寻道时间+平均等待时间。</p><p>平均寻址时间是磁盘存储器的一个重要指标。硬盘的平均寻址时间比软盘的平均寻址时间短，故硬盘比软盘的速度快。</p></li><li><p>数据传输率</p><p>数据传输率是指单位时间内磁表面存储器向主机传送数据的位数或字节数。</p></li><li><p>误码率</p><p>误码率是衡量磁表面存储器出错概率的参数，它等于从外存读出时，出错信息位数和读出信息的总位数之比。为减少出错率，磁表面存储器通常采用循环冗余码（CRC）来发现并纠正错误。</p></li></ol><h3 id="6-1-2-磁表面存储器的记录方式"><a href="#6-1-2-磁表面存储器的记录方式" class="headerlink" title="6.1.2 磁表面存储器的记录方式"></a>6.1.2 磁表面存储器的记录方式</h3><ol><li><p>记录方式</p><p>磁记录方式又称为编码方式，它是按某种规律将一串二进制数字信息变换成磁表面相应的磁化状态。常用的记录方式有六种</p><p><img src="/images/image-20210809233535396.png" alt="image-20210809233535396"></p><ol><li>归零制（RZ）</li></ol><p>归零制记录“1”时，通以正向脉冲电流，记录“0”时，通以反向脉冲电流。由于两位信息之间驱动电流归零，故称为归零制记录方式。</p><ol start="2"><li>不归零制（NRZ）</li></ol><p>不归零制记录信息时，磁头线圈始终有驱动电流，不是正向，便是反向，不存在无电流状态。当连续记“1”或“0”时，其写电流方向不变，只有当相邻两信息代码不同时，写电流才改变方向，故称为“见变就翻”的不归零制。</p><ol start="3"><li>“见1就翻”的不归零制（NRZ1）</li></ol><p>“见 1 就翻”的不归零制在记录信息时，磁头线圈也始终有电流。但只有在记录“1”时电流改变方向，使磁层磁化方向发生翻转；记录“0”时，电流方向保持不变，使磁层的磁化方向也维持原来状态，因此称为“见 1 就翻”的不归零制。</p><ol start="4"><li>调相制（PM）</li></ol><p>调相制又称为相位编码（PE），其记录规则是：记录“1”时，写电流由负变正；记录“0”时，写电流由正变负，电流变化出现在一位信息记录时间的中间时刻，它以相位差为 180 度的磁化翻转方向来表示“1”和“0”。调相制在磁带存储器中用得较多。</p><ol start="5"><li>调频制（FM）</li></ol><p>调频制的记录规则是：以驱动电流变化的频率不同来区别记录“1”还是“0”。当记录“0”时，在一位信息的记录时间内电流保持不变；当记录“1”时，在一位信息记录时间的中间时刻，使电流改变一次方向。而且无论记录“0”还是“1”，在相邻信息的交界处，线圈电流均变化一次。因此写“1”时，在位单元的起始和中间位置都有磁通翻转；在写“0”时，仅在位单元起始位置有翻转。则记录“1”的磁翻转频率为记录“0”的两倍，故又称为倍频制。调频制记录方式被广泛应用在硬盘和软盘中。</p><ol start="6"><li>改进型调频制（MFM）</li></ol><p>这种记录方式基本上同调频制，即记录“0”时，在位记录时间内电流不变；记录“l”时，在位记录时间的中间时刻电流发生一次变化。两者不同之处在于，改进型调频制只有当连续记录两个或两个以上的“0”时，才在每位的起始处改变一次电流，不必在每个位起始处都改变电流方向。由于这一特点，在写入同样数据序列时，MFM比 FM 磁翻转次数少，在相同长度的磁层上可记录的信息量将会增加，从而提高了磁记录密度。FM 制记录一位二进制代码最多是两次磁翻转，MFM 制最多只要一次翻转，记录密度提高了一倍，故又称为倍密度记录方式。</p></li><li><p>评价指标</p><p>评价一种记录方式的优劣标准主要反映在编码效率和自同步能力等方面。</p><ol><li>编码效率</li></ol><p>编码效率是指位密度与磁化翻转密度的比值，可用记录一位信息的最大磁化翻转次数来表示。例如，FM、PM 记录方式中，记录一位信息最大磁化翻转次数为 2，因此编码效率为 50%；而 MFM、NRZ、NRZ1 三种记录方式的编码效率为 100%，因为它们记录一位信息磁化翻转最多一次。</p><ol start="2"><li>自同步能力</li></ol><p>自同步能力是指从单个磁道读出的脉冲序列中所提取同步时钟脉冲的难易程度。磁表面存储器为了进行读写操作，必须有时间基准信号，称为同步信号。</p><p>同步信号可以从专门设置用来记录同步信号的磁道中取得，这种方法称为外同步，如 NRZ1 制，但它占用了磁表面存储器的有效记录面积。</p><p>对于高密度的记录系统，可直接从磁盘读出的信号中提取同步信号，这种方法称为自同步。</p><p>自同步能力可用最小磁化翻转间隔和最大磁化翻转间隔之比值 R 来衡量。如 FM记录方式的最大磁化翻转间隔是 T（T 为一位信息的记录时间），最小磁化翻转间隔是 T/2，所以 R=0.5。R 越大，自同步能力也越强。</p><p>NRZ 和 NRZ1 方式在连续记录“0”时，磁层都不发生磁化磁转，且 NRZ 方式在连续记录“1”时，磁层也不发生磁化翻转，因此，NRZ 和 NRZ1 都没有自同步能力。而 PM、FM、MFM 记录方式均有自同步能力。</p></li></ol><h3 id="6-1-3-常见的外存储器"><a href="#6-1-3-常见的外存储器" class="headerlink" title="6.1.3 常见的外存储器"></a>6.1.3 常见的外存储器</h3><ol><li><p>软盘</p><p>软盘是个人计算机中最早使用的可移介质，常用的有 3.5 英寸和 2.5 英寸的软盘，容量在 1MB 以上。软盘存取速度慢，容量也小，携带方便，20 世纪八九十年代曾作为外存的主要部件。</p></li><li><p>硬盘</p><p>硬盘是计算机系统中最主要的外存设备。硬盘的存储介质材料是一种由铝合金材料制成的圆盘，盘的表面涂有一层可被磁化的硬磁特性材料。目前应用最广泛的是温彻斯特磁盘，它是一种可移动磁头固定盘片的磁盘存储器，简称温盘。</p><p>硬盘主要由磁盘、磁头及控制电路组成，信息存储在磁盘上，磁头负责读出或写入。当硬盘接到一个系统读取数据指令后磁头根据给出的地址，首先按磁道号产生驱动信号进行定位，然后再通过盘片的转动找到具体的扇区，最后由磁头读取指定位置的信息并传送到硬盘缓存中。</p></li><li><p>光盘</p><p>光盘是利用光存储技术进行读/写信息的存储设备，主要由光盘、光盘驱动器和光盘控制器组成。主要有 CD 和 DVD 两大类。</p></li><li><p>移动存储设备</p><p>U 盘是一种采用闪存为存储介质，通过 USB 接口与计算机交换数据的可移动存储设备，具有可多次擦写、体积小、即插即用等特点。</p><p>移动硬盘以硬盘为存储介质，通过 USB 接口与计算机相连，且普遍采用了热插拔技术，具有高速、大容量、即插即用、轻巧便捷的特点。</p></li></ol><h2 id="6-2-输入输出设备"><a href="#6-2-输入输出设备" class="headerlink" title="6.2 输入输出设备"></a>6.2 输入输出设备</h2><h3 id="6-2-1-输入设备"><a href="#6-2-1-输入设备" class="headerlink" title="6.2.1 输入设备"></a>6.2.1 输入设备</h3><p>输入设备是计算机的外部设备之一，是向计算机输送数据的设备。其功能是将计算机的程序、文本、图形、图像、声音以及现场采集的各种数据转换为计算机能处理的数据形式并输送到计算机内部。常见的输入设备有键盘、鼠标、手写笔、扫描仪等。</p><ol><li><p>鼠标</p><p>鼠标是一种输入设备，分有线和无线两种，也是计算机显示系统纵横坐标定位的指示器，因形似老鼠而得名“鼠标”。鼠标的使用是为了使计算机的操作更加简便快捷，来代替键盘繁琐的指令。</p></li><li><p>键盘</p><p>键盘是用于操作设备运行的一种指令和数据输入装置，是应用最普遍的输入设备。</p></li></ol><h3 id="6-2-2-输出设备"><a href="#6-2-2-输出设备" class="headerlink" title="6.2.2 输出设备"></a>6.2.2 输出设备</h3><p>输出设备的功能是将计算机中的数据信息传送到外部媒介，并转化成某种人们所认识的表示形式。最常用的输出设备有显示器和打印机。</p><ol><li><p>显示器</p><p>显示器通常也被称为监视器，它是一种将一定的电子文件通过特定的传输设备显示到屏幕的显示工具，它是目前计算机系统中应用最广泛的人-机界面设备。</p><p>按显示设备所用的显示器分类，有阴极射线管（CRT）显示器、等离子显示器（PDP）、液晶显示器（LCD）、发光二极管显示器（LED）等。</p><p>显示器的主要性能指标有：</p><p>1）分辨率</p><ul><li>分辨率是指显示器屏幕能表示的像素点数，分辨率越高，图像越清晰</li></ul><p>2）灰度级</p><ul><li>灰度级是指显示像素点相对亮暗的级差，在彩色显示器中它还表现为色彩的差别</li></ul><p>3）刷新频率</p><ul><li>刷新频率指的是每分钟内屏幕画面更新的次数。刷新频率过低，可出现屏幕画面闪烁或抖动的情况。</li></ul><p>4）点距</p><ul><li>点距是指显示器屏幕上相邻像素点之间的距离。点距越小，图像越清晰</li></ul><p>5）屏幕尺寸</p><ul><li>屏幕尺寸是指矩形屏幕对角线的长度</li></ul></li><li><p>打印机</p><p>打印机是计算机的输出设备之一，用于将计算机处理结果打印在相关介质上，是一种硬拷贝设备。</p><p>打印机有多种划分方法。按印字原理划分，有击打式打印机和非击打式打印机。击打式打印机是利用机械动作使印字机构与色带和纸相撞击而打印字符。它又分为活字打印机和点阵针式打印机两种。活字打印机现在用得越来越少。点阵针式打印机利用钢针打击色带产生打印效果，打印成本低，目前仍用得较普遍。非击打式打印机采用电、磁、光、喷墨等物理和化学方法来印刷字符，主要有激光打印机、喷墨打印机等。</p><p>按数据传输方式划分，有串行打印机和并行打印机两种，前者是逐字打印，后者是逐行打印。</p><p>打印机常见的参数指标主要有以下几个：</p><p>1）打印速度</p><ul><li>打印速度一般用 PPM 表示，指打印机每分钟可打印的页数</li></ul><p>2）打印分辨率</p><ul><li>打印分辨率指打印输出时，在横向和纵向上每英寸最多能够打印的点数，一般用DPI（点/英寸）表示</li></ul><p>3）最大打印尺寸</p><ul><li>最大打印尺寸指打印机所能打印的最大纸张尺寸，一般主要有A4和A3两种规格</li></ul></li></ol><h2 id="6-3-I-O系统概述"><a href="#6-3-I-O系统概述" class="headerlink" title="6.3 I/O系统概述"></a>6.3 I/O系统概述</h2><p>在计算机的硬件系统中，输入输出系统是除了 CPU 和存储器二者之外的第三个关键部分。</p><h3 id="6-3-1-主机与-I-O-设备的联系"><a href="#6-3-1-主机与-I-O-设备的联系" class="headerlink" title="6.3.1 主机与 I/O 设备的联系"></a>6.3.1 主机与 I/O 设备的联系</h3><ol><li><p>I/O 指令</p><p>I/O 指令是机器指令的一类，其一般格式主要由三部分组成：操作码、命令码和设备码。操作码可作为 I/O 指令与其他指令（如访存指令、控制指令等）的判别代码；命令码体现 I/O 设备的具体操作；设备码是 I/O 设备的选择码。</p></li><li><p>编址方式</p><p>将 I/O 设备码看做地址码，对 I/O 地址码的编址可采用两种方式：统一编址或不统一编址。统一编址就是将 I/O 地址看做是存储器地址的一部分；不统一编址（或称独立编址）指 I/O 地址和存储器地址是分开的，所有对 I/O 设备的访问必须有专用的I/O 指令。统一编址占用存储空间，减少了主存容量，但无须专用的 I/O 指令；不统一编址不占用主存空间，不影响主存容量，但需设 I/O 专用指令。</p></li><li><p>传送方式</p><p>n 位信息同时在 CPU 和 I/O 设备之间进行传输，这种传送方式称为并行传送。其特点是传送速度较快，要求数据线多，如 32 位信息并行传送需要 32 根数据线。</p><p>若连续逐位传送信息，这种传送方式称为串行传送。当远距离数据通信时，采用串行传送较为合理。</p></li></ol><h3 id="6-3-2-I-O-接口"><a href="#6-3-2-I-O-接口" class="headerlink" title="6.3.2 I/O 接口"></a>6.3.2 I/O 接口</h3><p>主机和外设具有不同的工作特点，它们在信息形式和工作速度上存在很大的差异，要将各种各样的外部设备与计算机连接起来，解决它们之间的差异，使之能协调地工作，就要通过各种接口来连接。I/O 接口是指主机与 I/O 设备之间设置的硬件电路及其相应的软件控制。</p><p>接口（Interface）与端口（Port）是两个不同的概念。端口是指接口电路中的一些寄存器，这些寄存器分别存放数据信息、控制信息和状态信息，相应的称为数据端口、控制端口和状态端口。若干个端口加上相应的控制逻辑电路才组成接口。</p><ol><li><p>接口功能</p><p>1）选址功能</p><p>CPU 对于设备的选择，通过设备选择线上的设备码来确定。将设备码送至所有设备的接口，故要求每个接口都必须具有选址功能，即当设备选择线上的设备码与本设备码相符时，应发出设备选中信号，这种功能可通过接口内的设备选择电路来实现。</p><p>2）传送命令的功能</p><p>当 CPU 向 I/O 设备发出命令时，要求 I/O 设备能做出响应，如果 I/O 接口不具备传送命令信息的功能，那么设备将无法响应，故通常在 I/O 接口中设有存放命令的命令寄存器以及命令译码器。</p><p>3）传送数据的功能</p><p>接口处于主机与 I/O 设备之间，因此数据必须通过接口才能实现主机与 I/O 设备之间的传送。接口中通常设有数据缓冲寄存器（Data Buffer Register，DBR），与 I/O总线中的数据线相连，用来暂存 I/O 设备与主机准备交换的信息。</p><p>4）反映 I/O 设备工作状态的功能</p><p>为使 CPU 能及时了解各 I/O 设备的工作状态，接口内必须设置一些反映设备工作状态的触发器。</p></li><li><p>接口类型</p><p>I/O 接口按不同方式分类有以下几种：</p><p>1）按数据传送方式分类</p><ul><li>分为并行接口和串行接口两类。并行接口是将一个字节（或一个字）的所有位同时传送；串行接口是在设备与接口间一位一位传送。</li></ul><p>2）按功能选择的灵活性分类</p><ul><li>分为可编程接口和不可编程接口两种。可编程接口的功能及操作方式可用程序来改变或选择；不可编程接口不能由程序来改变其功能，但可通过硬连线逻辑来实现不同的功能。</li></ul><p>3）按通用性分类</p><ul><li>分为通用接口和专用接口。通用接口可供多种 I/O 设备使用；专用接口是为某类外设或某种用途专门设计的。</li></ul><p>4）按数据传送的控制方式分类</p><ul><li>有程序型接口和 DMA 型接口。程序型接口用于连接速度较慢的 I/O 设备，如显示终端、键盘、打印机等；DMA 型接口用于连接高速 I/O 设备，如磁盘、磁带等。</li></ul></li></ol><h3 id="6-3-3-主机与-I-O-设备信息传送的控制方式"><a href="#6-3-3-主机与-I-O-设备信息传送的控制方式" class="headerlink" title="6.3.3 主机与 I/O 设备信息传送的控制方式"></a>6.3.3 主机与 I/O 设备信息传送的控制方式</h3><p>主机和 I/O 设备之间的信息传送的控制方式可以分为以下四种：</p><ol><li><p>程序查询方式</p><p>程序查询方式是主机与 I/O 设备之间进行信息交换的最简单方式，由 CPU 通过程序不断查询 I/O 设备是否已做好准备，从而控制 I/O 设备与主机交换信息。</p><p>这种方式控制简单，但CPU和I/O设备处于串行工作状态，CPU的工作效率不高，主要适用于 I/O 设备少，数据传输率较低的系统。</p></li><li><p>程序中断方式</p><p>I/O 设备作好输入/输出准备时，向 CPU 发出中断请求，CPU 接到请求后就暂时中止原来执行的程序，转去执行中断服务程序，从而可以输入/输出一个数据。当中断处理完毕后，CPU 返回原来的程序继续执行。</p><p>这种方式实现了 CPU 和 I/O 设备的并行工作，提高了 CPU 的工作效率，一般适用于随机出现的服务。</p></li><li><p>直接存储器存取（DMA）方式</p><p>DMA 方式是在主存和 I/O 设备之间开辟一条直接的数据通路，可以进行基本上不需要 CPU 介入的信息传送，此时，DMA 控制器从 CPU 完全接管对总线的控制，数据交换不经过 CPU，而直接在内存和 I/O 设备之间进行。</p><p>这种方式进一步提高了 CPU 的资源利用率，能满足高速 I/O 设备的需要。</p></li><li><p>I/O 通道控制方式</p><p>通道的出现进一步提高了 CPU 的效率，这是因为 CPU 将部分权利下放给通道，通道可视为一种具有特殊功能、但不完全独立的处理器。它依据 CPU 的 I/O 指令工作，是从属于 CPU 的一个专用处理器，用来负责管理 I/O 设备、实现主存与 I/O 设备之间交换信息。</p><p>依赖通道管理的 I/O 设备在与主机交换信息时，CPU 不直接参与管理，故 CPU 的工作效率大为提高，但这种提高是以花费更多硬件为代价的。</p><p>目前，小型机和微型机大都采用程序查询方式、程序中断方式和 DMA 方式，通道方式一般用在中、大型计算机中。</p></li></ol><h2 id="6-4-中断方式"><a href="#6-4-中断方式" class="headerlink" title="6.4 中断方式"></a>6.4 中断方式</h2><p>计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊请求的处理，处理结束后再返回到现行程序的间断处，继续执行原程序，这就是“中断”。通常把实现中断所需的软硬件技术统称为中断技术。</p><ol><li><p>中断的提出</p><p>引起中断的因素大致可分为以下几类：</p><p>1）人为设置的中断</p><p>人为设置的中断一般称为自愿中断，一旦计算机执行人为中断，便停止现行程序而转入中断处理。</p><p>2）程序性事故</p><p>程序性事故是由程序设计不周而引起的中断，如定点溢出、操作码不能识别等。</p><p>3）硬件故障</p><p>硬件故障有电源掉电、插件接触不良等。</p><p>4）I/O 设备</p><p>I/O 设备启动后，一旦准备就绪，就向 CPU 发出中断请求。</p><p>5）外部事件</p><p>用户通过键盘来中断现行程序属于外部事件中断。</p><p>上述各种中断因素除自愿中断是人为的以外，大多都是随机的。通常将能引起中断的各个因素称为中断源。中断源可分两大类：一类为不可屏蔽中断，这类中断 CPU不能禁止响应，如电源掉电；另一类为可屏蔽中断，对可屏蔽中断源的请求，CPU 可根据该中断源是否被屏蔽来确定是否给予响应。若未屏蔽则可以响应；若已被屏蔽，则 CPU 不能响应。</p></li></ol><h3 id="6-4-2-中断处理过程-（后面一部分没弄完）"><a href="#6-4-2-中断处理过程-（后面一部分没弄完）" class="headerlink" title="6.4.2 中断处理过程 （后面一部分没弄完）"></a>6.4.2 中断处理过程 （后面一部分没弄完）</h3><p>计算机的中断处理过程表面上看起来有点类似于调用子程序的过程，但是它们之间却是有着本质上的区别：首先，子程序的执行是由程序员事先安排好的，而中断服务程序的执行则大多是由随机的中断事件引起的；其次，子程序的执行受到主程序或上层子程序的控制，而中断服务程序一般与被中断的现行程序毫无关系；最后，不存在同时调用多个子程序的情况，而有可能发生多个 I/O 设备同时请求 CPU 为自己服务的情况。</p><p>一次中断处理过程可简单地归纳为以下几个阶段：中断请求、中断判优、中断响应、中断服务和中断返回。</p><ol><li><p>中断请求</p><p>为了判断是哪个中断源提出请求，在中断系统中必须设置中断请求标记触发器，简称中断请求触发器，记作 INTR。当其状态为 1”时，表示中断源有请求。这种触发器可集中设在 CPU 的中断系统内，组成一个中断请求标记寄存器，也可以分散到各个中断源中，如分散在各个接口电路内。</p></li><li><p>中断判优</p><p>当某一时刻有多个中断源提出中断请求时，中断系统必须按其优先顺序予以响应，这称为中断判优。各中断源的优先顺序根据该中断源若得不到及时响应，致使机器工作出错的严重程度而定。</p><p>中断判优可用硬件实现，也可用软件实现。</p></li><li><p>中断响应</p><p>1）中断响应的条件和时间</p><ul><li>一个中断系统，在任一时刻，只能响应一个中断源的请求。CPU 响应中断源提出中断请求的条件是：必须满足 CPU 中的允许中断触发器 EINT 为“1”。允许中断触发器 EINT 可用开中断指令置“1”（称为开中断），意味着 CPU 允许响应中断源的请求；也可用关中断指令或硬件自动使其置“0”（称为关中断），意味着 CPU 禁止响应中断。</li><li>CPU 响应中断的时间是在每条指令执行阶段的结束时刻。CPU 在执行周期的结束时刻统一向所有中断源发中断查询信号，只有此时，CPU 才能获知哪个中断源有请求。若有中断，CPU 进入中断周期；若无中断，则进入下一条指令的取指周期。</li></ul><p>2）中断隐指令</p><ul><li>中断隐指令即在机器指令系统中没有的指令，它是 CPU 在中断周期内由硬件自动完成的一条指令。CPU 响应中断后，即进入中断周期。在中断周期内，CPU 要自动完成一系列操作：</li></ul></li></ol><h2 id="6-5-DMA方式"><a href="#6-5-DMA方式" class="headerlink" title="6.5 DMA方式"></a>6.5 DMA方式</h2><p>DMA适合于内存与高速I/O设备或外存之间的信息交换。DMA方式中，由于DMA接口与 CPU 共享内存，为有效分时使用内存，通常 DMA 与内存交换数据时采用以下三种方法：</p><ol><li><p>CPU 停止访问内存法</p><p>当外设要求传送一批数据时，由 DMA 接口向 CPU 发一个停止信号，要求 CPU放弃地址线、数据线和有关控制线的使用权。DMA 接口获得总线控制权后，开始进行数据传送，直到一组数据传送完毕后，DMA 接口通知 CPU 可以使用内存，并把总线控制权交回给 CPU。这种方法的优点是控制简单，适用于高速 I/O设备的数据成组传送。缺点是在 DMA 接口访问内存期间，CPU 基本处于保持或不工作状态，CPU 对主存的利用率得不到充分发挥。</p><p><img src="/images/image-20210810000754912.png" alt="image-20210810000754912"></p></li><li><p>周期挪用法</p><p>周期挪用也叫周期窃取，在这种方法中，每当 I/O 设备发出 DMA 请求时，I/O 设备便挪用或窃取总线占用权一个或几个内存周期，而 DMA 不请求时，CPU 仍继续访问内存。周期窃取法每次在 DMA 控制器传送完一个数据后立即释放总线，使 I/O 设备在准备下一数据时，CPU 能插空访问主存。</p><p><img src="/images/image-20210810000853241.png" alt="image-20210810000853241"></p><p>若 I/O 设备请求 DMA 传送时，CPU 不需要访存，则周期挪用对 CPU 执行程序无任何影响；若 CPU 正在访问内存，此时必须待存取周期结束，CPU 才能将总线占有权让出；若同一时刻，发生 CPU 与 DMA 的访存冲突，那么优先保证 DMA 工作，因为 I/O 设备不立即访问内存就可能丢失数据，这时 I/O 设备要窃取一、二个存取周期，CPU 则延缓一、二个存取周期再访问内存。</p><p>与 CPU 停止访问内存法相比，周期挪用的方法既实现了 I/O 传送，又较好地发挥了内存和 CPU 的效率，是一种广泛采用的方法。</p><p>但应该指出，I/O 设备每挪用一个内存周期都要申请总线控制权、建立总线控制权和归还总线控制权。因此，尽管传送一个字对内存而言只占用一个内存周期，但对DMA 接口而言，实质上要占 2～5 个内存周期。故周期挪用的方法比较适合于 I/O 设备的读/写周期大于内存周期的情况。</p></li><li><p>DMA 与 CPU 交替访问</p><p>如果 CPU 的工作周期比内存存取周期长很多，此时采用交替访问的方法可以使得DMA 传送和 CPU 同时发挥最高的效率。如图所示，把一个 CPU 周期分成两个时间片，一个给 CPU，一个给 DMA，使 CPU 和 DMA 交替地访问内存。这种方法不需要申请和归还总线，总线控制权的转移几乎不需要什么时间，具有很高的 DMA 传送效率。而且 CPU 既不停止现行程序的运行，也不进入等待状态，不知不觉地就完成了DMA 的数据传送，故又被称为“透明的 DMA”方式。</p><p><img src="/images/image-20210810001122895.png" alt="image-20210810001122895"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2021/08/02/5.%20ElasticSearch/"/>
    <url>/2021/08/02/5.%20ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="1-初识ElasticSearch"><a href="#1-初识ElasticSearch" class="headerlink" title="1. 初识ElasticSearch"></a>1. 初识ElasticSearch</h1><h2 id="1-1-倒排索引"><a href="#1-1-倒排索引" class="headerlink" title="1.1 倒排索引"></a>1.1 倒排索引</h2><p><strong>倒排索引</strong>：将文档进行分词，形成词条和id的对应关系即为反向索引。</p><p>以唐诗为例，所处包含“前”的诗句</p><p>正向索引：由《静夜思》–&gt;床前明月光—&gt;“前”字</p><p>反向索引：“前”字–&gt;床前明月光–&gt;《静夜思》</p><p>反向索引的实现就是对诗句进行分词，分成单个的词，由词推据，即为反向索引</p><p>“床前明月光”–&gt; 分词</p><p>将一段文本按照一定的规则，拆分为不同的词条（term）</p><p><img src="/images/image-20210802232553086.png" alt="image-20210802232553086"></p><h2 id="1-2-ES存储和查询的原理"><a href="#1-2-ES存储和查询的原理" class="headerlink" title="1.2 ES存储和查询的原理"></a>1.2 ES存储和查询的原理</h2><ul><li>index（索引）：相当于mysql的数据库</li><li>映射：相当于mysql 的表结构</li><li>document(文档)：相当于mysql的表中的数据</li></ul><p>数据库查询存在的问题：</p><ol><li>性能低：使用模糊查询，左边有通配符，不会走索引，会全表扫描，性能低</li><li>功能弱：如果以”华为手机“作为条件查询下图索引库，查询不出来数据</li></ol><p>Es使用倒排索引，对title 进行分词</p><p><img src="/images/image-20210802233002078.png" alt="image-20210802233002078"></p><ol><li><p>使用“手机”作为关键字查询</p><p>生成的倒排索引中，词条会排序，形成一颗树形结构，提升词条的查询速度</p></li><li><p>使用“华为手机”作为关键字查询</p><p>华为：1,3</p><p>手机：1,2,3</p></li></ol><p><img src="/images/image-20210802233215711.png" alt="image-20210802233215711"></p><h2 id="1-3-ES概念详解"><a href="#1-3-ES概念详解" class="headerlink" title="1.3 ES概念详解"></a>1.3 ES概念详解</h2><ul><li><p>ElasticSearch是一个基于Lucene的搜索服务器</p><p><img src="/images/image-20210802233322245.png" alt="image-20210802233322245"></p></li><li><p>是一个分布式、高扩展、高实时的搜索与数据分析引擎</p></li><li><p>基于RESTful web接口</p></li><li><p>Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎</p></li></ul><p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p><p>应用场景：</p><ol><li>搜索：海量数据的查询</li><li>日志数据分析</li><li>实时数据分析</li></ol><h1 id="2-安装ElasticSearch"><a href="#2-安装ElasticSearch" class="headerlink" title="2. 安装ElasticSearch"></a>2. 安装ElasticSearch</h1><h2 id="2-1-ES安装"><a href="#2-1-ES安装" class="headerlink" title="2.1 ES安装"></a>2.1 ES安装</h2><ol><li><p>上传ElasticSearch安装包(在官网下载到了宿主机上，也可以直接在虚拟机中用命令下载)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">alt+p # 打开sftp窗口<br><span class="hljs-meta">#</span><span class="bash"> 上传es安装包</span><br>put e:/software/elasticsearch-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>执行解压操作 ，如下图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将elasticsearch-7.4.0-linux-x86_64.tar.gz解压到opt文件夹下. -C 大写</span><br>tar -zxvf elasticsearch-7.4.0-linux-x86_64.tar.gz  -C /opt<br></code></pre></td></tr></table></figure></li><li><p>创建普通用户</p><p>因为安全问题，Elasticsearch 不允许root用户直接运行，所以要创建新用户，在root用户中创建新用户,执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd itheima  # 新增itheima用户<br>passwd  itheima  # 为itheima用户设置密码<br></code></pre></td></tr></table></figure></li><li><p>为新用户授权，如下图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R itheima:itheima /opt/elasticsearch-7.4.0 #文件夹所有者<br></code></pre></td></tr></table></figure></li><li><p>修改elasticsearch.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/elasticsearch-7.4.0/config/elasticsearch.yml <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ======================== Elasticsearch Configuration =========================</span><br>cluster.name: my-application<br>node.name: node-1<br>network.host: 0.0.0.0  # 配置成这个地址可以让外网访问到，localhost外网访问不到<br>http.port: 9200<br>cluster.initial_master_nodes: [&quot;node-1&quot;]<br></code></pre></td></tr></table></figure><p>cluster.name：配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称</p><p>node.name：节点名，elasticsearch会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</p><p>network.host：设置为0.0.0.0允许外网访问</p><p>http.port：Elasticsearch的http访问端口</p><p>cluster.initial_master_nodes：初始化新的集群时需要此配置来选举master</p></li><li><p>修改配置文件</p><p>新创建的itheima用户最大可创建文件数太小，最大虚拟内存太小，切换到root用户，编辑下列配置文件， 添加类似如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到root用户</span><br>su root <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">1. ===最大可创建文件数太小=======</span><br>vim /etc/security/limits.conf <br><span class="hljs-meta">#</span><span class="bash"> 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br><span class="hljs-meta">#</span><span class="bash"> =====</span><br>vim /etc/security/limits.d/20-nproc.conf<br><span class="hljs-meta">#</span><span class="bash"> 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br>*  hard    nproc     4096<br><span class="hljs-meta">#</span><span class="bash"> 注：* 代表Linux所有用户名称</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">2. ===最大虚拟内存太小=======</span><br>vim /etc/sysctl.conf<br><span class="hljs-meta">#</span><span class="bash"> 在文件中增加下面内容</span><br>vm.max_map_count=655360<br><span class="hljs-meta">#</span><span class="bash"> 重新加载，输入下面命令：</span><br>sysctl -p<br></code></pre></td></tr></table></figure></li><li><p>启动elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">su itheima  # 切换到itheima用户启动<br>cd /opt/elasticsearch-7.4.0/bin<br>./elasticsearch #启动<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-访问elasticsearch"><a href="#2-2-访问elasticsearch" class="headerlink" title="2.2 访问elasticsearch"></a>2.2 访问elasticsearch</h2><ol><li><p>在访问elasticsearch前，请确保防火墙是关闭的，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">暂时关闭防火墙</span><br>systemctl  stop  firewalld<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">永久设置防火墙状态</span><br>systemctl enable firewalld.service  #打开防火墙永久性生效，重启后不会复原 <br>systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原 <br></code></pre></td></tr></table></figure></li><li><p>浏览器输入<a href="http://192.168.200.129:9200/">http://192.168.200.129:9200/</a></p><p><img src="/images/image-20210802234919469.png" alt="image-20210802234919469"></p><p>看到上图说明此时elasticsearch已成功启动：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">重点几个关注下即可:<br>numbe<span class="hljs-string">r&quot; : &quot;</span><span class="hljs-number">7.4</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;   表示elasticsearch版本</span><br><span class="hljs-string">lucene_version&quot;</span> : <span class="hljs-string">&quot;8.2.0&quot;</span>  表示lucene版本<br>name ： 默认启动的时候指定了 ES 实例名称<br>cluster_name ： 默认名为 elasticsearch<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-Elasticsearch辅助插件Kibana安装"><a href="#3-Elasticsearch辅助插件Kibana安装" class="headerlink" title="3. Elasticsearch辅助插件Kibana安装"></a>3. Elasticsearch辅助插件Kibana安装</h1><p>什么是Kibana?</p><ul><li>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</li><li>Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</li></ul><h2 id="3-1-Kibana安装"><a href="#3-1-Kibana安装" class="headerlink" title="3.1 Kibana安装"></a>3.1 Kibana安装</h2><ol><li><p>上传kibana</p><p>CRT中克隆一个窗口，上传Kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">put ‪E:\software\kibana-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzf kibana-7.4.0-linux-x86_64.tar.gz -C /opt<br></code></pre></td></tr></table></figure></li><li><p>修改kibana.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/kibana-7.4.0-linux-x86_64/config/kibana.yml<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.port:</span> <span class="hljs-number">5601</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-attr">server.name:</span> <span class="hljs-string">&quot;kibana-itcast&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>] <span class="hljs-comment"># 因为他和es是装一个上面了，所以直接用的127.0.0.1本机ip，如果不在一个上面的话，要改成装es的那台服务器的ip</span><br><span class="hljs-attr">elasticsearch.requestTimeout:</span> <span class="hljs-number">99999</span><br></code></pre></td></tr></table></figure><p>server.port：http访问端口</p><p>server.host：ip地址，0.0.0.0表示可远程访问</p><p>server.name：kibana服务名</p><p>elasticsearch.hosts：elasticsearch地址</p><p>elasticsearch.requestTimeout：请求elasticsearch超时时间，默认为30000，此处可根据情况设置</p></li><li><p>启动kibana</p><p>由于kibana不建议使用root用户启动，如果用root启动，需要加–allow-root参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到kibana的bin目录</span><br>cd /opt/kibana-7.4.0-linux-x86_64/bin<br><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>./kibana --allow-root<br></code></pre></td></tr></table></figure></li><li><p>访问kibana</p><p>浏览器输入<a href="http://192.168.200.129:5601/">http://192.168.200.129:5601/</a></p><p><img src="/images/image-20210803000515080.png" alt="image-20210803000515080"></p><p>看到这个界面，说明Kibanan已成功安装。</p><ul><li><code>Discover</code>：可视化查询分析器</li><li><code>Visualize</code>：统计分析图表</li><li><code>Dashboard</code>：自定义主面板（添加图表）</li><li><code>Timelion</code>：Timelion是一个kibana时间序列展示组件（暂时不用）</li><li><code>Dev Tools</code>：Console控制台（同CURL/POSTER，操作ES代码工具，代码提示，很方便）</li><li><code>Management</code>：管理索引库(index)、已保存的搜索和可视化结果(save objects)、设置 kibana 服务器属性。</li></ul></li></ol><h1 id="4-ElasticSearch核心概念"><a href="#4-ElasticSearch核心概念" class="headerlink" title="4. ElasticSearch核心概念"></a>4. ElasticSearch核心概念</h1><p><strong>索引（index）</strong></p><p>ElasticSearch存储数据的地方，可以理解成关系型数据库中的数据库概念。</p><p><strong>映射（mapping）</strong></p><p>mapping定义了每个字段的类型、字段所使用的分词器等。相当于关系型数据库中的表结构。</p><p><strong>文档（document）</strong></p><p>Elasticsearch中的最小数据单元，常以json格式显示。一个document相当于关系型数据库中的一行数据。</p><p><strong>倒排索引</strong></p><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，对应一个包含它的文档id列表。</p><p><strong>类型（type）</strong></p><p>一种type就像一类表。如用户表、角色表等。在Elasticsearch7.X默认type为_doc</p><h1 id="5-脚本操作ES"><a href="#5-脚本操作ES" class="headerlink" title="5 脚本操作ES"></a>5 脚本操作ES</h1><p>使用脚本操作es一般是由运维人员来进行的</p><h2 id="5-1-RESTful风格介绍"><a href="#5-1-RESTful风格介绍" class="headerlink" title="5.1 RESTful风格介绍"></a>5.1 RESTful风格介绍</h2><ol><li>ST（Representational State Transfer），表述性状态转移，是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。就是一种定义接口的规范。</li><li>基于HTTP</li><li>参数使用XML格式定义或JSON格式定义</li><li>每一个URI代表1种资源</li><li>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：<ul><li>GET：用来获取资源</li><li>POST：用来新建资源（也可以用于更新资源）</li><li>PUT：用来更新资源</li><li>DELETE：用来删除资源</li></ul></li></ol><h2 id="5-2-操作索引"><a href="#5-2-操作索引" class="headerlink" title="5.2 操作索引"></a>5.2 操作索引</h2><ol><li><p><strong>添加索引</strong></p><p>添加goods_index索引，使用put请求(这里不是post，稍微注意下)，我这里是用postman操作的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.129</span>:<span class="hljs-number">9200</span>/goods_index<br></code></pre></td></tr></table></figure><p>操作成功后会看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;goods_index&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>查询索引</strong></p><p>使用get请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET http:<span class="hljs-regexp">//i</span>p:端口/索引名称  <span class="hljs-comment"># 查询单个索引信息</span><br>GET http:<span class="hljs-regexp">//i</span>p:端口/索引名称<span class="hljs-number">1</span>,索引名称<span class="hljs-number">2</span>  <span class="hljs-comment"># 查询多个索引信息</span><br>GET http:<span class="hljs-regexp">//i</span>p:端口/_all  <span class="hljs-comment"># 查询所有索引信息</span><br></code></pre></td></tr></table></figure></li><li><p><strong>删除索引</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">DELETE http:<span class="hljs-regexp">//i</span>p:端口/索引名称<br></code></pre></td></tr></table></figure></li><li><p><strong>关闭及打开索引</strong></p><p>关闭是为了不想删除索引库，但是同时又不想让别人访问到，所以选择关闭。关闭之后不能往里面添加数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST http:<span class="hljs-regexp">//i</span>p:端口<span class="hljs-regexp">/索引名称/</span>_close  <br>POST http:<span class="hljs-regexp">//i</span>p:端口<span class="hljs-regexp">/索引名称/</span>_open <br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-ES数据类型"><a href="#5-3-ES数据类型" class="headerlink" title="5.3 ES数据类型"></a>5.3 ES数据类型</h2><ol><li><p><strong>简单数据类型</strong></p><ul><li><p>字符串</p><p>text：会分词，不支持聚合（聚合相当于mysql中的求和）</p><p>keyword：不会分词，将全部内容作为一个词条，支持聚合</p></li><li><p>数值</p></li><li><p>布尔</p><p>boolean</p></li><li><p>二进制</p><p>binary</p></li><li><p>范围类型</p><p>integer_range, float_range, long_range, double_range, date_range </p></li></ul></li><li><p><strong>复杂数据类型</strong></p><ul><li>数组：[ ] </li><li>对象：{ } </li></ul></li></ol><h2 id="5-4-操作映射"><a href="#5-4-操作映射" class="headerlink" title="5.4 操作映射"></a>5.4 操作映射</h2><p>下面的操作都是基于kibana的</p><ol><li><p><strong>添加映射</strong></p><p>先创建一个person索引</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">PUT person</span><br></code></pre></td></tr></table></figure><p>给索引添加映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /person/_mapping<br>&#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>:&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>:&#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;age&quot;</span>:&#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>或者用另外一种方法直接在创建索引的同时创建好映射关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">#创建索引并添加映射<br>PUT /person1<br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>查询映射</strong></p><p>注意</p><ul><li>只用在kibana中写上查询方式以及映射名称就行了，不用写ip和端口啥的，比较方便</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> person1/_mapping<br></code></pre></td></tr></table></figure><p>查询的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;person1&quot;</span> : &#123;# 索引名称<br>    <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;# 映射<br>      <span class="hljs-attr">&quot;properties&quot;</span> : &#123;  # 映射的属性<br>        <span class="hljs-attr">&quot;age&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;name&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>添加字段</strong></p><p>要是添加的是映射本来就有的，会报错，要是没有就直接添加。注意，对映射关系的修改中是没有直接删除映射的，因为这样容易产生事故</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">#添加字段<br>PUT /person1/_mapping<br>&#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-5-操作文档"><a href="#5-5-操作文档" class="headerlink" title="5.5 操作文档"></a>5.5 操作文档</h2><ol><li><p><strong>添加文档以及查询文档</strong></p><p>添加文档，指定id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person1/_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span><br>&#125;<br><br># 添加完毕进行查询<br>GET /person1/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>  <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;found&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>添加文档，不指定id</p><p>注意：</p><ul><li>稍微注意下如果查特定文档时候的语句以及查所有文档语句的区别</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">#添加文档，不指定id<br>POST /person1/_doc/<br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span><br>&#125;<br><br>#查询所有文档<br>GET /person1/_search<br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">778</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,  # 查询到的文档数量<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;K5KtC3sBCY0ja69ZDmup&quot;</span>,  # 如果自己不指定文档id，系统会自动分配一个<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;李四&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">20</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;武汉&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改文档</strong></p></li><li><p><strong>删除文档</strong></p><p>删除指定文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">#删除指定id文档<br>DELETE /person1/_doc/K5KtC3sBCY0ja69ZDmup<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-分词器"><a href="#6-分词器" class="headerlink" title="6. 分词器"></a>6. 分词器</h1><h2 id="6-1-分词器介绍"><a href="#6-1-分词器介绍" class="headerlink" title="6.1 分词器介绍"></a>6.1 分词器介绍</h2><ul><li>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包</li><li>是一个基于Maven构建的项目</li><li>具有60万字/秒的高速处理能力</li><li>支持用户词典扩展定义</li></ul><p>下载地址（注意选择和es匹配的版本）：<a href="https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip">https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip</a> </p><h2 id="6-2-ik分词器安装"><a href="#6-2-ik分词器安装" class="headerlink" title="6.2 ik分词器安装"></a>6.2 ik分词器安装</h2><h3 id="6-2-1-环境准备"><a href="#6-2-1-环境准备" class="headerlink" title="6.2.1 环境准备"></a>6.2.1 环境准备</h3><p>Elasticsearch 要使用 ik，就要先构建 ik 的 jar包，这里要用到 maven 包管理工具，而 maven 需要java 环境，而 Elasticsearch 内置了jdk， 所以可以将JAVA_HOME设置为Elasticsearch 内置的jdk</p><ol><li><p>设置JAVA_HOME</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta">#</span><span class="bash"> 在profile文件末尾添加</span><br><span class="hljs-meta">#</span><span class="bash">java environment</span><br>export JAVA_HOME=/opt/elasticsearch-7.4.0/jdk<br>export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 保存退出后，重新加载profile</span><br>source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>下载maven安装包</p><p>有的镜像可能不好用，如果失败了就换其他镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://mirror.cc.columbia.edu/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz<br>wget http://maven.aliyun.com/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压maven安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xzf apache-maven-3.1.1-bin.tar.gz <br></code></pre></td></tr></table></figure></li><li><p>设置软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s apache-maven-3.1.1 maven <br></code></pre></td></tr></table></figure></li><li><p>设置path</p><p>打开文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim  /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure><p>将下面的内容复制到文件，保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export MAVEN_HOME=/opt/maven  <br>export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125; <br></code></pre></td></tr></table></figure><p>设置好Maven的路径之后，需要运行下面的命令使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure></li><li><p>验证maven是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn -v<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2-2-安装IK分词器"><a href="#6-2-2-安装IK分词器" class="headerlink" title="6.2.2 安装IK分词器"></a>6.2.2 安装IK分词器</h3><ol><li><p>下载IK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip<br></code></pre></td></tr></table></figure></li><li><p>解压IK</p><p>由于这里是zip包不是gz包，所以我们需要使用unzip命令进行解压，如果本机环境没有安装unzip，请执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install zip <br>yum install unzip<br></code></pre></td></tr></table></figure><p>解压IK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unzip v7.4.0.zip<br></code></pre></td></tr></table></figure></li><li><p>编译jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到 elasticsearch-analysis-ik-7.4.0目录</span><br>cd elasticsearch-analysis-ik-7.4.0/<br><span class="hljs-meta">#</span><span class="bash">打包</span><br>mvn package  #这里用阿里云的镜像弄，改一下配置就行了<br></code></pre></td></tr></table></figure></li><li><p> jar包移动</p></li></ol><p>   package执行完毕后会在当前目录下生成target/releases目录，将其中的elasticsearch-analysis-ik-7.4.0.zip。拷贝到elasticsearch目录下的新建的目录plugins/analysis-ik，并解压</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">切换目录</span><br>cd /opt/elasticsearch-7.4.0/plugins/<br><span class="hljs-meta">#</span><span class="bash">新建目录</span><br>mkdir analysis-ik<br>cd analysis-ik<br><span class="hljs-meta">#</span><span class="bash">执行拷贝</span><br>cp -R /opt/elasticsearch-analysis-ik-7.4.0/target/releases/elasticsearch-analysis-ik-7.4.0.zip      /opt/elasticsearch-7.4.0/plugins/analysis-ik<br><span class="hljs-meta">#</span><span class="bash">执行解压</span><br>unzip  /opt/elasticsearch-7.4.0/plugins/analysis-ik/elasticsearch-analysis-ik-7.4.0.zip<br></code></pre></td></tr></table></figure><ol start="5"><li><p>拷贝辞典</p><p>将elasticsearch-analysis-ik-7.4.0目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -R /opt/elasticsearch-analysis-ik-7.4.0/config/*   /opt/elasticsearch-7.4.0/config<br></code></pre></td></tr></table></figure></li></ol><p>最后记得重启es才能生效</p><h2 id="6-3-ik分词器使用"><a href="#6-3-ik分词器使用" class="headerlink" title="6.3 ik分词器使用"></a>6.3 ik分词器使用</h2><p>IK分词器有两种分词模式：ik_max_word和ik_smart模式。</p><ol><li><p><strong>ik_max_word</strong></p><p>会将文本做最细粒度的拆分，比如会将“乒乓球明年总冠军”拆分为“乒乓球、乒乓、球、明年、总冠军、冠军。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#方式一ik_max_word<br>GET /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_max_word分词器执行如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">3</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">4</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">5</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ik_smart</strong></p><p>会做最粗粒度的拆分，比如会将“乒乓球明年总冠军”拆分为乒乓球、明年、总冠军。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#方式二ik_smart<br>GET /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_smart分词器执行如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-4-使用IK分词器-查询文档"><a href="#6-4-使用IK分词器-查询文档" class="headerlink" title="6.4 使用IK分词器-查询文档"></a>6.4 使用IK分词器-查询文档</h2><ul><li><p>词条查询：term</p><p>词条查询不会分析查询条件，只有当词条和查询字符串完全匹配时才匹配搜索</p></li><li><p>全文查询：match</p><p>全文查询会分析查询条件，先将查询条件进行分词，然后查询，求并集</p></li></ul><p><strong>分词案例</strong></p><ol><li><p>创建索引，添加映射，并指定分词器为ik分词器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT person2<br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person2/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京海淀区&quot;</span><br>&#125;<br><br>POST /person2/_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京朝阳区&quot;</span><br>&#125;<br><br>POST /person2/_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;王五&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京昌平区&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查询映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET person2<br></code></pre></td></tr></table></figure><p>查询结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;person2&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;aliases&quot;</span> : &#123; &#125;,<br>    <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;properties&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;address&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-attr">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;age&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;long&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;name&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;settings&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;index&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;creation_date&quot;</span> : <span class="hljs-string">&quot;1627990806608&quot;</span>,<br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;uuid&quot;</span> : <span class="hljs-string">&quot;fVX6890BS1a2WBqeFtVqoA&quot;</span>,<br>        <span class="hljs-attr">&quot;version&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;created&quot;</span> : <span class="hljs-string">&quot;7040099&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;provided_name&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看分词效果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;北京海淀&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;京海&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;海淀&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分词器查询</p><p>5.1 词条查询（term）</p><p>查询person2中匹配到”北京”两字的词条</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person2/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;北京昌平&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询结果</p><p>可以看见并没有查到，因为分词的时候并没有一个叫做“北京昌平”的token, 所以按照term匹配的时候并没有搜索出地址为北京昌平区的那个文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [ ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>5.2 全文查询 (match)</p><p>全文查询会分析查询条件，先将查询条件进行分词，然后查询，求并集</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person2/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京昌平&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">22</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.1505673</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.1505673</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;王五&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京昌平区&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.13786995</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;李四&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京朝阳区&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.12562492</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京海淀区&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="7-ElasticSearch-JavaApi"><a href="#7-ElasticSearch-JavaApi" class="headerlink" title="7. ElasticSearch JavaApi"></a>7. ElasticSearch JavaApi</h1><p>开发人员一般使用这部分知识比较多。一般是操作文档，对于索引和映射一般都是通过脚本提前创建好了的</p><h2 id="7-1-SpringBoot整合ES"><a href="#7-1-SpringBoot整合ES" class="headerlink" title="7.1 SpringBoot整合ES"></a>7.1 SpringBoot整合ES</h2><ol><li><p>搭建SpringBoot工程</p></li><li><p>引入ElasticSearch相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入es的坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置es的yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.129</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure></li><li><p>配置ES客户端的测试类，用于获得es的客户端对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;elasticsearch&quot;)</span> <span class="hljs-comment">//读取配置文件中前缀为elasticsearch的属性值，并在程序启动的时候自动将这些属性注入到这个配置类中对应的成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfig</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHost</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(String host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>    &#125;<br>    <span class="hljs-comment">//创建es客户端对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">client</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(<br>                <span class="hljs-keyword">new</span> HttpHost(host,port,<span class="hljs-string">&quot;http&quot;</span>)<br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在测试类中测试是否能注入RestHighLevelClient 对象</p><p>如果能打印出对象的信息说明整个过程是成功的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchApplicationTests</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(client);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-2-操作索引"><a href="#7-2-操作索引" class="headerlink" title="7.2 操作索引"></a>7.2 操作索引</h2><h3 id="7-2-1-添加索引"><a href="#7-2-1-添加索引" class="headerlink" title="7.2.1 添加索引"></a>7.2.1 添加索引</h3><ol><li><p>添加索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加索引</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1.使用client获取操作索引对象</span><br>IndicesClient indices = client.indices();<br>   <br><span class="hljs-comment">//2.具体操作获取返回值</span><br><span class="hljs-comment">//2.1 设置索引名称</span><br>CreateIndexRequest createIndexRequest=<span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;itheima1&quot;</span>);<br>CreateIndexResponse createIndexResponse = indices.create(createIndexRequest, RequestOptions.DEFAULT);<br>   <br><span class="hljs-comment">//3.根据返回值判断结果</span><br>System.out.println(createIndexResponse.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加索引，并添加映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加索引，并添加映射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndexAndMapping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1.使用client获取操作索引对象</span><br>IndicesClient indices = client.indices();<br><span class="hljs-comment">//2.具体操作获取返回值</span><br><span class="hljs-comment">//2.具体操作，获取返回值</span><br>CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>);<br><span class="hljs-comment">//2.1 设置mappings</span><br>String mapping = <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br><span class="hljs-string">&quot;      \&quot;properties\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;address\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;text\&quot;,\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;analyzer\&quot; : \&quot;ik_max_word\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;age\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;long\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;name\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;keyword\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;\n&quot;</span> +<br><span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br><span class="hljs-string">&quot;    &#125;&quot;</span>;<br>createIndexRequest.mapping(mapping, XContentType.JSON);<br><br>CreateIndexResponse createIndexResponse = indices.create(createIndexRequest, RequestOptions.DEFAULT);<br><span class="hljs-comment">//3.根据返回值判断结果</span><br>System.out.println(createIndexResponse.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-2-2-查询、删除、判断索引"><a href="#7-2-2-查询、删除、判断索引" class="headerlink" title="7.2.2 查询、删除、判断索引"></a>7.2.2 查询、删除、判断索引</h3><p>查询索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br><br>GetIndexRequest getRequest=<span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;itcast&quot;</span>);<br>GetIndexResponse response = indices.get(getRequest, RequestOptions.DEFAULT);<br>Map&lt;String, MappingMetaData&gt; mappings = response.getMappings();<br><span class="hljs-comment">//iter 提示foreach</span><br><span class="hljs-keyword">for</span> (String key : mappings.keySet()) &#123;<br>System.out.println(key+<span class="hljs-string">&quot;===&quot;</span>+mappings.get(key).getSourceAsMap());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br>DeleteIndexRequest deleteRequest=<span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;itheima&quot;</span>);<br>AcknowledgedResponse delete = indices.delete(deleteRequest, RequestOptions.DEFAULT);<br>System.out.println(delete.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure><p>判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 索引是否存在</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">existIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br><br>GetIndexRequest getIndexRequest=<span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;itheima&quot;</span>);<br><span class="hljs-keyword">boolean</span> exists = indices.exists(getIndexRequest, RequestOptions.DEFAULT);<br><br>System.out.println(exists);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-3-操作文档"><a href="#7-3-操作文档" class="headerlink" title="7.3 操作文档"></a>7.3 操作文档</h2><h3 id="7-3-1-添加文档"><a href="#7-3-1-添加文档" class="headerlink" title="7.3.1 添加文档"></a>7.3.1 添加文档</h3><ol><li><p>添加文档,使用map作为数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Map&lt;String, Object&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br>map.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;北京二环&quot;</span>);<br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>).source(map);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加文档,使用对象作为数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Person person=<span class="hljs-keyword">new</span> Person();<br>person.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>person.setAge(<span class="hljs-number">20</span>);<br>person.setAddress(<span class="hljs-string">&quot;北京三环&quot;</span>);<br>String data = JSON.toJSONString(person);<br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(person.getId()).source(data,XContentType.JSON);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-3-2-修改、查询、删除文档"><a href="#7-3-2-修改、查询、删除文档" class="headerlink" title="7.3.2 修改、查询、删除文档"></a>7.3.2 修改、查询、删除文档</h3><ol><li><p>修改文档：添加文档时，如果id存在则修改，id不存在则添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Person person=<span class="hljs-keyword">new</span> Person();<br>person.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>person.setAge(<span class="hljs-number">20</span>);<br>person.setAddress(<span class="hljs-string">&quot;北京三环车王&quot;</span>);<br>   <br>String data = JSON.toJSONString(person);<br>   <br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(person.getId()).source(data,XContentType.JSON);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据id查询文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询文档</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>   <br>    <span class="hljs-comment">//设置查询的索引、文档</span><br>    GetRequest indexRequest=<span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;itcast&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>   <br>    GetResponse response = client.get(indexRequest, RequestOptions.DEFAULT);<br>    System.out.println(response.getSourceAsString());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据id删除文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id删除文档</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>   <br><span class="hljs-comment">//设置要删除的索引、文档</span><br>DeleteRequest deleteRequest=<span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;itcast&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>   <br>DeleteResponse response = client.delete(deleteRequest, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hystrix</title>
    <link href="/2021/08/01/4.%20Hystrix%20%E7%86%94%E6%96%AD%E5%99%A8/"/>
    <url>/2021/08/01/4.%20Hystrix%20%E7%86%94%E6%96%AD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Hystrix-概述"><a href="#1-Hystrix-概述" class="headerlink" title="1. Hystrix 概述"></a>1. <strong>Hystrix</strong> 概述</h1><ul><li>Hystix 是 Netflix 开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败（雪崩: 一个服务失败，导致整条链路的服务都失败的情形）。</li></ul><p>Hystix 主要功能</p><ol><li>隔离<ol><li>线程池隔离 （对要请求的微服务设置可使用的线程数，这样不会导致一个微服务占用所有线程）</li><li>信号量隔离</li></ol></li><li>降级 （对异常提供降级方案，出现异常了就调用降级方案）</li><li>熔断</li><li>限流</li></ol><h2 id="1-1-Hystrix-降级"><a href="#1-1-Hystrix-降级" class="headerlink" title="1.1 Hystrix 降级"></a>1.1 <strong>Hystrix</strong> <strong>降级</strong></h2><p>Hystix 降级：当服务发生异常或调用超时，返回默认数据</p><p><img src="/images/image-20210801232052828.png" alt="image-20210801232052828"></p><h3 id="1-1-1-服务提供方"><a href="#1-1-1-服务提供方" class="headerlink" title="1.1.1 服务提供方"></a>1.1.1 服务提供方</h3><ol><li><p>在服务提供方，引入hystrix依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- hystrix --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在服务提供方的启动类上开启hystrix功能<code>@EnableCircuitBreaker</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//该注解 在新版本中可以省略</span><br><span class="hljs-meta">@SpringBootApplication</span><br><br><span class="hljs-meta">@EnableCircuitBreaker</span> <span class="hljs-comment">// 开启Hystrix功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderApp</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ProviderApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对要被消费者调用的方法定义降级方法</p><p>注意： </p><ul><li>使用注解<code>@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;)</code>指定降级方法</li><li>定义降级方法注意事项<ul><li>方法的返回值需要和原方法一样</li><li>方法的参数需要和原方法一样</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Goods Controller 服务提供方</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GoodsService goodsService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 降级：</span><br><span class="hljs-comment">     *  1. 出现异常</span><br><span class="hljs-comment">     *  2. 服务调用超时</span><br><span class="hljs-comment">     *      * 默认1s超时</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *  <span class="hljs-doctag">@HystrixCommand</span>(fallbackMethod = &quot;findOne_fallback&quot;)</span><br><span class="hljs-comment">     *      fallbackMethod：指定降级后调用的方法名称</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">            //设置Hystrix的超时时间，默认1s</span><br><span class="hljs-meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>        <span class="hljs-comment">//1.造个异常</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2. 休眠2秒</span><br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        Goods goods = goodsService.findOne(id);<br><br>        goods.setTitle(goods.getTitle() + <span class="hljs-string">&quot;:&quot;</span> + port);<span class="hljs-comment">//将端口号，设置到了 商品标题上</span><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义降级方法：</span><br><span class="hljs-comment">     *  1. 方法的返回值需要和原方法一样</span><br><span class="hljs-comment">     *  2. 方法的参数需要和原方法一样</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne_fallback</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        Goods goods = <span class="hljs-keyword">new</span> Goods();<br>        goods.setTitle(<span class="hljs-string">&quot;降级了~~~&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-1-2-服务消费方"><a href="#1-1-2-服务消费方" class="headerlink" title="1.1.2 服务消费方"></a>1.1.2 服务消费方</h3><ol><li><p>因为feign组件中已经集成了hystrix组件，所以hytrix的依赖就不用导入了</p></li><li><p>配置yml文件，开启feign对hystrix的支持</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 开启feign对hystrix的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>定义feign 调用接口实现类，复写方法，即 降级方法</p><p>注意：</p><ul><li>降级类要实现<code>GoodsFeignClient</code>接口</li><li>记得将这个降级类放到spring容器中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Feign 客户端的降级处理类</span><br><span class="hljs-comment"> * 1. 定义类 实现 Feign 客户端接口</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@Component</span>注解将该类的Bean加入SpringIOC容器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsFeignClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Goods goods = <span class="hljs-keyword">new</span> Goods();<br>        goods.setTitle(<span class="hljs-string">&quot;又被降级了~~~&quot;</span>);<br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 @FeignClient 注解中使用 fallback 属性设置刚编写的降级处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;HYSTRIX-PROVIDER&quot;,fallback = GoodsFeignClientFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-Hystrix熔断"><a href="#1-2-Hystrix熔断" class="headerlink" title="1.2 Hystrix熔断"></a>1.2 Hystrix熔断</h2><p>Hystrix 熔断机制，用于监控微服务调用情况，当失败的情况达到预定的阈值（5秒失败20次），会打开断路器，拒绝所有请求（全都降级），直到服务恢复正常为止。</p><p>断路器状态改变图：</p><p>连续调用服务方的方法出现异常或连接超时导致服务降级时，若达到预定的阈值，断路器打开，此时无论请求是否正常都会提供降级方法给消费方。等到默认开启时间结束，断路器会转变为半开状态，这时会放过来一个请求，如果调用成功，断路器关闭；反之断路器会再次打开。</p><p><img src="/images/image-20210802212254669.png" alt="image-20210802212254669"></p><p>在1.1配置hystrix时，已经有了默认参数的熔断机制，不需要自己额外编写代码。</p><p>在服务提供方的方法上可以改变熔断机制的一些默认参数</p><p>到时候如果要改的话，参照下面<code>@HystrixProperty</code>注解代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findOne/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">        //设置Hystrix的超时时间，默认1s</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;),</span><br><span class="hljs-meta">        //监控时间 默认5000 毫秒</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;5000&quot;),</span><br><span class="hljs-meta">        //失败次数。默认20次</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;20&quot;),</span><br><span class="hljs-meta">        //失败率 默认50%</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;50&quot;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>    <span class="hljs-comment">//如果id == 1 ，则出现异常，id != 1 则正常访问</span><br>    <span class="hljs-keyword">if</span>(id == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//1.造个异常</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>/<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*try &#123;</span><br><span class="hljs-comment">        //2. 休眠2秒</span><br><span class="hljs-comment">        Thread.sleep(2000);</span><br><span class="hljs-comment">    &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">        e.printStackTrace();</span><br><span class="hljs-comment">    &#125;*/</span><br>    Goods goods = goodsService.findOne(id);<br><br>    goods.setTitle(goods.getTitle() + <span class="hljs-string">&quot;:&quot;</span> + port);<span class="hljs-comment">//将端口号，设置到了 商品标题上</span><br>    <span class="hljs-keyword">return</span> goods;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-hystrix熔断监控"><a href="#1-3-hystrix熔断监控" class="headerlink" title="1.3 hystrix熔断监控"></a>1.3 hystrix熔断监控</h2><ul><li><p>Hystrix 提供了 Hystrix-dashboard 功能，用于实时监控微服务运行状态。</p></li><li><p>但是Hystrix-dashboard只能监控一个微服务。</p></li><li><p>Netflix 还提供了 Turbine ，进行聚合监控。</p></li></ul><p>这部分不详细展开了，需要用的时候去查对应博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Feign声明式服务调用</title>
    <link href="/2021/08/01/3.%20Feign/"/>
    <url>/2021/08/01/3.%20Feign/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Feign-概述"><a href="#1-Feign-概述" class="headerlink" title="1. Feign 概述"></a>1. Feign 概述</h1><ul><li>Feign 是一个声明式的 REST 客户端，它用了基于接口的注解方式，很方便实现客户端配置。是简化了 RestTemplate+Ribbon 一个组件</li><li>Feign 最初由 Netflix 公司提供，但不支持SpringMVC注解，后由 SpringCloud 对其封装，支持了SpringMVC注解，让使用者更易于接受。</li></ul><h1 id="2-Feign-快速入门"><a href="#2-Feign-快速入门" class="headerlink" title="2. Feign 快速入门"></a>2. <strong>Feign</strong> <strong>快速入门</strong></h1><p>基础的环境搭好了，主要研究feign的部分。如果想要了解完整过程可以查看本地笔记</p><ol><li><p>在消费端引入 open-feign 依赖 (消费端指的是 Service Consumer)</p><p><img src="/images/image-20210801205806595.png" alt="image-20210801205806595"></p><p><img src="/images/image-20210801211807913.png" alt="image-20210801211807913"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--feign--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写Feign接口调用</p><p>创建包feign用于存放GoodsFeignClient接口</p><p><img src="/images/image-20210801212031590.png" alt="image-20210801212031590"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * feign声明式接口。发起远程调用的。</span><br><span class="hljs-comment"> * 代替了 RestTemplate+Ribbon 的下面两行代码</span><br><span class="hljs-comment"> * String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span><br><span class="hljs-comment"> * Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 定义接口</span><br><span class="hljs-comment"> * 2. 接口上添加注解 <span class="hljs-doctag">@FeignClient</span>,设置value属性为 服务提供者的 应用名称</span><br><span class="hljs-comment"> * 3. 编写调用接口，接口的声明规则 和 提供方接口保持一致。</span><br><span class="hljs-comment"> * 4. 注入该接口对象，调用接口方法完成远程调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@FeignClient(value = &quot;FEIGN-PROVIDER&quot;)</span>  <span class="hljs-comment">//这里的value是provider在注册中心的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在controller类中注入刚定义好的接口，在需要使用其他微服务的地方调用接口中相应的方法</p><p>这里就是在order微服务中调用了goods微服务的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GoodsFeignClient goodsFeignClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span><br><span class="hljs-comment">        // 3. 调用方法</span><br><span class="hljs-comment">        Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        return goods;*/</span><br><br>        Goods goods = goodsFeignClient.findGoodsById(id);<br><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在启动类 添加 @EnableFeignClients 注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 激活DiscoveryClient</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//开启Feign的功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerApp</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ConsumerApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试调用</p><p>输入服务消费方的对应url调用服务提供方的方法</p></li></ol><h1 id="3-Feign-其他功能"><a href="#3-Feign-其他功能" class="headerlink" title="3. Feign 其他功能"></a>3. <strong>Feign</strong> <strong>其他功能</strong></h1><h2 id="3-1-超时设置"><a href="#3-1-超时设置" class="headerlink" title="3.1 超时设置"></a>3.1 超时设置</h2><ul><li><p>Feign 底层依赖于 Ribbon 实现负载均衡和远程调用。</p></li><li><p>Ribbon默认1秒超时。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 设置Ribbon的超时时间</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">1000</span> <span class="hljs-comment"># 连接超时时间 默认1s</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 逻辑处理的超时时间 默认1s</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-2-日志记录"><a href="#3-2-日志记录" class="headerlink" title="3.2 日志记录"></a>3.2 日志记录</h2><ul><li>Feign 只能记录 debug 级别的日志信息</li></ul><p>具体用法先不掌握，需要时去搜相应博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2021/07/30/2.%20RabbitMQ/"/>
    <url>/2021/07/30/2.%20RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1. 消息中间件概述"></a>1. 消息中间件概述</h1><h2 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1 什么是消息中间件"></a>1.1 什么是消息中间件</h2><p>MQ全称为Message Queue（消息队列），消息队列在分布式系统开发中应用非常广泛</p><p>消息队列是应用程序和应用程序之间的通信方法</p><ul><li><p>使用MQ的原因</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong></p></li><li><p>开发中消息队列通常有如下应用场景：</p><ol><li><p>任务<strong>异步</strong>处理</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间</p></li><li><p>应用程序<strong>解耦合</strong></p><p>生产方通过MQ与消费方交互，它将应用程序进行解耦合</p></li><li><p><strong>削峰填谷</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p>如果使用MQ, 消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="/images/image-20210730231412854.png" alt="image-20210730231412854"></p><p>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”</p><img src="/images/image-20210730231500453.png"  style="zoom:80%;" /></li></ol></li></ul><h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2 AMQP 和 JMS"></a>1.2 AMQP 和 JMS</h2><p>实现MQ的大致有两种主流方式：AMQP、JMS</p><ul><li>AMQP（Advanced Message Queue 高级消息队列协议）是一种协议, 直接定义网络交换的数据格式, 不规定实现方式，是跨语言的</li><li>JMS即Java消息服务（JavaMessage Service）是应用程序接口, 必须使用Java语言</li></ul><p>基于这两种方式的消息队列产品</p><ul><li>ActiveMQ：基于JMS</li><li>ZeroMQ：基于C语言开发</li><li><strong>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</strong></li><li>RocketMQ：基于JMS，阿里巴巴产品</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</li></ul><h2 id="1-3-RabbitMQ"><a href="#1-3-RabbitMQ" class="headerlink" title="1.3 RabbitMQ"></a>1.3 RabbitMQ</h2><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了7种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式，Publisher Confirms（远程调用，不太算MQ，暂不作介绍, 用到再去查博客；Publisher Confirms也暂不介绍，有需要再查博客）</p><h1 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2. 安装及配置RabbitMQ"></a>2. 安装及配置RabbitMQ</h1><ol><li><p>在线安装依赖环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz<br></code></pre></td></tr></table></figure></li><li><p>安装Erlang</p><p>首先需要下载一个 <code>erlang-18.3-1.el7.centos.x86_64.rpm </code>文件 (版本根据网上的推荐来选，这个可能有点旧了)，然后进行安装 </p><p>注意：</p><ul><li>这个过程可能会报错，到时候根据错误查看本地文档或者上网查找相关博客来解决</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><p>需要提前把<code>socat-1.7.3.2-5.el7.lux.x86_64.rpm</code>, <code>rabbitmq-server-3.6.5-1.noarch.rpm</code>给下载好。（建议这三个rpm文件下载在一个命名为rabbitmq的文件夹。这里的版本根据需要选择）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm<br></code></pre></td></tr></table></figure><p>到这里就安装完成了</p></li><li><p>然后开启管理界面及配置</p><p>注意：</p><ul><li>第一步如果想要开启管理界面是必须操作的</li><li>第二步如果信息保持默认的话也可以不改，如果需要改相关信息，去网上搜相关博客</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开启管理界面</span><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br><span class="hljs-comment"># 修改默认配置信息, 比如修改密码、配置等等</span><br>vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app <br></code></pre></td></tr></table></figure></li><li><p>启动和关闭</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">service rabbitmq-server start <span class="hljs-comment"># 启动服务</span><br>service rabbitmq-server stop <span class="hljs-comment"># 停止服务</span><br>service rabbitmq-server restart <span class="hljs-comment"># 重启服务</span><br></code></pre></td></tr></table></figure></li></ol><p>RabbitMQ在配置好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码</p><p><img src="/images/image-20210730234122057.png" alt="image-20210730234122057"></p><p>(关于配置虚拟主机和用户这里的知识就先不介绍，需要的话去网上查询详细博客)</p><h1 id="3-AMQP"><a href="#3-AMQP" class="headerlink" title="3. AMQP"></a>3. AMQP</h1><h2 id="3-1-相关概念介绍"><a href="#3-1-相关概念介绍" class="headerlink" title="3.1. 相关概念介绍"></a>3.1. 相关概念介绍</h2><p>AMQP  一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>连接Connection</td><td>一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td>会话Session</td><td>端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td>信道Channel</td><td>多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td>客户端Client</td><td>AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td>服务节点Broker</td><td>消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td>端点</td><td>AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td>消费者Consumer</td><td>一个从消息队列里请求消息的客户端程序。</td></tr><tr><td>生产者Producer</td><td>一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="3-2-RabbitMQ运转流程"><a href="#3-2-RabbitMQ运转流程" class="headerlink" title="3.2 RabbitMQ运转流程"></a>3.2 RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li><p>生产者发送消息</p><ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li><p>消费者接收消息</p><ol><li><p>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</p></li><li><p>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</p></li><li><p>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</p></li><li><p>确认（ack，自动确认）接收到的消息；</p></li><li><p>RabbitMQ从队列中删除相应已经被确认的消息；</p></li><li><p>关闭信道；</p></li><li><p>关闭连接；</p><p><img src="/images/image-20210731135723102.png" alt="image-20210731135723102"></p></li></ol></li></ul><h1 id="4-RabbitMQ入门"><a href="#4-RabbitMQ入门" class="headerlink" title="4. RabbitMQ入门"></a>4. RabbitMQ入门</h1><h2 id="4-1-HelloWorld简单模式"><a href="#4-1-HelloWorld简单模式" class="headerlink" title="4.1 HelloWorld简单模式"></a>4.1 HelloWorld简单模式</h2><p>这个入门工程就是一个<strong>简单模式 HelloWorld</strong></p><ol><li><p>创建工程</p></li><li><p>向pom.xml文件中添加依赖</p><p>注意：</p><ul><li><p>有可能报这个错，如果报了的话再加第二个包</p><p><img src="/images/image-20210730235828100-1627661205170.png" alt="image-20210730235828100"></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-nop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>编写生产者Producer</p><p>注意：</p><ul><li><p>这里的虚拟主机名称不能乱设置，不然可能会报错，rabbitmq默认的是<code>\</code></p><p><img src="/images/image-20210731000917757.png" alt="image-20210731000917757"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;simple_queue&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//主机地址;默认为 localhost</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.200.128&quot;</span>);<br>        <span class="hljs-comment">//连接端口;默认为 5672</span><br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//虚拟主机名称;默认为 /</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//连接用户名；默认为guest</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-comment">//连接密码；默认为guest</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = connectionFactory.newConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">// 要发送的信息</span><br>        String message = <span class="hljs-string">&quot;你好；小兔子！&quot;</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息</p></li></ol><p><img src="/images/image-20210731001205411.png" alt="image-20210731001205411"></p><ol start="4"><li><p>编写消费者</p><p>由于连接部分都是相同的操作，我们把它抽取成工具类ConnectionUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionUtil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//主机地址;默认为 localhost</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.200.128&quot;</span>);<br>        <span class="hljs-comment">//连接端口;默认为 5672</span><br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//虚拟主机名称;默认为 /</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//连接用户名；默认为guest</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-comment">//连接密码；默认为guest</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> connectionFactory.newConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写消息的消费者Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, consumer);<br><br>        <span class="hljs-comment">//不关闭资源，应该一直监听消息</span><br>        <span class="hljs-comment">//channel.close();</span><br>        <span class="hljs-comment">//connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>小结</strong>  </p><p>上述的入门案例中中其实使用的是如下的简单模式：</p><p><img src="/images/image-20210731002649177.png" alt="image-20210731002649177"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h2 id="4-2-Work-queues工作队列模式"><a href="#4-2-Work-queues工作队列模式" class="headerlink" title="4.2 Work queues工作队列模式"></a>4.2 Work queues工作队列模式</h2><p>模式说明</p><p><img src="/images/image-20210731133440033.png" alt="image-20210731133440033"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。(多安排几个消费者去消费生产者的消息)</p><p>代码和简单模式几乎一样，除了要多一个或几个消费者（基础环境和简单模式相同，这里就不赘叙了）：</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;work_queue&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span> ; i++) &#123;<br>            <span class="hljs-comment">//发送信息</span><br>            String message = <span class="hljs-string">&quot;你好；小兔子！work模式--&quot;</span> + i;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">             * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">             * 参数3：消息其它属性</span><br><span class="hljs-comment">             * 参数4：消息内容</span><br><span class="hljs-comment">             */</span><br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-keyword">null</span>, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br>        <span class="hljs-comment">// 创建频道</span><br>       <span class="hljs-keyword">final</span> Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//一次只能接收并处理一个消息</span><br>        channel.basicQos(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//路由key</span><br>                    System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                    <span class="hljs-comment">//交换机</span><br>                    System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                    <span class="hljs-comment">//消息id</span><br>                    System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                    <span class="hljs-comment">//收到的消息</span><br>                    System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>                    <span class="hljs-comment">//确认消息, 这里确认是因为下面没有设置消息自动确认</span><br>                    channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">false</span>, consumer);<br><br>        <span class="hljs-comment">//不关闭资源，应该一直监听消息</span><br>        <span class="hljs-comment">//channel.close();</span><br>        <span class="hljs-comment">//connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        <span class="hljs-keyword">final</span> Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//一次只能接收并处理一个消息</span><br>        channel.basicQos(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//路由key</span><br>                    System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                    <span class="hljs-comment">//交换机</span><br>                    System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                    <span class="hljs-comment">//消息id</span><br>                    System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                    <span class="hljs-comment">//收到的消息</span><br>                    System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>                    <span class="hljs-comment">//确认消息</span><br>                    channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">false</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息</p><p><img src="/images/image-20210731225717102.png" alt="image-20210731225717102"></p><p><img src="/images/image-20210731225747964.png" alt="image-20210731225747964"></p></li></ol><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系</p><h2 id="4-3-Publish-Subscribe发布与订阅模式"><a href="#4-3-Publish-Subscribe发布与订阅模式" class="headerlink" title="4.3 Publish/Subscribe发布与订阅模式"></a>4.3 Publish/Subscribe发布与订阅模式</h2><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列</li></ul><p>而在Publish/Subscribe模型中，多了一个exchange角色，而且过程略有变化：</p><p><img src="/images/image-20210731230311829-1627743833934.png" alt="image-20210731230311829"></p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>Publish/Subscribe模式：</p><ol><li>每个消费者监听自己的队列。</li><li>生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</li></ol><p>代码：</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发布与订阅使用的交换机类型为：fanout</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_EXCHAGE = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_QUEUE_1 = <span class="hljs-string">&quot;fanout_queue_1&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_QUEUE_2 = <span class="hljs-string">&quot;fanout_queue_2&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.queueDeclare(FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br>        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">// 发送信息</span><br>            String message = <span class="hljs-string">&quot;你好；小兔子！发布订阅模式--&quot;</span> + i;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">             * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">             * 参数3：消息其它属性</span><br><span class="hljs-comment">             * 参数4：消息内容</span><br><span class="hljs-comment">             */</span><br>            channel.basicPublish(FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="/images/image-20210731232129945.png" alt="image-20210731232129945"></p></li></ol><p>小结：交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><h2 id="4-4-Routing路由模式"><a href="#4-4-Routing路由模式" class="headerlink" title="4.4. Routing路由模式"></a>4.4. Routing路由模式</h2><p><strong>模式说明</strong></p><p>路由模式特点：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</p><p><img src="/images/image-20210731232559366.png" alt="image-20210731232559366"></p></li></ul><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><p><strong>代码演示</strong></p><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 路由模式的交换机类型为：direct</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_EXCHAGE = <span class="hljs-string">&quot;direct_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_QUEUE_INSERT = <span class="hljs-string">&quot;direct_queue_insert&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_QUEUE_UPDATE = <span class="hljs-string">&quot;direct_queue_update&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>);<br>        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        String message = <span class="hljs-string">&quot;新增了商品。路由模式；routing key 为 insert &quot;</span> ;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;修改了商品。路由模式；routing key 为 update&quot;</span> ;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="/images/image-20210731233707317.png" alt="image-20210731233707317"></p></li></ol><p>小结：Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列</p><h2 id="4-5-Topics通配符模式"><a href="#4-5-Topics通配符模式" class="headerlink" title="4.5 Topics通配符模式"></a>4.5 Topics通配符模式</h2><p><strong>模式说明</strong></p><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>。</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><ul><li><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></li><li><code>item.*</code>：只能匹配<code>item.insert</code></li></ul><p><img src="/images/image-20210731234158546.png" alt="image-20210731234158546"></p><p><strong>代码</strong> </p><ol><li> 生产者</li></ol><p>   本例使用topic类型的Exchange，发送消息的routing key有3种： <code>item.insert</code>、<code>item.update</code>、<code>item.delete</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通配符Topic的交换机类型为：topic</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_EXCHAGE = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_1 = <span class="hljs-string">&quot;topic_queue_1&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_2 = <span class="hljs-string">&quot;topic_queue_2&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、topic、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br><br>        <span class="hljs-comment">// 发送信息</span><br>        String message = <span class="hljs-string">&quot;新增了商品。Topic模式；routing key 为 item.insert &quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.insert&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;修改了商品。Topic模式；routing key 为 item.update&quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.update&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;删除了商品。Topic模式；routing key 为 item.delete&quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.delete&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>消费者1</p><p>接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.update&quot;</span>);<br>        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.delete&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.*&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些routing key可以使用通配符。</p></li></ol><p>小结：</p><ul><li>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code> Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</li></ul><h2 id="4-6-模式总结"><a href="#4-6-模式总结" class="headerlink" title="4.6. 模式总结"></a>4.6. 模式总结</h2><p>RabbitMQ工作模式：<br><strong>1、简单模式 HelloWorld</strong><br>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue</strong><br>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe</strong><br>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><strong>4、路由模式 Routing</strong><br>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic</strong><br>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="5-Spring-Boot整合RabbitMQ"><a href="#5-Spring-Boot整合RabbitMQ" class="headerlink" title="5. Spring Boot整合RabbitMQ"></a>5. Spring Boot整合RabbitMQ</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><p>在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p>一般在开发过程中：</p><ul><li><strong>生产者工程：</strong><ol><li>application.yml文件配置RabbitMQ相关信息；</li><li>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</li><li>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</li></ol></li><li><strong>消费者工程：</strong><ol><li>application.yml文件配置RabbitMQ相关信息</li><li>创建消息处理类，用于接收队列中的消息并进行处理</li></ol></li></ul><h2 id="5-2-搭建生产者工程"><a href="#5-2-搭建生产者工程" class="headerlink" title="5.2 搭建生产者工程"></a>5.2 搭建生产者工程</h2><h3 id="5-2-1-搭建生产者工程"><a href="#5-2-1-搭建生产者工程" class="headerlink" title="5.2.1 搭建生产者工程"></a>5.2.1 搭建生产者工程</h3><p>创建生产者工程springboot-rabbitmq-producer</p><h3 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2 添加依赖"></a>5.2.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--主要就是这个包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-3-启动类"><a href="#5-2-3-启动类" class="headerlink" title="5.2.3. 启动类"></a>5.2.3. 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ProducerApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-4-配置RabbitMQ"><a href="#5-2-4-配置RabbitMQ" class="headerlink" title="5.2.4. 配置RabbitMQ"></a>5.2.4. 配置RabbitMQ</h3><ol><li><p>配置文件</p><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure></li><li><p>绑定交换机和队列</p><p>创建RabbitMQ队列与交换机绑定的配置类com.itheima.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="hljs-string">&quot;item_topic_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ITEM_QUEUE = <span class="hljs-string">&quot;item_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(&quot;itemTopicExchange&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">topicExchange</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(&quot;itemQueue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">itemQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定队列和交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">itemQueueExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     <span class="hljs-meta">@Qualifier(&quot;itemTopicExchange&quot;)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;item.#&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-搭建消费者工程"><a href="#5-3-搭建消费者工程" class="headerlink" title="5.3. 搭建消费者工程"></a>5.3. 搭建消费者工程</h2><h3 id="5-3-1-创建工程"><a href="#5-3-1-创建工程" class="headerlink" title="5.3.1. 创建工程"></a>5.3.1. 创建工程</h3><p>创建消费者工程springboot-rabbitmq-consumer</p><h3 id="5-3-2-添加依赖"><a href="#5-3-2-添加依赖" class="headerlink" title="5.3.2. 添加依赖"></a>5.3.2. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--只用添加这个和消息中间件RabbitMQ有关的包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-3-配置RabbitMQ"><a href="#5-3-3-配置RabbitMQ" class="headerlink" title="5.3.3 配置RabbitMQ"></a>5.3.3 配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><p>注意：</p><ul><li>消费者和生产者的配置文件是一样的</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><h3 id="5-3-4-启动类"><a href="#5-3-4-启动类" class="headerlink" title="5.3.4 启动类"></a>5.3.4 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ConsumerApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-5-消息监听处理类"><a href="#5-3-5-消息监听处理类" class="headerlink" title="5.3.5 消息监听处理类"></a>5.3.5 消息监听处理类</h3><p>编写消息监听器com.itheima.rabbitmq.listener.MyListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListener</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听某个队列的消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 接收到的消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;item_queue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myListener1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到的消息为：&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后进行测试</p><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.insert&quot;</span>, <span class="hljs-string">&quot;商品新增，routing key 为item.insert&quot;</span>);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.update&quot;</span>, <span class="hljs-string">&quot;商品修改，routing key 为item.update&quot;</span>);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.delete&quot;</span>, <span class="hljs-string">&quot;商品删除，routing key 为item.delete&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第五部分</title>
    <link href="/2021/07/29/1.5%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/29/1.5%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part12-分布式事务解决方案"><a href="#Part12-分布式事务解决方案" class="headerlink" title="Part12 分布式事务解决方案"></a>Part12 分布式事务解决方案</h1><h2 id="1-分布式事务解决方案"><a href="#1-分布式事务解决方案" class="headerlink" title="1. 分布式事务解决方案"></a>1. 分布式事务解决方案</h2><p>刚才我们编写的扣减库存与保存订单是在两个服务中存在的，如果扣减库存后订单保存失败了是不会回滚的，这样就会造成数据不一致的情况，这其实就是我们所说的分布式事务的问题，接下来我们来学习分布式事务的解决方案。</p><h3 id="1-1-本地事务与分布式事务"><a href="#1-1-本地事务与分布式事务" class="headerlink" title="1.1 本地事务与分布式事务"></a>1.1 本地事务与分布式事务</h3><h4 id="1-1-1-事务"><a href="#1-1-1-事务" class="headerlink" title="1.1.1 事务"></a>1.1.1 事务</h4><p>数据库事务(简称：事务，Transaction)是指数据库执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p><p>事务拥有以下四个特性，习惯上被称为ACID特性：</p><ol><li>原子性(Atomicity)：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性(Consistency)：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态是指数据库中的数据应满足完整性约束。除此之外，一致性还有另外一层语义，就是事务的中间状态不能被观察到(这层语义也有说应该属于原子性)</li><li>隔离性(Isolation)：多个事务并发执行时，一个事务的执行不应影响其他事务的执行，如同只有这一个操作在被数据库所执行一样</li><li>持久性(Durability)：已被提交的事务对数据库的修改应该永久保存在数据库中。在事务结束时，此操作将不可逆转</li></ol><h4 id="1-1-2-本地事务"><a href="#1-1-2-本地事务" class="headerlink" title="1.1.2 本地事务"></a>1.1.2 本地事务</h4><p>起初，事务仅限于对单一数据库资源的访问控制,架构服务化以后，事务的概念延伸到了服务中。倘若将一个单一的服务操作作为一个事务，那么整个服务操作只能涉及一个单一的数据库资源,这类基于单个服务单一数据库资源访问的事务，被称为本地事务(Local Transaction)。</p><p><img src="/images/image-20210808153508886.png" alt="image-20210808153508886"></p><h4 id="1-1-3-分布式事务"><a href="#1-1-3-分布式事务" class="headerlink" title="1.1.3 分布式事务"></a>1.1.3 分布式事务</h4><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点之上,且属于不同的应用，分布式事务需要保证这些操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p><p>最早的分布式事务应用架构很简单，不涉及服务间的访问调用，仅仅是服务内操作涉及到对多个数据库资源的访问。</p><p><img src="/images/image-20210808153651910.png" alt="image-20210808153651910"></p><p>当一个服务操作访问不同的数据库资源，又希望对它们的访问具有事务特性时，就需要采用分布式事务来协调所有的事务参与者。</p><p>对于上面介绍的分布式事务应用架构，尽管一个服务操作会访问多个数据库资源，但是毕竟整个事务还是控制在单一服务的内部。如果一个服务操作需要调用另外一个服务，这时的事务就需要跨越多个服务了。在这种情况下，起始于某个服务的事务在调用另外一个服务的时候，需要以某种机制流转到另外一个服务，从而使被调用的服务访问的资源也自动加入到该事务当中来。下图反映了这样一个跨越多个服务的分布式事务：</p><p><img src="/images/image-20210808153833411.png" alt="image-20210808153833411"></p><p>如果将上面这两种场景(一个服务可以调用多个数据库资源，也可以调用其他服务)结合在一起，对此进行延伸，整个分布式事务的参与者将会组成如下图所示的树形拓扑结构。在一个跨服务的分布式事务中，事务的发起者和提交均系同一个，它可以是整个调用的客户端，也可以是客户端最先调用的那个服务。</p><p><img src="/images/image-20210808154127517.png" alt="image-20210808154127517"></p><p>较之基于单一数据库资源访问的本地事务，分布式事务的应用架构更为复杂。在不同的分布式应用架构下，实现一个分布式事务要考虑的问题并不完全一样，比如对多资源的协调、事务的跨服务传播等，实现机制也是复杂多变。</p><h3 id="1-2-分布式事务相关理论"><a href="#1-2-分布式事务相关理论" class="headerlink" title="1.2 分布式事务相关理论"></a>1.2 分布式事务相关理论</h3><h4 id="1-2-1-CAP定理"><a href="#1-2-1-CAP定理" class="headerlink" title="1.2.1 CAP定理"></a>1.2.1 CAP定理</h4><p><img src="/images/image-20210808154429381.png" alt="image-20210808154429381"></p><p>CAP定理是在 1998年加州大学的计算机科学家 Eric Brewer （埃里克.布鲁尔）提出，分布式系统有三个指标:</p><ol><li>Consistency (一致性)</li><li>Availability (可用性)</li><li>Partition tolerance(分区容错性)</li></ol><p>它们的第一个字母分别是 C、A、P。Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p><p><strong>分区容错 Partition tolerance</strong></p><p>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。</p><p><img src="/images/image-20210808154756029.png" alt="image-20210808154756029"></p><p>上图中，G1 和 G2 是两台跨区的服务器。G1 向 G2 发送一条消息，G2 可能无法收到。系统设计的时候，必须考虑到这种情况。</p><p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，剩下的 C 和 A 无法同时做到。</p><p><strong>可用性 Availability</strong></p><p>Availability 中文叫做”可用性”，意思是只要收到用户的请求，服务器就必须给出回应。</p><p>用户可以选择向 G1 或 G2 发起读操作。不管是哪台服务器，只要收到请求，就必须告诉用户，到底是 v0 还是 v1，否则就不满足可用性。</p><p><img src="/images/image-20210808155159592.png" alt="image-20210808155159592"></p><p><strong>一致性 Consistency</strong></p><p>Consistency 中文叫做”一致性”。意思是，写操作之后的读操作，必须返回该值。</p><p>举例来说，某条记录是 v0，用户向 G1 发起一个写操作，将其改为 v1。</p><p><img src="/images/image-20210808155400246.png" alt="image-20210808155400246"></p><p>问题是，用户有可能向 G2 发起读操作，由于 G2 的值没有发生变化，因此返回的是 v0。G1 和 G2 读操作的结果不一致，这就不满足一致性了。</p><p><img src="/images/image-20210808155459722.png" alt="image-20210808155459722"></p><p>为了让 G2 也能变为 v1，就要在 G1 写操作的时候，让 G1 向 G2 发送一条消息，要求 G2 也改成 v1。</p><p><img src="/images/image-20210808155553113.png" alt="image-20210808155553113"></p><p><strong>一致性和可用性的矛盾</strong></p><p>一致性和可用性，为什么不可能同时成立？答案很简单，因为可能通信失败（即出现分区容错）。</p><p>如果保证 G2 的一致性，那么 G1 必须在写操作时，锁定 G2 的读操作和写操作。只有数据同步后，才能重新开放读写。锁定期间，G2 不能读写，没有可用性。</p><p>如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。</p><p>综上所述，G2 无法同时做到一致性和可用性。系统设计时只能选择一个目标。如果追求一致性，那么无法保证所有节点的可用性；如果追求所有节点的可用性，那就没法做到一致性。</p><h4 id="1-2-2-BASE理论"><a href="#1-2-2-BASE理论" class="headerlink" title="1.2.2 BASE理论"></a>1.2.2 BASE理论</h4><p>BASE全称：Basically Available(基本可用)，Soft state（软状态）,和 Eventually consistent（最终一致性）三个短语的缩写，来自 ebay 的架构师提出。BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于 CAP 定理逐步演化而来的。其核心思想是：</p><ul><li>既是无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</li></ul><p><strong>Basically Available(基本可用)</strong></p><p>什么是基本可用呢？假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：</p><ol><li>响应时间上的损失：正常情况下的搜索引擎 0.5 秒即返回给用户结果，而<strong>基本可用</strong>的搜索引擎可以在 1 秒作用返回结果。</li><li>功能上的损失：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单，但是到了大促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。</li></ol><p><strong>Soft state(软状态)</strong></p><p>什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。</p><p>软状态指的是：允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。</p><p><strong>Eventually consistent(最终一致性)</strong></p><p>系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取到最新的值</p><h3 id="1-3-分布式事务解决方案"><a href="#1-3-分布式事务解决方案" class="headerlink" title="1.3 分布式事务解决方案"></a>1.3 分布式事务解决方案</h3><p>下面介绍了三种：</p><ol><li>基于XA协议的两阶段提交 2PC</li><li>TCC补偿机制</li><li>消息最终一致性（比较常用）</li></ol><h4 id="1-3-1-基于XA协议的两阶段提交-2PC"><a href="#1-3-1-基于XA协议的两阶段提交-2PC" class="headerlink" title="1.3.1 基于XA协议的两阶段提交 2PC"></a>1.3.1 基于XA协议的两阶段提交 2PC</h4><p>首先我们来简要看下分布式事务处理的XA规范 ：</p><p><img src="/images/image-20210808162019064.png" alt="image-20210808162019064"></p><p>可知XA规范中分布式事务有AP，RM，TM组成：</p><ul><li>其中应用程序(Application Program ，简称AP)：AP定义事务边界（定义事务开始和结束）并访问事务边界内的资源。</li><li>资源管理器(Resource Manager，简称RM)：Rm管理计算机共享的资源，许多软件都可以去访问这些资源，资源包含比如数据库、文件系统、打印机服务器等。</li><li>事务管理器(Transaction Manager ，简称TM)：负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</li></ul><p><strong>二阶段协议</strong></p><p><strong>第一阶段</strong>TM要求所有的RM准备提交对应的事务分支，询问RM是否有能力保证成功的提交事务分支，RM根据自己的情况，如果判断自己进行的工作可以被提交，那就对工作内容进行持久化，并给TM回执OK；否者给TM的回执NO。RM在发送了否定答复并回滚了已经完成的工作后，就可以丢弃这个事务分支信息了。</p><p><strong>第二阶段</strong>TM根据阶段1各个RM prepare的结果，决定是提交还是回滚事务。如果所有的RM都prepare成功，那么TM通知所有的RM进行提交；如果有RM prepare回执NO的话，则TM通知所有RM回滚自己的事务分支。</p><p><strong>优点：</strong> 尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能100%保证强一致）</p><p><strong>缺点：</strong> 实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景。</p><h4 id="1-3-2-TCC补偿机制"><a href="#1-3-2-TCC补偿机制" class="headerlink" title="1.3.2 TCC补偿机制"></a>1.3.2 TCC补偿机制</h4><p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p><ol><li><p>Try 阶段主要是对业务系统做检测及资源预留</p></li><li><p>Confirm 阶段主要是对业务系统做确认提交，Try阶段执行成功并开始执行 Confirm阶段时，默认 Confirm阶段是不会出错的。即：只要Try成功，Confirm一定成功。</p></li><li><p>Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</p><p><img src="/images/image-20210808163206446.png" alt="image-20210808163206446"></p></li></ol><p>例如： A要向 B 转账，思路大概是：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less">我们有一个本地方法，里面依次调用 <br><span class="hljs-selector-tag">1</span>、首先在 <span class="hljs-selector-tag">Try</span> 阶段，要先调用远程接口把 <span class="hljs-selector-tag">B</span>和 <span class="hljs-selector-tag">A</span>的钱给冻结起来。 <br><span class="hljs-selector-tag">2</span>、在 <span class="hljs-selector-tag">Confirm</span> 阶段，执行远程调用的转账的操作，转账成功进行解冻。 <br><span class="hljs-selector-tag">3</span>、如果第<span class="hljs-selector-tag">2</span>步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。<br></code></pre></td></tr></table></figure><p><strong>优点：</strong> 相比两阶段提交，可用性比较强</p><p><strong>缺点：</strong> 数据的一致性要差一些。TCC属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用TCC不太好定义及处理。</p><h4 id="1-3-3-消息最终一致性"><a href="#1-3-3-消息最终一致性" class="headerlink" title="1.3.3 消息最终一致性"></a>1.3.3 消息最终一致性</h4><p>消息最终一致性应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：</p><p><img src="/images/image-20210808163618176.png" alt="image-20210808163618176"></p><p>基本思路就是：</p><p>消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。</p><p>消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。</p><p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p><p><strong>优点：</strong> 一种非常经典的实现，避免了分布式事务，实现了最终一致性。</p><p><strong>缺点：</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p><h2 id="2-基于Seata实现分布式事务"><a href="#2-基于Seata实现分布式事务" class="headerlink" title="2. 基于Seata实现分布式事务"></a>2. 基于Seata实现分布式事务</h2><h3 id="2-1-Seata简介"><a href="#2-1-Seata简介" class="headerlink" title="2.1 Seata简介"></a>2.1 Seata简介</h3><p>Seata（原名Fescar） 是阿里18年开源的分布式事务的框架。Fescar的开源对分布式事务框架领域影响很大。作为开源大户，Fescar来自阿里的GTS，经历了好几次双十一的考验，一经开源便颇受关注。后来Fescar改名为Seata。</p><p>Fescar虽然是二阶段提交协议的分布式事务，但是其解决了XA的一些缺点:</p><ul><li>单点问题</li><li>同步阻塞:Fescar的二阶段，其再第一阶段的时候本地事务就已经提交释放资源了，不会像XA会再两个prepare和commit阶段资源都锁住，并且Fescar,commit是异步操作，也是提升性能的一大关键。</li><li>数据不一致:如果出现部分commit失败，那么fescar-server会根据当前的事务模式和分支事务的返回状态的结果来进行不同的重试策略。并且fescar的本地事务会在一阶段的时候进行提交，其实单看数据库来说在commit的时候数据库已经是一致的了。</li><li>只能用于单一数据库: Fescar提供了两种模式，AT和MT。在AT模式下事务资源可以是任何支持ACID的数据库，在MT模式下事务资源没有限制，可以是缓存，可以是文件，可以是其他的等等。当然这两个模式也可以混用。</li></ul><p>同时Fescar也保留了接近0业务入侵的优点，只需要简单的配置Fescar的数据代理和加个注解，加一个Undolog表，就可以达到我们想要的目的。</p><h3 id="2-2-实现原理"><a href="#2-2-实现原理" class="headerlink" title="2.2 实现原理"></a>2.2 实现原理</h3><p>Fescar将一个本地事务做为一个分布式事务分支，所以若干个分布在不同微服务中的本地事务共同组成了一个全局事务，结构如下。</p><p><img src="/images/image-20210808170047659.png" alt="image-20210808170047659"></p><p><strong>Transaction Coordinator (TC)：</strong> 事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚。</p><p><strong>Transaction Manager (TM)：</strong>事务管理器， 控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议。</p><p><strong>Resource Manager (RM)：</strong>资源管理器， 控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚。</p><p>一个典型的分布式事务过程：</p><ol><li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID</li><li>XID 在微服务调用链路的上下文中传播</li><li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖</li><li>TM 向 TC 发起针对 XID 的全局提交或回滚决议</li><li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求</li></ol><h3 id="2-3-Fescar模式"><a href="#2-3-Fescar模式" class="headerlink" title="2.3 Fescar模式"></a>2.3 Fescar模式</h3><p>Fescar对分布式事务的实现提供了3种模式，AT模式、MT模式和混合模式：</p><h4 id="2-3-1-AT模式"><a href="#2-3-1-AT模式" class="headerlink" title="2.3.1 AT模式"></a>2.3.1 AT模式</h4><p>业务逻辑不需要关注事务机制，分支与全局事务的交互过程自动进行。</p><p><strong>AT模式</strong>：主要关注多 DB 访问的数据一致性，实现起来比较简单，对业务的侵入较小。</p><p>AT模式部分代码如下：不需要关注执行状态，对业务代码侵入较小。类似代码如下，只需要为方法添加<code>@GlobalTransactional</code>注解即可。</p><p>AT模式的核心是对业务无侵入，是一种改进后的两阶段提交，其设计思路如图：</p><p><strong>第一阶段：</strong></p><p><img src="/images/image-20210808171613070.png" alt="image-20210808171613070"></p><p>核心在于对业务sql进行解析，转换成undolog，两阶段提交往往对资源的锁定需要持续到第二阶段实际的提交或者回滚操作，而有了回滚日志之后，可以在第一阶段释放对资源的锁定，降低了锁范围，提高效率，即使第二阶段发生异常需要回滚，只需找对undolog中对应数据并反解析成sql来达到回滚目的。Seata通过代理数据源将业务sql的执行解析成undolog来与业务数据的更新同时入库，达到了对业务无侵入的效果。</p><p><strong>第二阶段：</strong></p><p>如果决议是全局提交，此时分支事务此时已经完成提交，不需要同步协调处理（只需要异步清理回滚日志），Phase2 可以非常快速地完成。</p><p><img src="/images/image-20210808172343299.png" alt="image-20210808172343299"></p><p>如果决议是全局回滚，RM 收到协调器发来的回滚请求，通过 XID 和 Branch ID 找到相应的回滚日志记录，通过回滚记录生成反向的更新 SQL 并执行，以完成分支的回滚。</p><p><img src="/images/image-20210808172427714.png" alt="image-20210808172427714"></p><h4 id="2-3-2-MT模式"><a href="#2-3-2-MT模式" class="headerlink" title="2.3.2 MT模式"></a>2.3.2 MT模式</h4><p>业务逻辑需要被分解为 Prepare/Commit/Rollback 3 部分，形成一个 MT 分支，加入全局事务。</p><p><img src="/images/image-20210808172713861.png" alt="image-20210808172713861"></p><p>MT 模式一方面是 AT 模式的补充。另外，更重要的价值在于，通过 MT 模式可以把众多非事务性资源纳入全局事务的管理中</p><h4 id="2-3-3-混合模式"><a href="#2-3-3-混合模式" class="headerlink" title="2.3.3 混合模式"></a>2.3.3 混合模式</h4><p>因为 AT 和 MT 模式的分支从根本上行为模式是一致的，所以可以完全兼容，即，一个全局事务中，可以同时存在 AT 和 MT 的分支。这样就可以达到全面覆盖业务场景的目的：AT 模式可以支持的，使用 AT 模式；AT 模式暂时支持不了的，用 MT 模式来替代。另外，自然的，MT 模式管理的非事务性资源也可以和支持事务的关系型数据库资源一起，纳入同一个分布式事务的管理中。</p><h3 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h3><h4 id="2-4-1-分布式事务公共模块"><a href="#2-4-1-分布式事务公共模块" class="headerlink" title="2.4.1 分布式事务公共模块"></a>2.4.1 分布式事务公共模块</h4><ol><li><p>创建工程 changgou_common_fescar（不是在changgou_common这个工程下创建的，是在changgou_parent下创建的），引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fescar.version</span>&gt;</span>0.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">fescar.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fescar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fescar-tm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fescar.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.fescar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fescar-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fescar.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将<code>fescar配置文件</code>文件夹中的所有配置文件拷贝到resources工程下，如下图：</p><p><img src="/images/image-20210808194328959.png" alt="image-20210808194328959"></p><p>注意file.conf的2个配置。service.vgroup_mapping.my_test_tx_group 映射到相应的 Fescar-Server 集群名称，然后再根据集群名称.grouplist 获取到可用服务列表。</p><p><img src="/images/image-20210808194511402.png" alt="image-20210808194511402"></p></li><li><p>创建FescarRMRequestFilter，给每个线程绑定一个XID （资源提供）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FescarRMRequestFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OncePerRequestFilter</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = org.slf4j.LoggerFactory.getLogger( FescarRMRequestFilter.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给每次线程请求绑定一个XID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filterChain</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String currentXID = request.getHeader( FescarAutoConfiguration.FESCAR_XID);<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(currentXID))&#123;<br>            RootContext.bind(currentXID);<br>            LOGGER.info(<span class="hljs-string">&quot;当前线程绑定的XID :&quot;</span> + currentXID);<br>        &#125;<br>        <span class="hljs-keyword">try</span>&#123;<br>            filterChain.doFilter(request, response);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            String unbindXID = RootContext.unbind();<br>            <span class="hljs-keyword">if</span>(unbindXID != <span class="hljs-keyword">null</span>)&#123;<br>                LOGGER.info(<span class="hljs-string">&quot;当前线程从指定XID中解绑 XID :&quot;</span> + unbindXID);<br>                <span class="hljs-keyword">if</span>(!currentXID.equals(unbindXID))&#123;<br>                    LOGGER.info(<span class="hljs-string">&quot;当前线程的XID发生变更&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(currentXID != <span class="hljs-keyword">null</span>)&#123;<br>                LOGGER.info(<span class="hljs-string">&quot;当前线程的XID发生变更&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建FescarRestInterceptor过滤器，每次请求其他微服务的时候，都将XID携带过去。(Feign拦截器)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FescarRestInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RequestInterceptor</span>, <span class="hljs-title">ClientHttpRequestInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> </span>&#123;<br>        String xid = RootContext.getXID();<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(xid))&#123;<br>            requestTemplate.header( FescarAutoConfiguration.FESCAR_XID, xid);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ClientHttpResponse <span class="hljs-title">intercept</span><span class="hljs-params">(HttpRequest request, <span class="hljs-keyword">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String xid = RootContext.getXID();<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(xid))&#123;<br>            HttpHeaders headers = request.getHeaders();<br>            headers.put( FescarAutoConfiguration.FESCAR_XID, Collections.singletonList(xid));<br>        &#125;<br>        <span class="hljs-keyword">return</span> execution.execute(request, body);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建FescarAutoConfiguration类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FescarAutoConfiguration</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FESCAR_XID = <span class="hljs-string">&quot;fescarXID&quot;</span>;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 创建代理数据库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> environment</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">(Environment environment)</span></span>&#123;<br>        DruidDataSource dataSource = <span class="hljs-keyword">new</span> DruidDataSource();<br>        dataSource.setUrl(environment.getProperty(<span class="hljs-string">&quot;spring.datasource.url&quot;</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>            dataSource.setDriver(DriverManager.getDriver(environment.getProperty(<span class="hljs-string">&quot;spring.datasource.url&quot;</span>)));<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;can&#x27;t recognize dataSource Driver&quot;</span>);<br>        &#125;<br>        dataSource.setUsername(environment.getProperty(<span class="hljs-string">&quot;spring.datasource.username&quot;</span>));<br>        dataSource.setPassword(environment.getProperty(<span class="hljs-string">&quot;spring.datasource.password&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DataSourceProxy(dataSource);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 全局事务扫描器</span><br><span class="hljs-comment">     * 用来解析带有<span class="hljs-doctag">@GlobalTransactional</span>注解的方法，然后采用AOP的机制控制事务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> environment</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> GlobalTransactionScanner <span class="hljs-title">globalTransactionScanner</span><span class="hljs-params">(Environment environment)</span></span>&#123;<br>        String applicationName = environment.getProperty(<span class="hljs-string">&quot;spring.application.name&quot;</span>);<br>        String groupName = environment.getProperty(<span class="hljs-string">&quot;fescar.group.name&quot;</span>);<br>        <span class="hljs-keyword">if</span>(applicationName == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GlobalTransactionScanner(groupName == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;my_test_tx_group&quot;</span> : groupName);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> GlobalTransactionScanner(applicationName, groupName == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;my_test_tx_group&quot;</span> : groupName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 每次微服务和微服务之间相互调用</span><br><span class="hljs-comment">     * 要想控制全局事务，每次TM都会请求TC生成一个XID，每次执行下一个事务，也就是调用其他微服务的时候都需要将该XID传递过去</span><br><span class="hljs-comment">     * 所以我们可以每次请求的时候，都获取头中的XID，并将XID传递到下一个微服务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> restTemplates</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ConditionalOnBean(&#123;RestTemplate.class&#125;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">addFescarInterceptor</span><span class="hljs-params">(Collection&lt;RestTemplate&gt; restTemplates)</span></span>&#123;<br>        restTemplates.stream()<br>                .forEach(restTemplate -&gt; &#123;<br>                    List&lt;ClientHttpRequestInterceptor&gt; interceptors = restTemplate.getInterceptors();<br>                    <span class="hljs-keyword">if</span>(interceptors != <span class="hljs-keyword">null</span>)&#123;<br>                        interceptors.add(fescarRestInterceptor());<br>                    &#125;<br>                &#125;);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Object();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FescarRMRequestFilter <span class="hljs-title">fescarRMRequestFilter</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FescarRMRequestFilter();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FescarRestInterceptor <span class="hljs-title">fescarRestInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FescarRestInterceptor();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-4-2-分布式事物的实现"><a href="#2-4-2-分布式事物的实现" class="headerlink" title="2.4.2 分布式事物的实现"></a>2.4.2 分布式事物的实现</h4><ol><li><p>涉及到分布式事务的数据库添加表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `undo_log` (<br>  `id` bigint(20) NOT NULL AUTO_INCREMENT,<br>  `branch_id` bigint(20) NOT NULL,<br>  `xid` varchar(100) NOT NULL,<br>  `rollback_info` longblob NOT NULL,<br>  `log_status` int(11) NOT NULL,<br>  `log_created` datetime NOT NULL,<br>  `log_modified` datetime NOT NULL,<br>  `ext` varchar(100) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `idx_unionkey` (`xid`,`branch_id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>核心在于对业务sql进行解析，转换成undolog, 所以只要支持Fescar分布式事务的微服务数据都需要导入该表结构</p></li><li><p>需要添加分布式事务的微服务（<strong>商品微服务、订单微服务</strong>）添加对 changgou_transaction_fescar的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--fescar依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common_fescar<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在订单微服务的OrderServiceImpl的add方法上增加@GlobalTransactional(name = “order_add”)注解</p><p><code>@GlobalTransactional(name = &quot;order_add&quot;)</code>表明这个全局注解的名称是order_add</p></li><li><p>启动Fescar-server</p><p><img src="/images/image-20210808195409252.png" alt="image-20210808195409252"></p></li><li><p>测试</p><ol><li>功能测试，看功能能否正常执行。</li><li>异常测试，我们在方法中添加<code>int x=1/0</code> ，看库存信息是否能够回滚。</li></ol></li></ol><h2 id="3-基于消息队列实现分布式事务"><a href="#3-基于消息队列实现分布式事务" class="headerlink" title="3. 基于消息队列实现分布式事务"></a>3. 基于消息队列实现分布式事务</h2><p><img src="/images/image-20210808195747681.png" alt="image-20210808195747681"></p><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><ol><li><p>changgou_order库新增数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS `tb_task`;<br>CREATE TABLE `tb_task` (<br>  `id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT &#x27;任务id&#x27;,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  `delete_time` datetime DEFAULT NULL,<br>  `task_type` varchar(32) DEFAULT NULL COMMENT &#x27;任务类型&#x27;,<br>  `mq_exchange` varchar(64) DEFAULT NULL COMMENT &#x27;交换机名称&#x27;,<br>  `mq_routingkey` varchar(64) DEFAULT NULL COMMENT &#x27;routingkey&#x27;,<br>  `request_body` varchar(512) DEFAULT NULL COMMENT &#x27;任务请求的内容&#x27;,<br>  `status` varchar(32) DEFAULT NULL COMMENT &#x27;任务状态&#x27;,<br>  `errormsg` varchar(512) DEFAULT NULL COMMENT &#x27;任务错误信息&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS `tb_task_his`;<br>CREATE TABLE `tb_task_his` (<br>  `id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT &#x27;任务id&#x27;,<br>  `create_time` datetime DEFAULT NULL,<br>  `update_time` datetime DEFAULT NULL,<br>  `delete_time` datetime DEFAULT NULL,<br>  `task_type` varchar(32) DEFAULT NULL COMMENT &#x27;任务类型&#x27;,<br>  `mq_exchange` varchar(64) DEFAULT NULL COMMENT &#x27;交换机名称&#x27;,<br>  `mq_routingkey` varchar(64) DEFAULT NULL COMMENT &#x27;routingkey&#x27;,<br>  `request_body` varchar(512) DEFAULT NULL COMMENT &#x27;任务请求的内容&#x27;,<br>  `status` varchar(32) DEFAULT NULL COMMENT &#x27;任务状态&#x27;,<br>  `errormsg` varchar(512) DEFAULT NULL,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_order_api添加相关实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(name = &quot;tb_task&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Column(name = &quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;update_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;delete_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date deleteTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;task_type&quot;)</span><br>    <span class="hljs-keyword">private</span> String taskType;<br><br>    <span class="hljs-meta">@Column(name = &quot;mq_exchange&quot;)</span><br>    <span class="hljs-keyword">private</span> String mqExchange;<br><br>    <span class="hljs-meta">@Column(name = &quot;mq_routingkey&quot;)</span><br>    <span class="hljs-keyword">private</span> String mqRoutingkey;<br><br>    <span class="hljs-meta">@Column(name = &quot;request_body&quot;)</span><br>    <span class="hljs-keyword">private</span> String requestBody;<br><br>    <span class="hljs-meta">@Column(name = &quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-meta">@Column(name = &quot;errormsg&quot;)</span><br>    <span class="hljs-keyword">private</span> String errormsg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreateTime</span><span class="hljs-params">(Date createTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createTime = createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getUpdateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> updateTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUpdateTime</span><span class="hljs-params">(Date updateTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.updateTime = updateTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getDeleteTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deleteTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDeleteTime</span><span class="hljs-params">(Date deleteTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.deleteTime = deleteTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTaskType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> taskType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTaskType</span><span class="hljs-params">(String taskType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.taskType = taskType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMqExchange</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mqExchange;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMqExchange</span><span class="hljs-params">(String mqExchange)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mqExchange = mqExchange;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMqRoutingkey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mqRoutingkey;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMqRoutingkey</span><span class="hljs-params">(String mqRoutingkey)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mqRoutingkey = mqRoutingkey;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRequestBody</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> requestBody;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRequestBody</span><span class="hljs-params">(String requestBody)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.requestBody = requestBody;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getErrormsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> errormsg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setErrormsg</span><span class="hljs-params">(String errormsg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.errormsg = errormsg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(name = &quot;tb_task_his&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskHis</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Column(name = &quot;create_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;update_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;delete_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Date deleteTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;task_type&quot;)</span><br>    <span class="hljs-keyword">private</span> String taskType;<br><br>    <span class="hljs-meta">@Column(name = &quot;mq_exchange&quot;)</span><br>    <span class="hljs-keyword">private</span> String mqExchange;<br><br>    <span class="hljs-meta">@Column(name = &quot;mq_routingkey&quot;)</span><br>    <span class="hljs-keyword">private</span> String mqRoutingkey;<br><br>    <span class="hljs-meta">@Column(name = &quot;request_body&quot;)</span><br>    <span class="hljs-keyword">private</span> String requestBody;<br><br>    <span class="hljs-meta">@Column(name = &quot;status&quot;)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-meta">@Column(name = &quot;errormsg&quot;)</span><br>    <span class="hljs-keyword">private</span> String errormsg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getCreateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreateTime</span><span class="hljs-params">(Date createTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createTime = createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getUpdateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> updateTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUpdateTime</span><span class="hljs-params">(Date updateTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.updateTime = updateTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getDeleteTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> deleteTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDeleteTime</span><span class="hljs-params">(Date deleteTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.deleteTime = deleteTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTaskType</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> taskType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTaskType</span><span class="hljs-params">(String taskType)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.taskType = taskType;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMqExchange</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mqExchange;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMqExchange</span><span class="hljs-params">(String mqExchange)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mqExchange = mqExchange;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMqRoutingkey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> mqRoutingkey;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMqRoutingkey</span><span class="hljs-params">(String mqRoutingkey)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mqRoutingkey = mqRoutingkey;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getRequestBody</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> requestBody;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRequestBody</span><span class="hljs-params">(String requestBody)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.requestBody = requestBody;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getStatus</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(String status)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getErrormsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> errormsg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setErrormsg</span><span class="hljs-params">(String errormsg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.errormsg = errormsg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_user新增积分日志表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE IF EXISTS `tb_point_log`;<br>CREATE TABLE `tb_point_log` (<br>  `order_id` varchar(200) NOT NULL,<br>  `user_id` varchar(200) NOT NULL,<br>  `point` int(11) NOT NULL,<br>  PRIMARY KEY (`order_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_user_api添加实体类 PointLog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(name = &quot;tb_point_log&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PointLog</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String orderId;<br>    <span class="hljs-keyword">private</span> String userId;<br>    <span class="hljs-keyword">private</span> Integer point;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getOrderId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> orderId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrderId</span><span class="hljs-params">(String orderId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.orderId = orderId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUserId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserId</span><span class="hljs-params">(String userId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getPoint</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> point;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPoint</span><span class="hljs-params">(Integer point)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.point = point;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_order添加rabbitMQ配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//添加积分任务交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EX_BUYING_ADDPOINTUSER = <span class="hljs-string">&quot;ex_buying_addpointuser&quot;</span>;<br><br>    <span class="hljs-comment">//添加积分消息队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_ADDPOINT = <span class="hljs-string">&quot;cg_buying_addpoint&quot;</span>;<br><br>    <span class="hljs-comment">//完成添加积分消息队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_FINISHADDPOINT = <span class="hljs-string">&quot;cg_buying_finishaddpoint&quot;</span>;<br><br>    <span class="hljs-comment">//添加积分路由key</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_ADDPOINT_KEY = <span class="hljs-string">&quot;addpoint&quot;</span>;<br><br>    <span class="hljs-comment">//完成添加积分路由key</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_FINISHADDPOINT_KEY = <span class="hljs-string">&quot;finishaddpoint&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(EX_BUYING_ADDPOINTUSER)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">EX_BUYING_ADDPOINTUSER</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.directExchange(EX_BUYING_ADDPOINTUSER).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(CG_BUYING_ADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">CG_BUYING_ADDPOINT</span><span class="hljs-params">()</span></span>&#123;<br>        Queue queue = <span class="hljs-keyword">new</span> Queue(CG_BUYING_ADDPOINT);<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br>    <span class="hljs-meta">@Bean(CG_BUYING_FINISHADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">CG_BUYING_FINISHADDPOINT</span><span class="hljs-params">()</span></span>&#123;<br>        Queue queue = <span class="hljs-keyword">new</span> Queue(CG_BUYING_FINISHADDPOINT);<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_CG_BUYING_ADDPOINT</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(CG_BUYING_ADDPOINT)</span> Queue queue,<span class="hljs-meta">@Qualifier(EX_BUYING_ADDPOINTUSER)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(CG_BUYING_ADDPOINT_KEY).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_CG_BUYING_FINISHADDPOINT</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(CG_BUYING_FINISHADDPOINT)</span> Queue queue,<span class="hljs-meta">@Qualifier(EX_BUYING_ADDPOINTUSER)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(CG_BUYING_FINISHADDPOINT_KEY).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-订单服务添加任务并发送"><a href="#3-2-订单服务添加任务并发送" class="headerlink" title="3.2 订单服务添加任务并发送"></a>3.2 订单服务添加任务并发送</h3><h4 id="3-2-1-修改添加订单方法"><a href="#3-2-1-修改添加订单方法" class="headerlink" title="3.2.1 修改添加订单方法"></a>3.2.1 修改添加订单方法</h4><p>当添加订单的时候，添加任务表中相关数据, 局部代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增加任务表记录</span><br>Task task = <span class="hljs-keyword">new</span> Task();<br>task.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>task.setUpdateTime(<span class="hljs-keyword">new</span> Date());<br>task.setMqExchange(RabbitMQConfig.EX_BUYING_ADDPOINTURSE);<br>task.setMqRoutingkey(RabbitMQConfig.CG_BUYING_ADDPOINT_KEY);<br><br>Map map = <span class="hljs-keyword">new</span> HashMap();<br>map.put(<span class="hljs-string">&quot;userName&quot;</span>,order.getUsername());<br>map.put(<span class="hljs-string">&quot;orderId&quot;</span>,order.getId());<br>map.put(<span class="hljs-string">&quot;point&quot;</span>,order.getPayMoney());<br>task.setRequestBody(JSON.toJSONString(map));<br>taskMapper.insertSelective(task);<br></code></pre></td></tr></table></figure><h4 id="3-2-2-定时扫描任务表最新数据"><a href="#3-2-2-定时扫描任务表最新数据" class="headerlink" title="3.2.2 定时扫描任务表最新数据"></a>3.2.2 定时扫描任务表最新数据</h4><p>订单服务新增定时任务类，获取小于系统当前时间的所有任务数据</p><ol><li><p>修改订单服务启动类，添加开启定时任务注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableScheduling</span><br></code></pre></td></tr></table></figure></li><li><p>定义定时任务类</p><p>查询最新数据</p><p>更新taskMapper新增方法，查询所有小于系统当前时间的数据</p><p>注意：</p><ul><li><code>@Results</code>开启表和实体类的映射，column后面跟字段名，property后面跟属性名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TaskMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">Task</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;SELECT * from tb_task WHERE update_time&lt;#&#123;currentTime&#125;&quot;)</span><br>    <span class="hljs-meta">@Results(&#123;@Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;update_time&quot;,property = &quot;updateTime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;delete_time&quot;,property = &quot;deleteTime&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;task_type&quot;,property = &quot;taskType&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;mq_exchange&quot;,property = &quot;mqExchange&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;mq_routingkey&quot;,property = &quot;mqRoutingkey&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;request_body&quot;,property = &quot;requestBody&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;status&quot;,property = &quot;status&quot;),</span><br><span class="hljs-meta">            @Result(column = &quot;errormsg&quot;,property = &quot;errormsg&quot;)&#125;)</span><br>    <span class="hljs-function">List&lt;Task&gt; <span class="hljs-title">findTaskLessTanCurrentTime</span><span class="hljs-params">(Date currentTime)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>任务类实现</p><p>注意：</p><ul><li><code>cron = &quot;0 0/2 * * * ?&quot;</code>的语法有时间再去看看，这个表示每两秒检查一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryPointTask</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskMapper taskMapper;<br><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0 0/2 * * * ?&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryTask</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-comment">//1.获取小于系统当前时间数据</span><br>        List&lt;Task&gt; taskList = taskMapper.findTaskLessTanCurrentTime(<span class="hljs-keyword">new</span> Date());<br><br>        <span class="hljs-keyword">if</span> (taskList!=<span class="hljs-keyword">null</span> &amp;&amp; taskList.size()&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//将任务数据发送到消息队列</span><br>            <span class="hljs-keyword">for</span> (Task task : taskList) &#123;<br> rabbitTemplate.convertAndSend(RabbitMQConfig.EX_BUYING_ADDPOINTUSER,RabbitMQConfig.CG_BUYING_ADDPOINT_KEY, JSON.toJSONString(task));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-3-用户服务更改积分"><a href="#3-3-用户服务更改积分" class="headerlink" title="3.3 用户服务更改积分"></a>3.3 用户服务更改积分</h3><ol><li><p>添加rabbitmq配置类(与订单服务相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//添加积分任务交换机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EX_BUYING_ADDPOINTUSER = <span class="hljs-string">&quot;ex_buying_addpointuser&quot;</span>;<br><br>    <span class="hljs-comment">//添加积分消息队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_ADDPOINT = <span class="hljs-string">&quot;cg_buying_addpoint&quot;</span>;<br><br>    <span class="hljs-comment">//完成添加积分消息队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_FINISHADDPOINT = <span class="hljs-string">&quot;cg_buying_finishaddpoint&quot;</span>;<br><br>    <span class="hljs-comment">//添加积分路由key</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_ADDPOINT_KEY = <span class="hljs-string">&quot;addpoint&quot;</span>;<br><br>    <span class="hljs-comment">//完成添加积分路由key</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CG_BUYING_FINISHADDPOINT_KEY = <span class="hljs-string">&quot;finishaddpoint&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(EX_BUYING_ADDPOINTUSER)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">EX_BUYING_ADDPOINTUSER</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.directExchange(EX_BUYING_ADDPOINTUSER).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(CG_BUYING_ADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">CG_BUYING_ADDPOINT</span><span class="hljs-params">()</span></span>&#123;<br>        Queue queue = <span class="hljs-keyword">new</span> Queue(CG_BUYING_ADDPOINT);<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br>    <span class="hljs-meta">@Bean(CG_BUYING_FINISHADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">CG_BUYING_FINISHADDPOINT</span><span class="hljs-params">()</span></span>&#123;<br>        Queue queue = <span class="hljs-keyword">new</span> Queue(CG_BUYING_FINISHADDPOINT);<br>        <span class="hljs-keyword">return</span> queue;<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_CG_BUYING_ADDPOINT</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(CG_BUYING_ADDPOINT)</span> Queue queue,<span class="hljs-meta">@Qualifier(EX_BUYING_ADDPOINTUSER)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(CG_BUYING_ADDPOINT_KEY).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_CG_BUYING_FINISHADDPOINT</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(CG_BUYING_FINISHADDPOINT)</span> Queue queue,<span class="hljs-meta">@Qualifier(EX_BUYING_ADDPOINTUSER)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(CG_BUYING_FINISHADDPOINT_KEY).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义消息监听类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddPointListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.CG_BUYING_ADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveAddPointMessage</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;用户服务接收到了任务消息&quot;</span>);<br><br>        <span class="hljs-comment">//转换消息</span><br>        Task task = JSON.parseObject(message, Task.class);<br>        <span class="hljs-keyword">if</span> (task == <span class="hljs-keyword">null</span> || StringUtils.isEmpty(task.getRequestBody()))&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断redis中当前的任务是否存在</span><br>        Object value = redisTemplate.boundValueOps(task.getId()).get();<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//更新用户积分</span><br>        <span class="hljs-keyword">int</span> result = userService.updateUserPoint(task);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//向订单服务返回通知消息</span><br>        rabbitTemplate.convertAndSend(RabbitMQConfig.EX_BUYING_ADDPOINTUSER,RabbitMQConfig.CG_BUYING_FINISHADDPOINT_KEY,JSON.toJSONString(task));<br>        System.out.println(<span class="hljs-string">&quot;用户服务向完成添加积分队列发送了一条消息&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义PointLogMapper，实现根据订单id查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PointLogMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">PointLog</span>&gt; </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from tb_point_log where order_id=#&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-function">PointLog <span class="hljs-title">findLogInfoByOrderId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;orderId&quot;)</span> String orderId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义修改用户积分实现</p><p>实现思路(操作的是UserServiceImpl实现类)：</p><ol><li>判断当前订单是否操作过</li><li>将任务存入redis</li><li>修改用户积分</li><li>添加积分日志表记录</li><li>删除redis中记录</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> PointLogMapper pointLogMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改用户积分</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateUserPoints</span><span class="hljs-params">(Task task)</span> </span>&#123;<br>        Map info = JSON.parseObject(task.getRequestBody(), Map.class);<br>        String userName = info.get(<span class="hljs-string">&quot;userName&quot;</span>).toString();<br>        String orderId = info.get(<span class="hljs-string">&quot;orderId&quot;</span>).toString();<br>        <span class="hljs-keyword">int</span> point = (<span class="hljs-keyword">int</span>) info.get(<span class="hljs-string">&quot;point&quot;</span>);<br><br>        <span class="hljs-comment">//判断当前订单是否操作过</span><br>        PointLog pointLog = pointLogMapper.findLogInfoByOrderId(orderId);<br>        <span class="hljs-keyword">if</span> (pointLog != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//将任务存入redis</span><br>        redisTemplate.boundValueOps(task.getId()).set(<span class="hljs-string">&quot;exist&quot;</span>,<span class="hljs-number">1</span>,TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">//修改用户积分</span><br>        <span class="hljs-keyword">int</span> result = userMapper.updateUserPoint(userName, point);<br>        <span class="hljs-keyword">if</span> (result&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">//添加积分日志表记录</span><br>        pointLog = <span class="hljs-keyword">new</span> PointLog();<br>        pointLog.setOrderId(orderId);<br>        pointLog.setPoint(point);<br>        pointLog.setUserId(userName);<br>        result = pointLogMapper.insertSelective(pointLog);<br>        <span class="hljs-keyword">if</span> (result&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">//删除redis中的记录</span><br>        redisTemplate.delete(task.getId());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-4-订单服务删除原任务"><a href="#3-4-订单服务删除原任务" class="headerlink" title="3.4 订单服务删除原任务"></a>3.4 订单服务删除原任务</h3><h4 id="3-4-1-定义监听类"><a href="#3-4-1-定义监听类" class="headerlink" title="3.4.1 定义监听类"></a>3.4.1 定义监听类</h4><p>在订单服务中定义监听类，用于监听队列，如果队列中有消息，则删除原任务防止消息重复发送，并对任务信息进行记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelTaskListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskService taskService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.CG_BUYING_FINISHADDPOINT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String message)</span></span>&#123;<br><br>        Task task = JSON.parseObject(message, Task.class);<br><br>        taskService.delTask(task);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-2-定义任务service"><a href="#3-4-2-定义任务service" class="headerlink" title="3.4.2 定义任务service"></a>3.4.2 定义任务service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TaskService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delTask</span><span class="hljs-params">(Task task)</span></span>;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TaskService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskMapper taskMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TaskHisMapper taskHisMapper;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delTask</span><span class="hljs-params">(Task task)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 设置删除时间</span><br>        task.setDeleteTime(<span class="hljs-keyword">new</span> Date());<br>        Long id = task.getId();<br>        task.setId(<span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//bean复制</span><br>        TaskHis taskHis = <span class="hljs-keyword">new</span> TaskHis();<br>        BeanUtils.copyProperties(task,taskHis);<br><br>       <span class="hljs-comment">//记录任务信息</span><br>        taskHisMapper.insertSelective(taskHis);<br><br>        <span class="hljs-comment">//删除原任务</span><br>        task.setId(id);<br>        taskMapper.deleteByPrimaryKey(task);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>畅购商城项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第四部分</title>
    <link href="/2021/07/29/1.4%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/29/1.4%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part10-购物车"><a href="#Part10-购物车" class="headerlink" title="Part10 购物车"></a>Part10 购物车</h1><h2 id="1-SpringSecurity权限控制"><a href="#1-SpringSecurity权限控制" class="headerlink" title="1. SpringSecurity权限控制"></a>1. SpringSecurity权限控制</h2><p><img src="/images/image-20210807190309378.png" alt="image-20210807190309378"></p><p>用户每次访问微服务的时候，先去oauth2.0服务登录，登录后再访问微服务网关，微服务网关将请求转发给其他微服务处理。</p><p>由于我们项目使用了微服务，任何用户都有可能使用任意微服务，此时我们需要控制相关权限，例如：普通用户角色不能使用用户的删除操作，只有管理员才可以使用,那么这个时候就需要使用到SpringSecurity的权限控制功能了。</p><h3 id="1-1-角色权限加载"><a href="#1-1-角色权限加载" class="headerlink" title="1.1 角色权限加载"></a>1.1 角色权限加载</h3><p>在changgou-user-oauth服务中，com.changgou.oauth.config.UserDetailsServiceImpl该类实现了加载用户相关信息，如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-comment">//根据用户名查询用户信息</span><br><span class="hljs-comment">//        String pwd = new BCryptPasswordEncoder().encode(&quot;itheima&quot;);</span><br>        com.changgou.user.pojo.User userInfo = userFeign.findUserInfo(username);<br>        <span class="hljs-comment">//创建User对象</span><br>        String permissions = <span class="hljs-string">&quot;salesman, accountant, user&quot;</span>;<br>        UserJwt userDetails = <span class="hljs-keyword">new</span> UserJwt(username,userInfo.getPassword(),AuthorityUtils.commaSeparatedStringToAuthorityList(permissions));<br>        <span class="hljs-keyword">return</span> userDetails;<br></code></pre></td></tr></table></figure><p>上述代码给登录用户定义了两个个角色，分别为goods_list,seckill_list，这一块我们目前使用的是硬编码方式将角色写死了。</p><p>在这里我们先进行一次登录操作，输入地址：<a href="http://localhost:8001/api/oauth/login">http://localhost:8001/api/oauth/login</a></p><p>登录成功</p><p><img src="/images/image-20210807193630600.png" alt="image-20210807193630600"></p><p>此时我们去redis里面看有没有data部分的jti和相应的token值, 发现是存在的</p><p><img src="/images/image-20210807193740222.png" alt="image-20210807193740222"></p><p>我么可以用之前编写好的解析令牌的测试类来解析令牌里面的内容</p><p>解析类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParseJwtTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseJwt</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//基于公钥去解析jwt</span><br>        String jwt =<span class="hljs-string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJhcHAiXSwibmFtZSI6bnVsbCwiaWQiOm51bGwsImV4cCI6MTYyODM3OTE0OCwiYXV0aG9yaXRpZXMiOlsic2Vja2lsbF9saXN0IiwiZ29vZHNfbGlzdCJdLCJqdGkiOiI3YjIwYTBkNS04NzI5LTRkMWMtYTY4YS0xM2IyM2MwYmUyNzMiLCJjbGllbnRfaWQiOiJjaGFuZ2dvdSIsInVzZXJuYW1lIjoiaGVpbWEifQ.XjAafeLs2QrMJH3BkBpqLknmdUe4Tumi7gv3Yxh5Vpt5mj1KizFWnfjYwHZHuLKZkHkNcDRH933D472HK95bFX4Ag_1bDjFrj2X5CzV6-fb7L3ncl_rZxoOAoES2J0GEquQGdx04KqB0uIlUFI-jMQ0wL0Lufz9LIDCF_2F1dXJQvV6sWQVkFQeVvE11_z5_Cn8Z7FMPIwYPmsidSDeE7aPldJpG4cNnY4YDyZQVhVJjdANP02Vx83ysDd5dDpmtNCNcGqVR3c2qBp49bewH0QjUmlfhhm_EbR9C_8NPk7XTlrZEPYzapSU27qIGhNaNHLjqZP9jOkRowHqoi2dUuw&quot;</span>;<br><br>        String publicKey =<span class="hljs-string">&quot;-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvFsEiaLvij9C1Mz+oyAmt47whAaRkRu/8kePM+X8760UGU0RMwGti6Z9y3LQ0RvK6I0brXmbGB/RsN38PVnhcP8ZfxGUH26kX0RK+tlrxcrG+HkPYOH4XPAL8Q1lu1n9x3tLcIPxq8ZZtuIyKYEmoLKyMsvTviG5flTpDprT25unWgE4md1kthRWXOnfWHATVY7Y/r4obiOL1mS5bEa/iNKotQNnvIAKtjBM4RlIDWMa6dmz+lHtLtqDD2LF1qwoiSIHI75LQZ/CNYaHCfZSxtOydpNKq8eb1/PGiLNolD4La2zf0/1dlcr5mkesV570NxRmU1tFm8Zd3MZlZmyv9QIDAQAB-----END PUBLIC KEY-----&quot;</span>;<br><br>        Jwt token = JwtHelper.decodeAndVerify(jwt, <span class="hljs-keyword">new</span> RsaVerifier(publicKey));<br><br>        String claims = token.getClaims();<br>        System.out.println(claims);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到里面的三个权限是之前定义好的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;scope&quot;</span>:[<span class="hljs-string">&quot;app&quot;</span>],<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-literal">null</span>,<span class="hljs-attr">&quot;exp&quot;</span>:<span class="hljs-number">1628379737</span>,<span class="hljs-attr">&quot;authorities&quot;</span>:[<span class="hljs-string">&quot;accountant&quot;</span>,<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;salesman&quot;</span>],<span class="hljs-attr">&quot;jti&quot;</span>:<span class="hljs-string">&quot;2c87dd69-7a16-469a-9033-f7fb158b2317&quot;</span>,<span class="hljs-attr">&quot;client_id&quot;</span>:<span class="hljs-string">&quot;changgou&quot;</span>,<span class="hljs-attr">&quot;username&quot;</span>:<span class="hljs-string">&quot;heima&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-角色权限控制"><a href="#1-2-角色权限控制" class="headerlink" title="1.2 角色权限控制"></a>1.2 角色权限控制</h3><p>在每个微服务中，需要获取用户的角色，然后根据角色识别是否允许操作指定的方法，Spring Security中定义了四个支持权限控制的表达式注解，分别是<code>@PreAuthorize</code>、<code>@PostAuthorize</code>、<code>@PreFilter</code>和<code>@PostFilter</code>。其中前两者可以用来在方法调用前或者调用后进行权限检查，后两者可以用来对集合类型的参数或者返回值进行过滤。在需要控制权限的方法上，我们可以添加<code>@PreAuthorize</code>注解，用于方法执行前进行权限检查，校验用户当前角色是否能访问该方法。</p><ol><li><p>开启@PreAuthorize</p><p>在<code>changgou-service-user</code>的<code>ResourceServerConfig</code>类上添加<code>@EnableGlobalMethodSecurity</code>注解，用于开启@PreAuthorize的支持，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableResourceServer</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><span class="hljs-comment">//激活方法上的PreAuthorize注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>方法权限控制</p><p>在<code>changgou-service-user</code>微服务的<code>com.changgou.user.controller.UserController</code>类的delete()方法上添加权限控制注解<code>@PreAuthorize</code>，代码如下：</p><p>注意：</p><ul><li><code>@PreAuthorize(&quot;hasAnyAuthority(&#39;admin&#39;)&quot;)</code>表示只有admin角色才能访问该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;)&quot;)</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; userList = userService.findAll();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,userList) ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>我们使用Postman测试，先创建令牌，然后将令牌数存放到头文件中访问微服务网关来调用user微服务的search方法，效果如下：</p><p>提交方式：GET，地址：<a href="http://localhost:8001/api/user">http://localhost:8001/api/user</a> </p><p>发现上面无法访问，因为用户登录的时候，角色不包含admin角色，而findAll方法需要admin角色，所以被拦截了。</p><p>我们再测试其他方法，其他方法没有配置拦截，所以用户登录后就会放行。</p></li></ol><h3 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h3><p>如果希望一个方法能被多个角色访问，配置:<code>@PreAuthorize(&quot;hasAnyAuthority(&#39;admin&#39;,&#39;user&#39;)&quot;)</code></p><p>如果希望一个类都能被多个角色访问，在类上配置:<code>@PreAuthorize(&quot;hasAnyAuthority(&#39;admin&#39;,&#39;user&#39;)&quot;)</code></p><h2 id="2-购物车"><a href="#2-购物车" class="headerlink" title="2. 购物车"></a>2. 购物车</h2><p>购物车分为用户登录购物车和未登录购物车操作，国内知名电商京东用户登录和不登录都可以操作购物车，如果用户不登录，操作购物车可以将数据存储到Cookie，用户登录后购物车数据可以存储到Redis中，再将之前未登录加入的购物车合并到Redis中即可。</p><p>淘宝天猫则采用了另外一种实现方案，用户要想将商品加入购物车，必须先登录才能操作购物车。</p><p>我们今天实现的购物车是天猫解决方案，即用户必须先登录才能使用购物车功能。</p><h3 id="2-1-购物车业务分析"><a href="#2-1-购物车业务分析" class="headerlink" title="2.1 购物车业务分析"></a>2.1 购物车业务分析</h3><ol><li><p>需求分析</p><p>用户在商品详细页点击加入购物车，提交商品SKU编号和购买数量，添加到购物车。购物车展示页面如下：</p><p><img src="/images/image-20210807195831748.png" alt="image-20210807195831748"></p></li><li><p>购物车实现思路</p><p><img src="/images/image-20210807195957757.png" alt="image-20210807195957757"></p><p>我们实现的是用户登录后的购物车，用户将商品加入购物车的时候，直接将要加入购物车的详情存入到Redis即可。每次查看购物车的时候直接从Redis中获取。</p></li><li><p>表结构分析</p><p>用户登录后将商品加入购物车，需要存储商品详情以及购买数量，购物车详情表如下：</p><p>changgou_order数据中tb_order_item表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_order_item` (<br>  `id` varchar(20) COLLATE utf8_bin NOT NULL COMMENT &#x27;ID&#x27;,<br>  `category_id1` int(11) DEFAULT NULL COMMENT &#x27;1级分类&#x27;,<br>  `category_id2` int(11) DEFAULT NULL COMMENT &#x27;2级分类&#x27;,<br>  `category_id3` int(11) DEFAULT NULL COMMENT &#x27;3级分类&#x27;,<br>  `spu_id` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;SPU_ID&#x27;,<br>  `sku_id` bigint(20) NOT NULL COMMENT &#x27;SKU_ID&#x27;,<br>  `order_id` bigint(20) NOT NULL COMMENT &#x27;订单ID&#x27;,<br>  `name` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;商品名称&#x27;,<br>  `price` int(20) DEFAULT NULL COMMENT &#x27;单价&#x27;,<br>  `num` int(10) DEFAULT NULL COMMENT &#x27;数量&#x27;,<br>  `money` int(20) DEFAULT NULL COMMENT &#x27;总金额&#x27;,<br>  `pay_money` int(11) DEFAULT NULL COMMENT &#x27;实付金额&#x27;,<br>  `image` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;图片地址&#x27;,<br>  `weight` int(11) DEFAULT NULL COMMENT &#x27;重量&#x27;,<br>  `post_fee` int(11) DEFAULT NULL COMMENT &#x27;运费&#x27;,<br>  `is_return` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;是否退货&#x27;,<br>  PRIMARY KEY (`id`),<br>  KEY `item_id` (`sku_id`),<br>  KEY `order_id` (`order_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-2-添加购物车"><a href="#2-2-添加购物车" class="headerlink" title="2.2 添加购物车"></a>2.2 添加购物车</h3><p><img src="/images/image-20210807200521515.png" alt="image-20210807200521515"></p><h4 id="2-2-1-获取sku数据"><a href="#2-2-1-获取sku数据" class="headerlink" title="2.2.1 获取sku数据"></a>2.2.1 获取sku数据</h4><p>goods服务中定义根据id查询sku对象实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Sku&gt; <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    Sku sku = skuService.findById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,sku);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-定义feign接口"><a href="#2-2-2-定义feign接口" class="headerlink" title="2.2.2 定义feign接口"></a>2.2.2 定义feign接口</h4><p>goods.api工程中定义skuFeign接口,并定义查询方法</p><p>注意：</p><ul><li><code>@FeignClient(name=&quot;goods&quot;)</code>和<code>@FeignClient(value=&quot;goods&quot;)</code>表示的是一个意思：指定服务的提供方为goods(这个就是服务的名字，在他的配置文件里定义了的)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;goods&quot;)</span>  <span class="hljs-comment">//表示goods是服务提供方，必须为客户端指定服务提供方，name和value是一个意思</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SkuFeign</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Sku&gt; <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-订单服务添加依赖"><a href="#2-2-3-订单服务添加依赖" class="headerlink" title="2.2.3 订单服务添加依赖"></a>2.2.3 订单服务添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-4-订单服务启动类添加feign接口扫描"><a href="#2-2-4-订单服务启动类添加feign接口扫描" class="headerlink" title="2.2.4 订单服务启动类添加feign接口扫描"></a>2.2.4 订单服务启动类添加feign接口扫描</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.changgou.goods.feign&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="2-2-5-订单服务添加cartService及其实现类"><a href="#2-2-5-订单服务添加cartService及其实现类" class="headerlink" title="2.2.5 订单服务添加cartService及其实现类"></a>2.2.5 订单服务添加cartService及其实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CartService</span> </span>&#123;<br><br>    <span class="hljs-comment">//添加购物车</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addCart</span><span class="hljs-params">(String skuId, Integer num, String username)</span></span>;<br><br>    <span class="hljs-comment">//查询购物车数据</span><br>    <span class="hljs-function">Map <span class="hljs-title">list</span><span class="hljs-params">(String username)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CartService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String CART=<span class="hljs-string">&quot;cart_&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SkuFeign skuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SpuFeign spuFeign;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCart</span><span class="hljs-params">(String skuId, Integer num, String username)</span> </span>&#123;<br>        <span class="hljs-comment">//1.查询redis中相对应的商品信息</span><br>        OrderItem orderItem = (OrderItem) redisTemplate.boundHashOps(CART+username).get(skuId);<br>        <span class="hljs-keyword">if</span> (orderItem != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//2.如果当前商品在redis中的存在,则更新商品的数量与价钱</span><br>            orderItem.setNum(orderItem.getNum()+num);<br>            <span class="hljs-keyword">if</span> (orderItem.getNum()&lt;=<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//删除该商品</span><br>                redisTemplate.boundHashOps(CART+username).delete(skuId);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            orderItem.setMoney(orderItem.getNum()*orderItem.getPrice());<br>            orderItem.setPayMoney(orderItem.getNum()*orderItem.getPrice());<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//3.如果当前商品在redis中不存在,将商品添加到redis中</span><br>            Sku sku = skuFeign.findById(skuId).getData();<br>            Spu spu = spuFeign.findSpuById(sku.getSpuId()).getData();<br><br>            <span class="hljs-comment">//封装orderItem</span><br>           orderItem = <span class="hljs-keyword">this</span>.sku2OrderItem(sku,spu,num);<br>        &#125;<br><br>        <span class="hljs-comment">//3.将orderitem添加到redis中</span><br>        redisTemplate.boundHashOps(CART+username).put(skuId,orderItem);<br>    &#125;<br><br>    <span class="hljs-comment">//查询购物车列表数据</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br><br>        List&lt;OrderItem&gt; orderItemList = redisTemplate.boundHashOps(CART + username).values();<br>        map.put(<span class="hljs-string">&quot;orderItemList&quot;</span>,orderItemList);<br><br>        <span class="hljs-comment">//商品的总数量与总价格</span><br>        Integer totalNum = <span class="hljs-number">0</span>;<br>        Integer totalMoney = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>            totalNum+=orderItem.getNum();<br>            totalMoney+=orderItem.getMoney();<br>        &#125;<br><br>        map.put(<span class="hljs-string">&quot;totalNum&quot;</span>,totalNum);<br>        map.put(<span class="hljs-string">&quot;totalMoney&quot;</span>,totalMoney);<br><br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> OrderItem <span class="hljs-title">sku2OrderItem</span><span class="hljs-params">(Sku sku, Spu spu, Integer num)</span> </span>&#123;<br>        OrderItem orderItem = <span class="hljs-keyword">new</span> OrderItem();<br>        orderItem.setSpuId(sku.getSpuId());<br>        orderItem.setSkuId(sku.getId());<br>        orderItem.setName(sku.getName());<br>        orderItem.setPrice(sku.getPrice());<br>        orderItem.setNum(num);<br>        orderItem.setMoney(orderItem.getPrice()*num);<br>        orderItem.setPayMoney(orderItem.getPrice()*num);<br>        orderItem.setImage(sku.getImage());<br>        orderItem.setWeight(sku.getWeight()*num);<br>        <span class="hljs-comment">//分类信息</span><br>        orderItem.setCategoryId1(spu.getCategory1Id());<br>        orderItem.setCategoryId2(spu.getCategory2Id());<br>        orderItem.setCategoryId3(spu.getCategory3Id());<br>        <span class="hljs-keyword">return</span> orderItem;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-6-订单服务新建CartController"><a href="#2-2-6-订单服务新建CartController" class="headerlink" title="2.2.6 订单服务新建CartController"></a>2.2.6 订单服务新建CartController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cart&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartService cartService;<br><br>    <span class="hljs-comment">/*@Autowired</span><br><span class="hljs-comment">    private TokenDecode tokenDecode;*/</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/addCart&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addCart</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;skuId&quot;)</span> String skuId, <span class="hljs-meta">@RequestParam(&quot;num&quot;)</span> Integer num)</span></span>&#123;<br><br>        <span class="hljs-comment">//动态获取当前人信息,暂时静态</span><br>        String username = <span class="hljs-string">&quot;itcast&quot;</span>;<br><span class="hljs-comment">//        String username = tokenDecode.getUserInfo().get(&quot;username&quot;);</span><br>        cartService.addCart(skuId,num,username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;加入购物车成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//动态获取当前人信息,暂时静态</span><br>        String username = <span class="hljs-string">&quot;itcast&quot;</span>;<br><span class="hljs-comment">//        String username = tokenDecode.getUserInfo().get(&quot;username&quot;);</span><br>        Map map = cartService.list(username);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后测试添加购物车，请求地址：localhost:9002/cart/addCart?skuId=100000003145&amp;num=1</p><p>效果如下：</p><p><img src="/images/image-20210807205116509.png" alt="image-20210807205116509"></p><p>可以发现redis缓存中已经有商品了</p><p><img src="/images/image-20210807205216459.png" alt="image-20210807205216459"></p><h3 id="2-3-购物车列表"><a href="#2-3-购物车列表" class="headerlink" title="2.3 购物车列表"></a>2.3 购物车列表</h3><h4 id="2-3-1-思路分析"><a href="#2-3-1-思路分析" class="headerlink" title="2.3.1 思路分析"></a>2.3.1 思路分析</h4><p><img src="/images/image-20210807205435727.png" alt="image-20210807205435727"></p><p>接着我们实现一次购物车列表操作。因为存的时候是根据用户名往Redis中存储用户的购物车数据的，所以我们这里可以将用户的名字作为key去Redis中查询对应的数据。##</p><h4 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h4><ol><li><p>业务层</p><p>com.changgou.order.service.CartService接口，添加购物车列表方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询购物车数据</span><br><span class="hljs-function">Map <span class="hljs-title">list</span><span class="hljs-params">(String username)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>业务层接口实现类</p><p>com.changgou.order.service.impl.CartServiceImpl类，添加购物车列表实现方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询购物车列表数据</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">(String username)</span> </span>&#123;<br>    Map map = <span class="hljs-keyword">new</span> HashMap();<br>   <br>    List&lt;OrderItem&gt; orderItemList = redisTemplate.boundHashOps(CART + username).values();<br>    map.put(<span class="hljs-string">&quot;orderItemList&quot;</span>,orderItemList);<br>   <br>    <span class="hljs-comment">//商品的总数量与总价格</span><br>    Integer totalNum = <span class="hljs-number">0</span>;<br>    Integer totalMoney = <span class="hljs-number">0</span>;<br>   <br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        totalNum+=orderItem.getNum();<br>        totalMoney+=orderItem.getMoney();<br>    &#125;<br>   <br>    map.put(<span class="hljs-string">&quot;totalNum&quot;</span>,totalNum);<br>    map.put(<span class="hljs-string">&quot;totalMoney&quot;</span>,totalMoney);<br>   <br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 查询用户购物车列表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(value = &quot;/list&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//暂时静态，后续修改</span><br>    String username = <span class="hljs-string">&quot;itcast&quot;</span>;<br>    <span class="hljs-keyword">return</span> cartService.list(username);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>使用Postman访问 GET <a href="http://localhost:9002/cart/list">http://localhost:9002/cart/list</a></p><p>效果如下</p><p><img src="/images/image-20210807210847527.png" alt="image-20210807210847527"></p></li></ol><h2 id="3-购物车渲染"><a href="#3-购物车渲染" class="headerlink" title="3. 购物车渲染"></a>3. 购物车渲染</h2><h3 id="3-1-购物车渲染服务搭建"><a href="#3-1-购物车渲染服务搭建" class="headerlink" title="3.1 购物车渲染服务搭建"></a>3.1 购物车渲染服务搭建</h3><p>在changgou_web中搭建订单购物车微服务工程<code>changgou_web_order</code>，该工程主要实现购物车和订单的渲染操作。</p><ol><li><p>导入pom文件依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_order_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>application.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9011</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-web</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">80000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-comment"># 熔断器超时时间，默认：1000/毫秒</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">80000</span><br><span class="hljs-comment">#请求处理的超时时间</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">4000</span><br>  <span class="hljs-comment">#请求连接的超时时间</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure></li><li><p>创建启动类</p><p>创建com.changgou.OrderWebApplication启动类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderWebApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(OrderWebApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>静态资源拷贝</p><p>资源\成品页面\cart.html页面拷贝到工程中，如下图：</p><p><img src="/images/image-20210807225516860.png" alt="image-20210807225516860"></p></li></ol><h3 id="3-2-购物车列表渲染"><a href="#3-2-购物车列表渲染" class="headerlink" title="3.2 购物车列表渲染"></a>3.2 购物车列表渲染</h3><ol><li><p>Feign创建</p><p>在changgou_service_order_api中添加CartFeign接口，并在接口中创建添加购物车和查询购物车列表，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CartFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/cart/addCart&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addCart</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;skuId&quot;)</span> String skuId, <span class="hljs-meta">@RequestParam(&quot;num&quot;)</span> Integer num)</span></span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/cart/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>后台代码</p><p>在changgou_web_order中创建com.changgou.order.controller.CartController,并添加查询购物车集合方法和添加购物车方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/wcart&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartFeign cartFeign;<br><br>    <span class="hljs-comment">//查询</span><br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        Map map = cartFeign.list();<br>        model.addAttribute(<span class="hljs-string">&quot;items&quot;</span>,map);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cart&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">//添加</span><br>    <span class="hljs-meta">@GetMapping(&quot;/add&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Map&gt; <span class="hljs-title">add</span><span class="hljs-params">(String id,Integer num)</span></span>&#123;<br>        cartFeign.addCart(id,num);<br>        Map map = cartFeign.list();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result&lt;&gt;(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;添加购物车成功&quot;</span>,map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>前端页面</p><ul><li>加载列表数据</li><li>购物车渲染服务</li></ul><p>这里暂时不细学，后面系统学期前端再深入</p></li><li><p>订单服务对接网关</p><p>修改微服务网关<code>changgou-gateway-web</code>的application.yml配置文件，添加order的路由过滤配置，配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml">  <span class="hljs-comment">#认证微服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_oauth_user</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user-auth</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/oauth/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_order_route</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://order</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/cart/**,/api/categoryReport/**,/api/orderConfig/**,/api/order/**,/api/orderItem/**,/api/orderLog/**,/api/preferential/**,/api/returnCause/**,/api/returnOrder/**,/api/returnOrderItem/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>  <span class="hljs-comment">#购物车订单渲染微服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_order_web_route</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://order-web</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/wcart/**,/api/worder/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>由于开启了网关，要先登录才能访问</p><p>登录路径：<a href="http://192.168.114.1:8001/api/oauth/toLogin">http://192.168.114.1:8001/api/oauth/toLogin</a></p><p>访问购物车路径（我的登录界面的权限好像存在问题，登录没上，显示未授权）：<a href="http://localhost:8001/api/wcart/list">http://localhost:8001/api/wcart/list</a></p></li></ol><h3 id="3-3-商品数量变更"><a href="#3-3-商品数量变更" class="headerlink" title="3.3 商品数量变更"></a>3.3 商品数量变更</h3><p>用户可以点击+号或者-号，或者手动输入一个数字，然后更新购物车列表，我们可以给-+号一个点击事件，给数字框一个失去焦点事件，然后调用后台，实现购物车的更新。</p><p>请求后台方法：</p><p>在js里面创建一个请求后台的方法，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script th:inline=<span class="hljs-string">&quot;javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">items</span>:[[$&#123;items&#125;]]<br>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-attr">add</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">skuId,num</span>) </span>&#123;<br>axios.get(<span class="hljs-string">&quot;/api/wcart/add?id=&quot;</span>+skuId+<span class="hljs-string">&quot;&amp;num=&quot;</span>+num).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br><span class="hljs-keyword">if</span> (response.data.flag)&#123;<br>app.items=response.data.data;<br>&#125;<br>&#125;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>添加事件：</p><p>在+-号和数字框那里添加点击事件和失去焦点事件，然后调用上面的add方法，代码如下：</p><p><img src="/images/image-20210807223449940.png" alt="image-20210807223449940"></p><h3 id="3-4-删除商品购物车"><a href="#3-4-删除商品购物车" class="headerlink" title="3.4 删除商品购物车"></a>3.4 删除商品购物车</h3><p>我们发现个问题，就是用户将商品加入购物车，无论数量是正负，都会执行添加购物车，如果数量如果&lt;=0，应该移除该商品的。</p><p>修改changgou-service-order的com.changgou.order.service.impl.CartServiceImpl的add方法，添加如下代码：</p><p><img src="/images/image-20210807223724709.png" alt="image-20210807223724709"></p><h3 id="3-5-订单服务对接oauth"><a href="#3-5-订单服务对接oauth" class="headerlink" title="3.5 订单服务对接oauth"></a>3.5 订单服务对接oauth</h3><p>在订单微服务里进行的</p><ol><li><p>配置公钥</p></li><li><p>在pom文件中导入oauth依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableResourceServer</span><br><span class="hljs-comment">//开启方法上的PreAuthorize注解</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-comment">//公钥</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PUBLIC_KEY = <span class="hljs-string">&quot;public.key&quot;</span>;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 定义JwtTokenStore</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtAccessTokenConverter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TokenStore <span class="hljs-title">tokenStore</span><span class="hljs-params">(JwtAccessTokenConverter jwtAccessTokenConverter)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JwtTokenStore(jwtAccessTokenConverter);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 定义JJwtAccessTokenConverter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">jwtAccessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();<br>        converter.setVerifierKey(getPubKey());<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取非对称加密公钥 Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 公钥 Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getPubKey</span><span class="hljs-params">()</span> </span>&#123;<br>        Resource resource = <span class="hljs-keyword">new</span> ClassPathResource(PUBLIC_KEY);<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(resource.getInputStream());<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(inputStreamReader);<br>            <span class="hljs-keyword">return</span> br.lines().collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * Http安全配置，对每个到达系统的http请求链接进行校验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//所有请求必须认证通过</span><br>        http.authorizeRequests()<br>                .anyRequest().<br>                authenticated();    <span class="hljs-comment">//其他地址需要认证授权</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-6-微服务间认证"><a href="#3-6-微服务间认证" class="headerlink" title="3.6 微服务间认证"></a>3.6 微服务间认证</h3><p><img src="/images/image-20210807224437427.png" alt="image-20210807224437427"></p><p>如上图：因为微服务之间并没有传递头文件，所以我们可以定义一个拦截器，每次微服务调用之前都先检查下头文件，将请求的头文件中的令牌数据再放入到header中，再调用其他微服务即可。</p><p><strong>feign拦截器实现微服务间认证</strong></p><ol><li><p>创建拦截器</p><p>在changgou_common服务中创建一个com.changgou.interceptor.FeignInterceptor拦截器，并将所有头文件数据再次加入到Feign请求的微服务头文件中，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FeignInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RequestInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(RequestTemplate requestTemplate)</span> </span>&#123;<br>        <span class="hljs-comment">//传递令牌</span><br>        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-keyword">null</span>)&#123;<br>            HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();<br>            <span class="hljs-keyword">if</span> (request != <span class="hljs-keyword">null</span>)&#123;<br>                Enumeration&lt;String&gt; headerNames = request.getHeaderNames();<br>                <span class="hljs-keyword">while</span> (headerNames.hasMoreElements())&#123;<br>                    String headerName = headerNames.nextElement();<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;authorization&quot;</span>.equals(headerName))&#123;<br>                        String headerValue = request.getHeader(headerName); <span class="hljs-comment">// Bearer jwt</span><br><br>                        <span class="hljs-comment">//传递令牌</span><br>                        requestTemplate.header(headerName,headerValue);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更改changgou_order_web启动类，添加拦截器声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FeignInterceptor <span class="hljs-title">feignInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FeignInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-7-动态获取当前登录人"><a href="#3-7-动态获取当前登录人" class="headerlink" title="3.7 动态获取当前登录人"></a>3.7 动态获取当前登录人</h3><h4 id="3-7-1-数据分析"><a href="#3-7-1-数据分析" class="headerlink" title="3.7.1 数据分析"></a>3.7.1 数据分析</h4><p>用户登录后，数据会封装到<code>SecurityContextHolder.getContext().getAuthentication()</code>里面，我们可以将数据从这里面取出，然后转换成<code>OAuth2AuthenticationDetails</code>,在这里面可以获取到令牌信息、令牌类型等，代码如下（这里的代码不是自己编写的）：</p><p><img src="/images/image-20210807230417232.png" alt="image-20210807230417232"></p><p>这里的tokenValue是加密之后的令牌数据，remoteAddress是用户的IP信息，tokenType是令牌类型。</p><p>我们可以获取令牌加密数据后，使用公钥对它进行解密，如果能解密说明数据无误，如果不能解密用户也没法执行到这一步。解密后可以从明文中获取用户信息。</p><h4 id="3-7-2-代码实现"><a href="#3-7-2-代码实现" class="headerlink" title="3.7.2 代码实现"></a>3.7.2 代码实现</h4><p>因为该类在很多微服务中都会被使用到，所以需要将该类添加到common工程中</p><ol><li><p>在changgou-common工程中引入鉴权包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--鉴权--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加资源中的TokenDecode工具类到changgou-service-order微服务config包下，用于解密令牌信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenDecode</span> </span>&#123;<br>    <span class="hljs-comment">//公钥</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PUBLIC_KEY = <span class="hljs-string">&quot;public.key&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String publickey=<span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取用户信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title">getUserInfo</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//获取授权信息</span><br>        OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) SecurityContextHolder.getContext().getAuthentication().getDetails();<br>        <span class="hljs-comment">//令牌解码</span><br>        <span class="hljs-keyword">return</span> dcodeToken(details.getTokenValue());<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 读取令牌数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title">dcodeToken</span><span class="hljs-params">(String token)</span></span>&#123;<br>        <span class="hljs-comment">//校验Jwt</span><br>        Jwt jwt = JwtHelper.decodeAndVerify(token, <span class="hljs-keyword">new</span> RsaVerifier(getPubKey()));<br><br>        <span class="hljs-comment">//获取Jwt原始内容</span><br>        String claims = jwt.getClaims();<br>        <span class="hljs-keyword">return</span> JSON.parseObject(claims,Map.class);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取非对称加密公钥 Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 公钥 Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPubKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(publickey))&#123;<br>            <span class="hljs-keyword">return</span> publickey;<br>        &#125;<br>        Resource resource = <span class="hljs-keyword">new</span> ClassPathResource(PUBLIC_KEY);<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(resource.getInputStream());<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(inputStreamReader);<br>            publickey = br.lines().collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>            <span class="hljs-keyword">return</span> publickey;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将该工具类以bean的形式声明到order服务中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.changgou.goods.feign&quot;)</span><br><span class="hljs-meta">@MapperScan(basePackages = &#123;&quot;com.changgou.order.dao&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run( OrderApplication.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TokenDecode <span class="hljs-title">tokenDecode</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TokenDecode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层获取用户数据</p><p>在CartController中注入TokenDecode，并调用TokenDecode的getUserInfo方法获取用户信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cart&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartService cartService;<br><br>    <span class="hljs-comment">//===================</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TokenDecode tokenDecode;<br>    <span class="hljs-comment">//===================</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/addCart&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addCart</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;skuId&quot;)</span> String skuId, <span class="hljs-meta">@RequestParam(&quot;num&quot;)</span> Integer num)</span></span>&#123;<br><br>        <span class="hljs-comment">//===================</span><br>        <span class="hljs-comment">//动态获取当前人信息,暂时静态</span><br>        <span class="hljs-comment">//String username = &quot;itcast&quot;;</span><br>        String username = tokenDecode.getUserInfo().get(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-comment">//===================</span><br>        <br>        cartService.addCart(skuId,num,username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;加入购物车成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 查询用户购物车列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <br>        <span class="hljs-comment">//===================</span><br>        <span class="hljs-comment">//暂时静态，后续修改</span><br><span class="hljs-comment">//        String username = &quot;itcast&quot;;</span><br>        String username = tokenDecode.getUserInfo().get(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-comment">//===================</span><br>        <br>        <span class="hljs-keyword">return</span> cartService.list(username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-8-页面跳转"><a href="#3-8-页面跳转" class="headerlink" title="3.8 页面跳转"></a>3.8 页面跳转</h3><h4 id="3-9-1-未登录时登录跳转"><a href="#3-9-1-未登录时登录跳转" class="headerlink" title="3.9.1 未登录时登录跳转"></a>3.9.1 未登录时登录跳转</h4><p>在用户没有登录的情况下，直接访问购物车页面会报401(未授权错误)。</p><p>我们可以发现，返回的只是个错误状态码，这个毫无意义，我们应该重定向到登录页面，让用户登录，我们可以修改网关的头文件，让用户每次没登录的时候，都跳转到登录页面。</p><p>修改changgou-gateway-web的<code>com.changgou.filter.AuthorizeFilter</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String LOGIN_URL=<span class="hljs-string">&quot;http://localhost:8001/api/oauth/toLogin&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthService authService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        ServerHttpRequest request = exchange.getRequest();<br>        ServerHttpResponse response = exchange.getResponse();<br><br>        <span class="hljs-comment">//1.判断当前请求路径是否为登录请求,如果是,则直接放行</span><br>        String path = request.getURI().getPath();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/api/oauth/login&quot;</span>.equals(path) || !UrlFilter.hasAuthorize(path))&#123;<br>            <span class="hljs-comment">//直接放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//2.从cookie中获取jti的值,如果该值不存在,拒绝本次访问</span><br>        String jti = authService.getJtiFromCookie(request);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(jti))&#123;<br>            <span class="hljs-comment">//拒绝访问</span><br>            <span class="hljs-comment">/*response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="hljs-comment">            return response.setComplete();*/</span><br>            <span class="hljs-comment">//跳转登录页面</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toLoginPage(LOGIN_URL+<span class="hljs-string">&quot;?FROM=&quot;</span>+request.getURI().getPath(),exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//3.从redis中获取jwt的值,如果该值不存在,拒绝本次访问</span><br>        String jwt = authService.getJwtFromRedis(jti);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(jwt))&#123;<br>            <span class="hljs-comment">//拒绝访问</span><br>            <span class="hljs-comment">/*response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="hljs-comment">            return response.setComplete();*/</span><br>            <span class="hljs-keyword">return</span>  <span class="hljs-keyword">this</span>.toLoginPage(LOGIN_URL,exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//4.对当前的请求对象进行增强,让它会携带令牌的信息</span><br>        request.mutate().header(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;Bearer &quot;</span>+jwt);<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">//跳转登录页面</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Mono&lt;Void&gt; <span class="hljs-title">toLoginPage</span><span class="hljs-params">(String loginUrl, ServerWebExchange exchange)</span> </span>&#123;<br>        ServerHttpResponse response = exchange.getResponse();<br>        response.setStatusCode(HttpStatus.SEE_OTHER);<br>        response.getHeaders().set(<span class="hljs-string">&quot;Location&quot;</span>,loginUrl);<br>        <span class="hljs-keyword">return</span> response.setComplete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时再测试，就可以跳转到登录页面了。</p><p>访问：<a href="http://localhost:8001/api/wcart/list">http://localhost:8001/api/wcart/list</a></p><h4 id="3-8-2-登录成功跳转原地址"><a href="#3-8-2-登录成功跳转原地址" class="headerlink" title="3.8.2 登录成功跳转原地址"></a>3.8.2 登录成功跳转原地址</h4><p>刚才已经实现了未登录时跳转登录页，但是当登录成功后，并没有跳转到用户本来要访问的页面。(这个功能在3.8.1已经实现了，这里熟悉下流程)</p><p>要实现这个功能的话，可以将用户要访问的页面作为参数传递到登录控制器，由登录控制器根据参数完成路径跳转.</p><ol><li><p>修改网关携带当前访问URI</p><p>修改changgou-gateway-web的<code>com.changgou.filter.AuthorizeFilter</code>，在之前的URL后面添加FROM参数以及FROM参数的值为<code>request.getURI()</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.从cookie中获取jti的值,如果该值不存在,拒绝本次访问</span><br>String jti = authService.getJtiFromCookie(request);<br><span class="hljs-keyword">if</span> (StringUtils.isEmpty(jti))&#123;<br>    <span class="hljs-comment">//拒绝访问</span><br>    <span class="hljs-comment">/*response.setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="hljs-comment">    return response.setComplete();*/</span><br>    <span class="hljs-comment">//跳转登录页面</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.toLoginPage(LOGIN_URL+<span class="hljs-string">&quot;?FROM=&quot;</span>+request.getURI().getPath(),exchange);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>登录控制器获取参数</p><p>修改changgou-user-oauth的<code>com.changgou.oauth.controller.LoginRedirect</code>记录访问来源页，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;FROM&quot;,required = false,defaultValue = &quot;&quot;)</span> String from, Model model)</span></span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;from&quot;</span>,from);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改页面，获取来源页信息，并存到from变量中，登录成功后跳转到该地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script th:inline=<span class="hljs-string">&quot;javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">password</span>:<span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-attr">login</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>app.msg=<span class="hljs-string">&quot;正在登录&quot;</span>;<br>axios.post(<span class="hljs-string">&quot;/api/oauth/login?username=&quot;</span>+app.username+<span class="hljs-string">&quot;&amp;password=&quot;</span>+app.password).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;<br><span class="hljs-keyword">if</span> (response.data.flag)&#123;<br>app.msg=<span class="hljs-string">&quot;登录成功&quot;</span>;<br>location.href-app.from<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>app.msg=<span class="hljs-string">&quot;登录失败&quot;</span>;<br>&#125;<br>&#125;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>此时再测试，就可以识别未登录用户，跳转到登录页，然后根据登录状态，如果登录成功，则跳转到来源页。</p></li></ol><h1 id="Part11-订单"><a href="#Part11-订单" class="headerlink" title="Part11 订单"></a>Part11 订单</h1><h2 id="1-订单结算页"><a href="#1-订单结算页" class="headerlink" title="1. 订单结算页"></a>1. 订单结算页</h2><h3 id="1-1-收件地址分析"><a href="#1-1-收件地址分析" class="headerlink" title="1.1 收件地址分析"></a>1.1 收件地址分析</h3><p>用户从购物车页面点击结算，跳转到订单结算页，结算页需要加载用户对应的收件地址，如下图：</p><p><img src="/images/image-20210808120723726.png" alt="image-20210808120723726"></p><p>表结构分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_address` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `username` varchar(50) DEFAULT NULL COMMENT &#x27;用户名&#x27;,<br>  `provinceid` varchar(20) DEFAULT NULL COMMENT &#x27;省&#x27;,<br>  `cityid` varchar(20) DEFAULT NULL COMMENT &#x27;市&#x27;,<br>  `areaid` varchar(20) DEFAULT NULL COMMENT &#x27;县/区&#x27;,<br>  `phone` varchar(20) DEFAULT NULL COMMENT &#x27;电话&#x27;,<br>  `address` varchar(200) DEFAULT NULL COMMENT &#x27;详细地址&#x27;,<br>  `contact` varchar(50) DEFAULT NULL COMMENT &#x27;联系人&#x27;,<br>  `is_default` varchar(1) DEFAULT NULL COMMENT &#x27;是否是默认 1默认 0否&#x27;,<br>  `alias` varchar(50) DEFAULT NULL COMMENT &#x27;别名&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>我们可以根据用户登录名去tb_address表中查询对应的数据。</p><h3 id="1-2-实现用户收件地址查询"><a href="#1-2-实现用户收件地址查询" class="headerlink" title="1.2 实现用户收件地址查询"></a>1.2 实现用户收件地址查询</h3><h4 id="1-2-1-代码实现"><a href="#1-2-1-代码实现" class="headerlink" title="1.2.1 代码实现"></a>1.2.1 代码实现</h4><ol><li><p>业务层接口</p><p>修改changgou-service-user微服务，需改com.changgou.user.service.AddressService接口，添加根据用户名字查询用户收件地址信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 收件地址查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">List&lt;Address&gt; <span class="hljs-title">list</span><span class="hljs-params">(String username)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>业务层接口实现类</p><p>修改changgou-service-user微服务，修改impl.AddressServiceImpl类，添加根据用户查询用户收件地址信息实现方法，如下代码：</p><p>注意：</p><ul><li><p>不要忘了dao层的AddressMapper，是通过他才来操作数据库的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AddressMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">Address</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddressServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AddressService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressMapper addressMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Address&gt; <span class="hljs-title">list</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        Address address = <span class="hljs-keyword">new</span> Address();<br>        address.setUsername(username);<br>        List&lt;Address&gt; addressList = addressMapper.select(address);<br>        <span class="hljs-keyword">return</span> addressList;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层</p><p>修改changgou-service-user微服务，修改AddressController，添加根据用户名查询用户收件信息方法，代码如下：</p><p>注意：</p><ul><li><p><code>TokenDecode</code>要自己添加到spring容器。UserApplication中创建TokenDecode,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> TokenDecode <span class="hljs-title">tokenDecode</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> TokenDecode();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TokenDecode tokenDecode;<br><br><span class="hljs-comment">/****</span><br><span class="hljs-comment"> * 用户收件地址</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(value = &quot;/list&quot;)</span><br><span class="hljs-keyword">public</span> Result&lt;List&lt;Address&gt;&gt; list()&#123;<br>    <span class="hljs-comment">//获取用户登录信息</span><br>    Map&lt;String, String&gt; userMap = tokenDecode.getUserInfo();<br>    String username = userMap.get(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-comment">//查询用户收件地址</span><br>    List&lt;Address&gt; addressList = addressService.list(username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;查询成功！&quot;</span>,addressList);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>首先进行登录：<a href="http://localhost:8001/api/oauth/login">http://localhost:8001/api/oauth/login</a></p><p><img src="/images/image-20210808123905648.png" alt="image-20210808123905648"></p><p>然后再进行访问 <a href="http://localhost:8001/api/address/list">http://localhost:8001/api/address/list</a></p></li></ol><h3 id="1-3-页面模板渲染"><a href="#1-3-页面模板渲染" class="headerlink" title="1.3 页面模板渲染"></a>1.3 页面模板渲染</h3><p><img src="/images/image-20210808124121419.png" alt="image-20210808124121419"></p><p>购物车这块也使用的是模板渲染，用户先请求经过微服务网关，微服务网关转发到订单购物车模板渲染服务，模板渲染服务调用用户微服务和订单购物车微服务查询用户收件地址和购物车清单，然后到页面显示。</p><h4 id="1-3-1-准备工作"><a href="#1-3-1-准备工作" class="headerlink" title="1.3.1 准备工作"></a>1.3.1 准备工作</h4><ol><li><p>静态资源导入</p><p>将资料中的<code>order.html</code>拷贝到<code>changgou-web-order</code>工程的templates中</p><p><img src="/images/image-20210808124632321.png" alt="image-20210808124632321"></p></li><li><p>页面跳转实现</p><p>在changgou-web-order中创建<code>com.changgou.order.controller.OrderController</code>实现页面跳转，代码如下：</p><p><img src="/images/image-20210808130134240.png" alt="image-20210808130134240"></p></li><li><p>网关配置</p><p>修改changgou-gateway-web的application.yml文件，将订单的路由过滤地址添加上去，代码如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml">  <span class="hljs-comment">#购物车订单渲染微服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_order_web_route</span><br>  <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://order-web</span><br>  <span class="hljs-attr">predicates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/wcart/**,/api/worder/**</span><br>  <span class="hljs-attr">filters:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure><p>同时不要忘了把该地址添加到登录过滤地址中，修改<code>com.changgou.filter.URLFilter</code>，在orderFilterPath里添加<code>/api/worder/**</code>过滤</p></li></ol><h4 id="1-3-2-信息查询"><a href="#1-3-2-信息查询" class="headerlink" title="1.3.2 信息查询"></a>1.3.2 信息查询</h4><p>因为一会儿要调用changgou-service-user查询用户的收件地址信息，调用changgou-service-order查询购物车清单信息，所以我们需要创建Feign。购物车的Feign之前已经创建过了，所以只需要创建用户地址相关的即可。</p><ol><li><p>用户地址查询</p><p>在changgou-service-user-api中创建AddressFeign，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;user&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/address&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AddressFeign</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 查询用户的收件地址信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/list&quot;)</span><br>    Result&lt;List&lt;Address&gt;&gt; list();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查询购物车和用户收件地址信息</p><p>修改changgou-web-order中的<code>com.changgou.order.controller.OrderController</code>的readyOrder方法，在该方法中，使用feign调用查询收件地址信息和用户购物车信息，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/worder&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AddressFeign addressFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CartFeign cartFeign;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/ready/order&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">readyOrder</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        <span class="hljs-comment">//收件人的地址信息</span><br>        List&lt;Address&gt; addressList = addressFeign.list().getData();<br>        model.addAttribute(<span class="hljs-string">&quot;address&quot;</span>,addressList);<br><br>        <span class="hljs-comment">//购物车信息</span><br>        Map map = cartFeign.list();<br>        List&lt;OrderItem&gt; orderItemList = (List&lt;OrderItem&gt;) map.get(<span class="hljs-string">&quot;orderItemList&quot;</span>);<br>        Integer totalMoney = (Integer) map.get(<span class="hljs-string">&quot;totalMoney&quot;</span>);<br>        Integer totalNum = (Integer) map.get(<span class="hljs-string">&quot;totalNum&quot;</span>);<br><br>        model.addAttribute(<span class="hljs-string">&quot;carts&quot;</span>,orderItemList);<br>        model.addAttribute(<span class="hljs-string">&quot;totalMoney&quot;</span>,totalMoney);<br>        model.addAttribute(<span class="hljs-string">&quot;totalNum&quot;</span>,totalNum);<br><br>        <span class="hljs-comment">//默认收件人信息</span><br>        <span class="hljs-keyword">for</span> (Address address : addressList) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(address.getIsDefault()))&#123;<br>                <span class="hljs-comment">//默认收件人</span><br>                model.addAttribute(<span class="hljs-string">&quot;deAddr&quot;</span>,address);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;order&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据回显</p><p>修改order.html，回显收件地址信息和购物车信息，代码如下：</p><p>收件地址信息：</p><p><img src="/images/image-20210808131410819.png" alt="image-20210808131410819"></p><p>购物车清单：</p><p><img src="/images/image-20210808131443336.png" alt="image-20210808131443336"></p><p>测试效果：</p><p>基于登录过的前提下</p><p><img src="/images/image-20210808132559714.png" alt="image-20210808132559714"></p></li><li><p>默认收件地址选中</p><p>上面所有数据都查询出来了，但是用户的收件地址全部选中了(我这里提供的是完整的代码，所以上面只选中一个)，这里应该只有默认收件地址选中。修改order.html代码如下：</p><p><img src="/images/image-20210808132814643.png" alt="image-20210808132814643"></p><p>效果如下</p><p><img src="/images/image-20210808132730293.png" alt="image-20210808132730293"></p></li></ol><h4 id="1-3-3-记录选中收件人"><a href="#1-3-3-记录选中收件人" class="headerlink" title="1.3.3 记录选中收件人"></a>1.3.3 记录选中收件人</h4><p>用户每次点击收件人的时候，我们需要记录收件人信息。我们可以使用Vue，定义一个订单变量，并且每次点击的时候，将该收件人信息传给Vue的一个方法在订单变量中记录选中的用户信息即可。</p><ol><li><p>引入vue</p><p>我们要先引入Vue,在order.html中引入vue，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同时在72行左右添加一个id=”app”作为Vue入口标签</p><p><img src="/images/image-20210808133130110.png" alt="image-20210808133130110"></p></li><li><p>定义记录用户信息方法</p><p><img src="/images/image-20210808133255575.png" alt="image-20210808133255575"></p><p>修改地址列表，每次点击的时候调用上面的方法，代码如下：</p><p><img src="/images/image-20210808133355885.png" alt="image-20210808133355885"></p><p>将选中的地址收件人信息回显到页面输出，代码如下：</p><p><img src="/images/image-20210808133432751.png" alt="image-20210808133432751"></p><p>测试效果如下：</p><p><img src="/images/image-20210808133512274.png" alt="image-20210808133512274"></p></li><li><p>默认收件人加载</p><p>用户没有手动选择收件人信息的时候，收件人信息没有初始化。</p><p><img src="/images/image-20210808133559222.png" alt="image-20210808133559222"></p><p>我们可以在后台加载找出默认的收件人信息，前台通过Vue直接绑定给变量即可。</p><p>修改<code>com.changgou.order.controller.OrderController</code>,添加默认收件人信息判断，代码如下：</p><p><img src="/images/image-20210808133826109.png" alt="image-20210808133826109"></p><p>修改order.html，代码如下：</p><p><img src="/images/image-20210808133906590.png" alt="image-20210808133906590"></p><p>此时页面可以正常显示用户信息了。</p></li></ol><h4 id="1-3-4-支付方式选中"><a href="#1-3-4-支付方式选中" class="headerlink" title="1.3.4 支付方式选中"></a>1.3.4 支付方式选中</h4><p>支付方式为线上支付和货到付款，我们可以在order变量中定义一个属性<code>payType</code>,点击线上支付让他的值为1，点击货到付款，让他的值为0即可。</p><p>定义变量</p><p><img src="/images/image-20210808134036160.png" alt="image-20210808134036160"></p><p>修改页面，添加点击事件</p><p><img src="/images/image-20210808134118198.png" alt="image-20210808134118198"></p><h2 id="2-下单"><a href="#2-下单" class="headerlink" title="2. 下单"></a>2. 下单</h2><h3 id="2-1-业务分析"><a href="#2-1-业务分析" class="headerlink" title="2.1 业务分析"></a>2.1 业务分析</h3><p>点击提交订单的时候，会立即创建订单数据，创建订单数据会将数据存入到2张表中，分别是订单表和订单明细表，此处还需要修改商品对应的库存数量。</p><p><img src="/images/image-20210808141232601.png" alt="image-20210808141232601"></p><p>订单表结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_order` (<br>  `id` varchar(50) COLLATE utf8_bin NOT NULL COMMENT &#x27;订单id&#x27;,<br>  `total_num` int(11) DEFAULT NULL COMMENT &#x27;数量合计&#x27;,<br>  `total_money` int(11) DEFAULT NULL COMMENT &#x27;金额合计&#x27;,<br>  `pre_money` int(11) DEFAULT NULL COMMENT &#x27;优惠金额&#x27;,<br>  `post_fee` int(11) DEFAULT NULL COMMENT &#x27;邮费&#x27;,<br>  `pay_money` int(11) DEFAULT NULL COMMENT &#x27;实付金额&#x27;,<br>  `pay_type` varchar(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;支付类型，1、在线支付、0 货到付款&#x27;,<br>  `create_time` datetime DEFAULT NULL COMMENT &#x27;订单创建时间&#x27;,<br>  `update_time` datetime DEFAULT NULL COMMENT &#x27;订单更新时间&#x27;,<br>  `pay_time` datetime DEFAULT NULL COMMENT &#x27;付款时间&#x27;,<br>  `consign_time` datetime DEFAULT NULL COMMENT &#x27;发货时间&#x27;,<br>  `end_time` datetime DEFAULT NULL COMMENT &#x27;交易完成时间&#x27;,<br>  `close_time` datetime DEFAULT NULL COMMENT &#x27;交易关闭时间&#x27;,<br>  `shipping_name` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;物流名称&#x27;,<br>  `shipping_code` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;物流单号&#x27;,<br>  `username` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;用户名称&#x27;,<br>  `buyer_message` varchar(1000) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;买家留言&#x27;,<br>  `buyer_rate` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;是否评价&#x27;,<br>  `receiver_contact` varchar(50) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;收货人&#x27;,<br>  `receiver_mobile` varchar(12) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;收货人手机&#x27;,<br>  `receiver_address` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;收货人地址&#x27;,<br>  `source_type` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;订单来源：1:web，2：app，3：微信公众号，4：微信小程序  5 H5手机页面&#x27;,<br>  `transaction_id` varchar(30) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;交易流水号&#x27;,<br>  `order_status` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;订单状态,0:未完成,1:已完成，2：已退货&#x27;,<br>  `pay_status` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;支付状态,0:未支付，1：已支付，2：支付失败&#x27;,<br>  `consign_status` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;发货状态,0:未发货，1：已发货，2：已收货&#x27;,<br>  `is_delete` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;是否删除&#x27;,<br>  PRIMARY KEY (`id`),<br>  KEY `create_time` (`create_time`),<br>  KEY `status` (`order_status`),<br>  KEY `payment_type` (`pay_type`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;<br></code></pre></td></tr></table></figure><p>订单明细表结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_order_item` (<br>  `id` varchar(50) COLLATE utf8_bin NOT NULL COMMENT &#x27;ID&#x27;,<br>  `category_id1` int(11) DEFAULT NULL COMMENT &#x27;1级分类&#x27;,<br>  `category_id2` int(11) DEFAULT NULL COMMENT &#x27;2级分类&#x27;,<br>  `category_id3` int(11) DEFAULT NULL COMMENT &#x27;3级分类&#x27;,<br>  `spu_id` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;SPU_ID&#x27;,<br>  `sku_id` bigint(20) NOT NULL COMMENT &#x27;SKU_ID&#x27;,<br>  `order_id` bigint(20) NOT NULL COMMENT &#x27;订单ID&#x27;,<br>  `name` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;商品名称&#x27;,<br>  `price` int(20) DEFAULT NULL COMMENT &#x27;单价&#x27;,<br>  `num` int(10) DEFAULT NULL COMMENT &#x27;数量&#x27;,<br>  `money` int(20) DEFAULT NULL COMMENT &#x27;总金额&#x27;,<br>  `pay_money` int(11) DEFAULT NULL COMMENT &#x27;实付金额&#x27;,<br>  `image` varchar(200) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;图片地址&#x27;,<br>  `weight` int(11) DEFAULT NULL COMMENT &#x27;重量&#x27;,<br>  `post_fee` int(11) DEFAULT NULL COMMENT &#x27;运费&#x27;,<br>  `is_return` char(1) COLLATE utf8_bin DEFAULT NULL COMMENT &#x27;是否退货,0:未退货，1：已退货&#x27;,<br>  PRIMARY KEY (`id`),<br>  KEY `item_id` (`sku_id`),<br>  KEY `order_id` (`order_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;<br></code></pre></td></tr></table></figure><h3 id="2-2-下单实现"><a href="#2-2-下单实现" class="headerlink" title="2.2 下单实现"></a>2.2 下单实现</h3><p>下单的时候，先往tb_order表中增加数据，再往tb_order_item表中增加数据。</p><h4 id="2-2-1-代码实现"><a href="#2-2-1-代码实现" class="headerlink" title="2.2.1 代码实现"></a>2.2.1 代码实现</h4><p>这里先修改changgou-service-order微服务，实现下单操作，这里会生成订单号，我们首先需要在启动类中创建一个IdWorker对象。</p><p>在<code>com.changgou.OrderApplication</code>中创建IdWorker，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IdWorker <span class="hljs-title">idWorker</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> IdWorker(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>业务层实现类</p><p>实现逻辑：</p><ol><li>获取所有购物项</li><li>统计计算：总金额，总数量</li><li>填充订单数据并保存</li><li>获取每一个购物项保存到orderItem</li><li>删除购物车中数据</li></ol><p>修改订单微服务添加com.changgou.order.service.impl.OrderServiceImpl,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Order order)</span></span>&#123;<br>    <span class="hljs-comment">//1)获取所有购物项</span><br>    Map cartMap = cartService.list(order.getUsername());<br>    List&lt;OrderItem&gt; orderItemList = (List&lt;OrderItem&gt;) cartMap.get(<span class="hljs-string">&quot;orderItemList&quot;</span>);<br>    <span class="hljs-comment">//3）填充订单数据并保存</span><br>    order.setTotalNum((Integer) cartMap.get(<span class="hljs-string">&quot;totalNum&quot;</span>));<br>    order.setTotalMoney((Integer) cartMap.get(<span class="hljs-string">&quot;totalMoney&quot;</span>));<br>    order.setPayMoney((Integer) cartMap.get(<span class="hljs-string">&quot;totalMoney&quot;</span>));<br>    order.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>    order.setUpdateTime(order.getCreateTime());<br>    order.setBuyerRate(<span class="hljs-string">&quot;0&quot;</span>);        <span class="hljs-comment">//0:未评价，1：已评价</span><br>    order.setSourceType(<span class="hljs-string">&quot;1&quot;</span>);       <span class="hljs-comment">//来源，1：WEB</span><br>    order.setOrderStatus(<span class="hljs-string">&quot;0&quot;</span>);      <span class="hljs-comment">//0:未完成,1:已完成，2：已退货</span><br>    order.setPayStatus(<span class="hljs-string">&quot;0&quot;</span>);        <span class="hljs-comment">//0:未支付，1：已支付，2：支付失败</span><br>    order.setConsignStatus(<span class="hljs-string">&quot;0&quot;</span>);    <span class="hljs-comment">//0:未发货，1：已发货，2：已收货</span><br>    order.setId(idWorker.nextId()+<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">int</span> count = orderMapper.insertSelective(order);<br>   <br>    <span class="hljs-comment">//添加订单明细</span><br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        orderItem.setId(idWorker.nextId()+<span class="hljs-string">&quot;&quot;</span>);<br>        orderItem.setIsReturn(<span class="hljs-string">&quot;0&quot;</span>);<br>        orderItem.setOrderId(order.getId());<br>        orderItemMapper.insertSelective(orderItem);<br>    &#125;<br>   <br>    <span class="hljs-comment">//清除Redis缓存购物车数据</span><br>    redisTemplate.delete(<span class="hljs-string">&quot;Cart_&quot;</span>+order.getUsername());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层</p><p>修改changgou-service-order微服务，修改com.changgou.order.controller.OrderController类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 新增Order数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> order</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order)</span></span>&#123;<br>    <span class="hljs-comment">//获取用户名</span><br>    Map&lt;String, String&gt; userMap = tokenDecode.getUserInfo();<br>    String username = userMap.get(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-comment">//设置购买用户</span><br>    order.setUsername(username);<br>    orderService.add(order);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-2-渲染服务对接"><a href="#2-2-2-渲染服务对接" class="headerlink" title="2.2.2 渲染服务对接"></a>2.2.2 渲染服务对接</h4><p><img src="/images/image-20210808140007275-1628403167768.png" alt="image-20210808140007275"></p><p>我们需要在模板渲染端调用订单微服务实现下单操作,下单操作需要调用订单微服务，所以需要创建对应的Feign。(前面我已经创建好了，这里再来过一遍流程)</p><ol><li><p>Feign创建</p><p>修改changgou-service-order-api，添加OrderFeign，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/order&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>下单调用</p><p>修改changgou-web-order的<code>com.changgou.order.controller.OrderController</code>添加下单方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderFeign orderFeign;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 添加订单数据到购物车中</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> order</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(value = &quot;/add&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order)</span></span>&#123;<br>   Result result = orderFeign.add(order);<br>   <span class="hljs-keyword">return</span>  result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>页面调用</p><p>修改order.html，增加下单js方法，并且在页面点击下单调用，代码如下：</p><p><img src="/images/image-20210808141545746.png" alt="image-20210808141545746"></p><p>点击提交订单调用</p><p><img src="/images/image-20210808141647120.png" alt="image-20210808141647120"></p><p>保存订单测试，注意观察tb_order表数据以及tb_order_item表数据的变化</p></li></ol><h3 id="2-3-库存变更"><a href="#2-3-库存变更" class="headerlink" title="2.3 库存变更"></a>2.3 库存变更</h3><h4 id="2-3-1-业务分析"><a href="#2-3-1-业务分析" class="headerlink" title="2.3.1 业务分析"></a>2.3.1 业务分析</h4><p>上面操作只实现了下单操作，但对应的库存还没跟着一起减少，我们在下单之后，应该调用商品微服务，将下单的商品库存减少，销量增加。每次订单微服务只需要将用户名传到商品微服务，商品微服务通过用户名到Redis中查询对应的购物车数据，然后执行库存减少，库存减少需要控制当前商品库存&gt;=销售数量。</p><p><img src="/images/image-20210808141928494.png" alt="image-20210808141928494"></p><p>如何控制库存数量&gt;=购买数量呢？其实可以通过SQL语句实现，每次减少数量之前，加个条件判断。</p><p><code>where num&gt;=#&#123;num&#125;</code>即可。</p><p>商品服务需要查询购物车数据，所以需要引入订单的api，在pom.xml中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--order api 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_order_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-2-代码实现-1"><a href="#2-3-2-代码实现-1" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h3><p>要调用其他微服务，需要将头文件中的令牌数据携带到其他微服务中取，所以我们不能使用hystrix的多线程模式，修改changgou-service-order的applicatin.yml配置，代码如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">10000</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br></code></pre></td></tr></table></figure><p>每次还需要使用拦截器添加头文件信息，修改配置类com.changgou.OrderApplication添加拦截器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FeignInterceptor <span class="hljs-title">feignInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FeignInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>dao层</p><p>修改changgou-service-goods微服务的<code>com.changgou.goods.dao.SkuMapper</code>接口，增加库存递减方法,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递减库存</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> orderItem</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Update(&quot;UPDATE tb_sku SET num=num-#&#123;num&#125;,sale_num=sale_num+#&#123;num&#125; WHERE id=#&#123;skuId&#125; AND num&gt;=#&#123;num&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">decrCount</span><span class="hljs-params">(OrderItem orderItem)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>业务层</p><p>修改changgou-service-goods微服务的<code>com.changgou.goods.service.SkuService</code>接口，添加如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 库存递减</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decrCount</span><span class="hljs-params">(String username)</span></span>;<br></code></pre></td></tr></table></figure><p>修改changgou-service-order微服务的<code>com.changgou.goods.service.impl.SkuServiceImpl</code>实现类，添加一个实现方法，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 库存递减</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decrCount</span><span class="hljs-params">(String username)</span> </span>&#123;<br>    <span class="hljs-comment">//获取购物车数据</span><br>    List&lt;OrderItem&gt; orderItems = redisTemplate.boundHashOps(<span class="hljs-string">&quot;Cart_&quot;</span> + username).values();<br><br>    <span class="hljs-comment">//循环递减</span><br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItems) &#123;<br>        <span class="hljs-comment">//递减库存</span><br>        <span class="hljs-keyword">int</span> count = skuMapper.decrCount(orderItem);<br>        <span class="hljs-keyword">if</span>(count&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;库存不足，递减失败！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层</p><p>修改changgou-service-goods的<code>com.changgou.goods.controller.SkuController</code>类，添加库存递减方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 库存递减</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(value = &quot;/decr/count&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">decrCount</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span></span>&#123;<br>    <span class="hljs-comment">//库存递减</span><br>    skuService.decrCount(username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;库存递减成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建Feign</p><p>同时在changgou-service-goods-api工程添加<code>com.changgou.goods.feign.SkuFeign</code>的实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 库存递减</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(value = &quot;/decr/count&quot;)</span><br><span class="hljs-function">Result <span class="hljs-title">decrCount</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span> String username)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-3-3-调用库存递减"><a href="#2-3-3-调用库存递减" class="headerlink" title="2.3.3 调用库存递减"></a>2.3.3 调用库存递减</h4><p>修改changgou-service-order微服务的com.changgou.order.service.impl.OrderServiceImpl类的add方法，增加库存递减的调用。</p><p>先注入SkuFeign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> SkuFeign skuFeign;<br></code></pre></td></tr></table></figure><p>再在调用库存递减方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 增加</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> order</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Order order)</span></span>&#123;<br>    <span class="hljs-comment">//1)获取所有购物项</span><br>    Map cartMap = cartService.list(order.getUsername());<br>    List&lt;OrderItem&gt; orderItemList = (List&lt;OrderItem&gt;) cartMap.get(<span class="hljs-string">&quot;orderItemList&quot;</span>);<br>    <span class="hljs-comment">//3）填充订单数据并保存</span><br>    order.setTotalNum((Integer) cartMap.get(<span class="hljs-string">&quot;totalNum&quot;</span>));<br>    order.setTotalMoney((Integer) cartMap.get(<span class="hljs-string">&quot;totalMoney&quot;</span>));<br>    order.setPayMoney((Integer) cartMap.get(<span class="hljs-string">&quot;totalMoney&quot;</span>));<br>    order.setCreateTime(<span class="hljs-keyword">new</span> Date());<br>    order.setUpdateTime(order.getCreateTime());<br>    order.setBuyerRate(<span class="hljs-string">&quot;0&quot;</span>);        <span class="hljs-comment">//0:未评价，1：已评价</span><br>    order.setSourceType(<span class="hljs-string">&quot;1&quot;</span>);       <span class="hljs-comment">//来源，1：WEB</span><br>    order.setOrderStatus(<span class="hljs-string">&quot;0&quot;</span>);      <span class="hljs-comment">//0:未完成,1:已完成，2：已退货</span><br>    order.setPayStatus(<span class="hljs-string">&quot;0&quot;</span>);        <span class="hljs-comment">//0:未支付，1：已支付，2：支付失败</span><br>    order.setConsignStatus(<span class="hljs-string">&quot;0&quot;</span>);    <span class="hljs-comment">//0:未发货，1：已发货，2：已收货</span><br>    order.setId(idWorker.nextId()+<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">int</span> count = orderMapper.insertSelective(order);<br><br>    <span class="hljs-comment">//添加订单明细</span><br>    <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItemList) &#123;<br>        orderItem.setId(idWorker.nextId()+<span class="hljs-string">&quot;&quot;</span>);<br>        orderItem.setIsReturn(<span class="hljs-string">&quot;0&quot;</span>);<br>        orderItem.setOrderId(order.getId());<br>        orderItemMapper.insertSelective(orderItem);<br>    &#125;<br><br>    <span class="hljs-comment">//==================</span><br>    <span class="hljs-comment">//库存减库存</span><br>    skuFeign.decrCount(order.getUsername());<br>    <span class="hljs-comment">//==================</span><br><br>    <span class="hljs-comment">//清除Redis缓存购物车数据</span><br>    redisTemplate.delete(<span class="hljs-string">&quot;Cart_&quot;</span>+order.getUsername());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-4-测试"><a href="#2-3-4-测试" class="headerlink" title="2.3.4 测试"></a>2.3.4 测试</h4><p>库存减少前，查询数据库Sku数据如下：个数98，销量0</p><p>使用Postman执行 <a href="http://localhost:8001/api/order/add">http://localhost:8001/api/order/add</a></p><p>执行测试后，剩余库存97，销量1</p><h3 id="2-4-增加积分"><a href="#2-4-增加积分" class="headerlink" title="2.4 增加积分"></a>2.4 增加积分</h3><p>比如每次下单完成之后，给用户增加10个积分，支付完成后赠送优惠券，优惠券可用于支付时再次抵扣。我们先完成增加积分功能。如下表：points表示用户积分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `tb_user` (<br>  `username` varchar(50) NOT NULL COMMENT &#x27;用户名&#x27;,<br>  `password` varchar(100) NOT NULL COMMENT &#x27;密码，加密存储&#x27;,<br>  `phone` varchar(20) DEFAULT NULL COMMENT &#x27;注册手机号&#x27;,<br>  `email` varchar(50) DEFAULT NULL COMMENT &#x27;注册邮箱&#x27;,<br>  `created` datetime NOT NULL COMMENT &#x27;创建时间&#x27;,<br>  `updated` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,<br>  `source_type` varchar(1) DEFAULT NULL COMMENT &#x27;会员来源：1:PC，2：H5，3：Android，4：IOS&#x27;,<br>  `nick_name` varchar(50) DEFAULT NULL COMMENT &#x27;昵称&#x27;,<br>  `name` varchar(50) DEFAULT NULL COMMENT &#x27;真实姓名&#x27;,<br>  `status` varchar(1) DEFAULT NULL COMMENT &#x27;使用状态（1正常 0非正常）&#x27;,<br>  `head_pic` varchar(150) DEFAULT NULL COMMENT &#x27;头像地址&#x27;,<br>  `qq` varchar(20) DEFAULT NULL COMMENT &#x27;QQ号码&#x27;,<br>  `is_mobile_check` varchar(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;手机是否验证 （0否  1是）&#x27;,<br>  `is_email_check` varchar(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;邮箱是否检测（0否  1是）&#x27;,<br>  `sex` varchar(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;性别，1男，0女&#x27;,<br>  `user_level` int(11) DEFAULT NULL COMMENT &#x27;会员等级&#x27;,<br>  `points` int(11) DEFAULT NULL COMMENT &#x27;积分&#x27;,<br>  `experience_value` int(11) DEFAULT NULL COMMENT &#x27;经验值&#x27;,<br>  `birthday` datetime DEFAULT NULL COMMENT &#x27;出生年月日&#x27;,<br>  `last_login_time` datetime DEFAULT NULL COMMENT &#x27;最后登录时间&#x27;,<br>  PRIMARY KEY (`username`),<br>  UNIQUE KEY `username` (`username`) USING BTREE<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&#x27;用户表&#x27;;<br></code></pre></td></tr></table></figure><h4 id="2-4-1-代码实现"><a href="#2-4-1-代码实现" class="headerlink" title="2.4.1 代码实现"></a>2.4.1 代码实现</h4><ol><li><p>dao层</p><p>修改changgou-service-user微服务的<code>com.changgou.user.dao.UserMapper</code>接口，增加用户积分方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 增加用户积分</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pint</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Update(&quot;UPDATE tb_user SET points=points+#&#123;point&#125; WHERE  username=#&#123;username&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUserPoints</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;point&quot;)</span> Integer pint)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>业务层</p><p>修改changgou-service-user微服务的<code>com.changgou.user.service.UserService</code>接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 添加用户积分</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pint</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUserPoints</span><span class="hljs-params">(String username,Integer pint)</span></span>;<br></code></pre></td></tr></table></figure><p>修改changgou-service-user微服务的<code>com.changgou.user.service.impl.UserServiceImpl</code>，增加添加积分方法实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 修改用户积分</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pint</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addUserPoints</span><span class="hljs-params">(String username, Integer pint)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> userMapper.addUserPoints(username,pint);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层</p><p>修改changgou-service-user微服务的<code>com.changgou.user.controller.UserController</code>，添加增加用户积分方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> TokenDecode tokenDecode;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 增加用户积分</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> points:要添加的积分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(value = &quot;/points/add&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">addPoints</span><span class="hljs-params">(Integer points)</span></span>&#123;<br>    <span class="hljs-comment">//获取用户名</span><br>    Map&lt;String, String&gt; userMap = tokenDecode.getUserInfo();<br>    String username = userMap.get(<span class="hljs-string">&quot;username&quot;</span>);<br><br>    <span class="hljs-comment">//添加积分</span><br>    userService.addUserPoints(username,points);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加积分成功！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Feign添加</p><p>修改changgou-service-user-api工程，修改<code>com.changgou.user.feign.UserFeign</code>，添加增加用户积分方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 添加用户积分</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> points</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(value = &quot;/points/add&quot;)</span><br><span class="hljs-function">Result <span class="hljs-title">addPoints</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;points&quot;)</span>Integer points)</span></span>;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-4-2-增加积分调用"><a href="#2-4-2-增加积分调用" class="headerlink" title="2.4.2 增加积分调用"></a>2.4.2 增加积分调用</h4><p>修改changgou-service-order，添加changgou-service-user-api的依赖，修改pom.xml,添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--user api 依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_user_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在增加订单的时候，同时添加用户积分，修改changgou-service-order微服务的<code>com.changgou.order.service.impl.OrderServiceImpl</code>下单方法，增加调用添加积分方法，代码如下：</p><p><img src="/images/image-20210808210321063.png" alt="image-20210808210321063"></p><p>修改changgou-service-order的启动类<code>com.changgou.OrderApplication</code>，添加feign的包路径：</p><p><img src="/images/image-20210808210556231.png" alt="image-20210808210556231"></p>]]></content>
    
    
    <categories>
      
      <category>畅购商城项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第三部分</title>
    <link href="/2021/07/28/1.3%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/28/1.3%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part09-用户认证"><a href="#Part09-用户认证" class="headerlink" title="Part09 用户认证"></a>Part09 用户认证</h1><h2 id="1-用户认证分析"><a href="#1-用户认证分析" class="headerlink" title="1. 用户认证分析"></a>1. 用户认证分析</h2><p><img src="/images/image-20210806165006789.png" alt="image-20210806165006789"></p><p>上面流程图描述了用户要操作的各个微服务，用户查看个人信息需要访问客户微服务，下单需要访问订单微服务，秒杀抢购商品需要访问秒杀微服务。每个服务都需要认证用户的身份，身份认证成功后，需要识别用户的角色然后授权访问对应的功能。</p><h3 id="1-1-单点登录"><a href="#1-1-单点登录" class="headerlink" title="1.1 单点登录"></a>1.1 单点登录</h3><p>用户访问的项目中，至少有3个微服务需要识别用户身份，如果用户访问每个微服务都登录一次就太麻烦了，为了提高用户的体验，我们需要实现让用户在一个系统中登录，其他任意受信任的系统都可以访问，这个功能就叫单点登录。</p><p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。 SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统</p><h3 id="1-2-第三方账号登陆"><a href="#1-2-第三方账号登陆" class="headerlink" title="1.2 第三方账号登陆"></a>1.2 第三方账号登陆</h3><p>随着国内及国外巨头们的平台开放战略以及移动互联网的发展，第三方登录已经不是一个陌生的产品设计概念了。 所谓的第三方登录，是说基于用户在第三方平台上已有的账号和密码来快速完成己方应用的登录或者注册的功能。而这里的第三方平台，一般是已经拥有大量用户的平台，国外的比如Facebook，Twitter等，国内的比如微博、微信、QQ等。</p><p><img src="/images/image-20210806165406268.png" alt="image-20210806165406268"></p><h2 id="2-认证解决方案"><a href="#2-认证解决方案" class="headerlink" title="2. 认证解决方案"></a>2. 认证解决方案</h2><h3 id="2-1-单点登录技术方案"><a href="#2-1-单点登录技术方案" class="headerlink" title="2.1 单点登录技术方案"></a>2.1 单点登录技术方案</h3><p>分布式系统要实现单点登录，通常将认证系统独立抽取出来，并且将用户身份信息存储在单独的存储介质，比如： MySQL、Redis，考虑性能要求，通常存储在Redis中，如下图：</p><p><img src="/images/image-20210806165638050.png" alt="image-20210806165638050"></p><p>Java中有很多用户认证的框架都可以实现单点登录：</p><ul><li>Apache Shiro</li><li>CAS</li><li>Spring security  </li></ul><h3 id="第三方登录技术方案"><a href="#第三方登录技术方案" class="headerlink" title="第三方登录技术方案"></a>第三方登录技术方案</h3><h4 id="2-2-1-Oauth2认证流程"><a href="#2-2-1-Oauth2认证流程" class="headerlink" title="2.2.1 Oauth2认证流程"></a>2.2.1 Oauth2认证流程</h4><p>第三方认证技术方案最主要是解决认证协议的通用标准问题，因为要实现跨系统认证，各系统之间要遵循一定的 接口协议。 OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认 证服务，任何服务提供商都可以实现自身的OAUTH认证服务，因而OAUTH是开放的。业界提供了OAUTH的多种实现如PHP、JavaScript，Java，Ruby等各种语言开发包，大大节约了程序员的时间，因而OAUTH是简易的。互联网很多服务如Open API，很多大公司如Google，Yahoo，Microsoft等都提供了OAUTH认证服务，这些都足以说明OAUTH标准逐渐成为开放资源授权的标准。 Oauth协议目前发展到2.0版本，1.0版本过于复杂，2.0版本已得到广泛应用。 参考：<a href="https://baike.baidu.com/item/oAuth/7153134?fr=aladdin">https://baike.baidu.com/item/oAuth/7153134?fr=aladdin</a> Oauth协议：<a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a> 下边分析一个Oauth2认证的例子，黑马程序员网站使用微信认证的过程</p><p><img src="/images/image-20210806170159857.png" alt="image-20210806170159857"></p><ol><li><p>客户端请求第三方授权</p><p>用户进入黑马程序员的登录页面，点击微信的图标以微信账号登录系统，用户是自己在微信里信息的资源拥有者。</p><p><img src="/images/image-20210806171203045.png" alt="image-20210806171203045"></p><p>点击“用QQ账号登录”出现一个二维码，此时用户扫描二维码，开始给黑马程序员授权。</p><p><img src="/images/image-20210806171233254.png" alt="image-20210806171233254"></p></li><li><p>资源拥有者同意给客户端授权</p><p>资源拥有者扫描二维码表示资源拥有者同意给客户端授权，微信会对资源拥有者的身份进行验证， 验证通过后，QQ会询问用户是否给授权黑马程序员访问自己的QQ数据，用户点击“确认登录”表示同意授权，QQ认证服务器会 颁发一个授权码，并重定向到黑马程序员的网站</p><p><img src="/images/image-20210806171257120.png" alt="image-20210806171257120"></p></li><li><p>客户端获取到授权码，请求认证服务器申请令牌 此过程用户看不到，客户端应用程序请求认证服务器，请求携带授权码。</p></li><li><p>认证服务器向客户端响应令牌 认证服务器验证了客户端请求的授权码，如果合法则给客户端颁发令牌，令牌是客户端访问资源的通行证。 此交互过程用户看不到，当客户端拿到令牌后，用户在黑马程序员看到已经登录成功。</p></li><li><p>客户端请求资源服务器的资源 客户端携带令牌访问资源服务器的资源。 黑马程序员网站携带令牌请求访问微信服务器获取用户的基本信息。</p></li><li><p>资源服务器返回受保护资源 资源服务器校验令牌的合法性，如果合法则向用户响应资源信息内容。 注意：资源服务器和认证服务器可以是一个服务也可以分开的服务，如果是分开的服务, 资源服务器通常要请求认证服务器来校验令牌的合法性。</p></li></ol><p>Oauth2.0认证流程如下： 引自Oauth2.0协议rfc6749 <a href="https://tools.ietf.org/html/rfc6749">https://tools.ietf.org/html/rfc6749</a></p><p><img src="/images/image-20210806171345750.png" alt="image-20210806171345750"></p><p>Oauth2包括以下角色：</p><ol><li>客户端本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：畅购Android客户端、畅购Web客户端（浏览器端）、微信客户端等。</li><li>资源拥有者 通常为用户，也可以是应用程序，即该资源的拥有者。</li><li>授权服务器（也称认证服务器） 用来对资源拥有的身份进行认证、对访问资源进行授权。客户端要想访问资源需要通过认证服务器由资源拥有者授权后方可访问。</li><li>资源服务器 存储资源的服务器，比如，畅购用户管理服务器存储了畅购的用户信息，微信的资源服务存储了微信的用户信息等。客户端最终访问资源服务器获取资源信息。</li></ol><h4 id="2-2-2-Oauth2在项目的应用"><a href="#2-2-2-Oauth2在项目的应用" class="headerlink" title="2.2.2 Oauth2在项目的应用"></a>2.2.2 Oauth2在项目的应用</h4><p>Oauth2是一个标准的开放的授权协议，应用程序可以根据自己的要求去使用Oauth2，项目中使用Oauth2可以实现实现如下功能：</p><ol><li>本系统访问第三方系统的资源</li><li>外部系统访问本系统的资源</li><li>本系统前端（客户端） 访问本系统后端微服务的资源</li><li>本系统微服务之间访问资源，例如：微服务A访问微服务B的资源，B访问A的资源</li></ol><h3 id="2-3-Spring-security-Oauth2认证解决方案"><a href="#2-3-Spring-security-Oauth2认证解决方案" class="headerlink" title="2.3 Spring security + Oauth2认证解决方案"></a>2.3 Spring security + Oauth2认证解决方案</h3><p>本项目采用 Spring security + Oauth2+JWT完成用户认证及用户授权，Spring security 是一个强大的和高度可定制的身份验证和访问控制框架，Spring security 框架集成了Oauth2协议，下图是项目认证架构图：</p><p><img src="/images/image-20210806172024614.png" alt="image-20210806172024614"></p><ol><li>用户请求认证服务完成认证</li><li>认证服务下发用户身份令牌，拥有身份令牌表示身份合法</li><li>用户携带令牌请求资源服务，请求资源服务必先经过网关</li><li>网关校验用户身份令牌的合法，不合法表示用户没有登录，如果合法则放行继续访问</li><li>资源服务获取令牌，根据令牌完成授权</li><li>资源服务完成授权则响应资源信息</li></ol><h2 id="3-Jwt令牌回顾"><a href="#3-Jwt令牌回顾" class="headerlink" title="3. Jwt令牌回顾"></a>3. Jwt令牌回顾</h2><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于 在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公 钥/私钥对来签名，防止被篡改。</p><p>官网：<a href="https://jwt.io/">https://jwt.io/</a></p><p>标准：<a href="https://tools.ietf.org/html/rfc7519">https://tools.ietf.org/html/rfc7519</a></p><p>JWT令牌的优点：</p><ol><li>jwt基于json，非常方便解析</li><li>可以在令牌中自定义丰富的内容，易扩展</li><li>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高</li><li>资源服务使用JWT可不依赖认证服务即可完成授权</li></ol><p>缺点：</p><ul><li>JWT令牌较长，占存储空间比较大</li></ul><h3 id="3-1-令牌结构"><a href="#3-1-令牌结构" class="headerlink" title="3.1 令牌结构"></a>3.1 令牌结构</h3><p>JWT令牌由三部分组成，每部分中间使用点（.）分隔，比如：xxxxx.yyyyy.zzzzz</p><p><strong>Header</strong></p><p>头部包括令牌的类型（即JWT）及使用的哈希算法（如HMAC SHA256或RSA）</p><p>一个例子如下：</p><p>下边是Header部分的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,<br>    <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将上边的内容使用Base64Url编码，得到一个字符串就是JWT令牌的第一部分</p><p><strong>Payload</strong></p><p>第二部分是负载，内容也是一个json对象，它是存放有效信息的地方，它可以存放jwt提供的现成字段，比 如：iss（签发者）,exp（过期时间戳）, sub（面向的用户）等，也可自定义字段。</p><p>此部分不建议存放敏感信息，因为此部分可以解码还原原始内容。</p><p>最后将第二部分负载使用Base64Url编码，得到一个字符串就是JWT令牌的第二部分。</p><p>一个例子：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;456&quot;</span>,<br>    <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Signature</strong></p><p>第三部分是签名，此部分用于防止jwt内容被篡改。</p><p>这个部分使用base64url将前两部分进行编码，编码后使用点（.）连接组成字符串，最后使用header中声明 签名算法进行签名。</p><p>一个例子：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">HMACSHA256</span>(</span><br><span class="hljs-function">    <span class="hljs-title">base64UrlEncode</span>(<span class="hljs-variable">header</span>) + <span class="hljs-string">&quot;.&quot;</span> +</span><br><span class="hljs-function">    <span class="hljs-title">base64UrlEncode</span>(<span class="hljs-variable">payload</span>) + <span class="hljs-string">&quot;.&quot;</span> +</span><br><span class="hljs-function">    <span class="hljs-variable">secret</span>)</span><br></code></pre></td></tr></table></figure><p>base64UrlEncode(header)：jwt令牌的第一部分。</p><p>base64UrlEncode(payload)：jwt令牌的第二部分。</p><p>secret：签名所使用的密钥。</p><h3 id="3-2-生成私钥公钥"><a href="#3-2-生成私钥公钥" class="headerlink" title="3.2 生成私钥公钥"></a>3.2 生成私钥公钥</h3><p>私钥加密，公钥解析</p><p>私钥作为签名用于生成令牌，用公钥来校验。相应的公钥只能校验相应的私钥</p><p>JWT令牌生成采用非对称加密算法</p><ol><li><p>生成密钥证书 下边命令生成密钥证书，采用RSA 算法每个证书包含公钥和私钥</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">keytool -genkeypair -<span class="hljs-built_in">alias</span> changgou -keyalg RSA -keypass changgou -keystore changgou.jks -storepass changgou <br></code></pre></td></tr></table></figure><p>Keytool 是一个java提供的证书管理工具</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-keyword">alias</span>：密钥的别名 </span><br><span class="ruby"></span>-<span class="ruby">keyalg：使用的hash算法 </span><br><span class="ruby"></span>-<span class="ruby">keypass：密钥的访问密码 </span><br><span class="ruby"></span>-<span class="ruby">keystore：密钥库文件名，changgou.jks保存了生成的证书 </span><br><span class="ruby"></span>-<span class="ruby">storepass：密钥库的访问密码 </span><br></code></pre></td></tr></table></figure><p>查询证书信息：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">keytool -<span class="hljs-type">list</span> -keystore changgou.jks<br></code></pre></td></tr></table></figure></li><li><p>导出公钥</p><p>openssl是一个加解密工具包，这里使用openssl来导出公钥信息</p><p>安装 openssl：<a href="http://slproweb.com/products/Win32OpenSSL.html">http://slproweb.com/products/Win32OpenSSL.html</a></p><p>安装资料目录下的Win64OpenSSL-1_1_1b.exe</p><p>配置openssl的path环境变量(有两种方式)</p><ol><li><p>方法一</p><p>先编辑一个系统变量</p><p><img src="/images/image-20210806194341094.png" alt="image-20210806194341094"></p><p>再双击Path配置环境变量。看高亮代码</p><p><img src="/images/image-20210806194443619.png" alt="image-20210806194443619"></p></li><li><p>方法二</p><p>直接在环境变量页面配置路径</p><p><img src="/images/image-20210806194546318.png" alt="image-20210806194546318"></p></li></ol><p>cmd进入changgou.jks文件所在目录(这里就是jwt目录)执行如下命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">keytool -list -rfc --keystore changgou.jks <span class="hljs-string">| openssl x509 -inform pem -pubkey</span><br></code></pre></td></tr></table></figure><p>下面段内容是公钥</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">-----<span class="hljs-keyword">BEGIN</span> PUBLIC KEY-----<br>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjhE4fgF8oIaY5ERSiigWJJ2OK2icj7XU<span class="hljs-regexp">/lyB3CKdEcLcGw6bStTR9FdSJWSFvSbYl/</span>q0QlsWQvEHrPkvGEXWK5fQmdY71<span class="hljs-regexp">/QbGR+eoIQiE0U0QAowI1MLy+XwMvU8DfFyNPmMevq0OOW/</span><span class="hljs-number">4</span>+mqlPyvzCqV1N5VjpUsvcYoso5kHOpiWqf0aSTcTyY3FBgtv3phSA69VO4OgVq9+ma13TerauY<span class="hljs-regexp">/BbzQAIMOYP8Brla3I+8HVVxGgc2O5ij4+SkLISPNK5G1e00JvN5H5JiKaaBd3rFFd+NHvUv5TTrPjNOQX4uSo7bbhJGqglf60Wr5rYa0wzqbRkS7enW4qfdg3I/</span>YKQIDAQAB<br>-----<span class="hljs-keyword">END</span> PUBLIC KEY-----<br></code></pre></td></tr></table></figure><p>将上边的公钥拷贝到文本public.key文件中，合并为一行,可以将它放到需要实现授权认证的工程中。</p></li></ol><h3 id="3-3-基于私钥生成jwt令牌（小案例）"><a href="#3-3-基于私钥生成jwt令牌（小案例）" class="headerlink" title="3.3 基于私钥生成jwt令牌（小案例）"></a>3.3 基于私钥生成jwt令牌（小案例）</h3><h4 id="3-3-1导入认证服务"><a href="#3-3-1导入认证服务" class="headerlink" title="3.3.1导入认证服务"></a>3.3.1导入认证服务</h4><ol><li><p>将课件中<code>changgou_user_auth</code>的工程导入到项目中去，如果导入后包名，pom文件显示格式不对，可以按照如下操作</p><p>点击加号</p><p><img src="/images/image-20210806201611292.png" alt="image-20210806201611292"></p><p>点击pom文件</p><p><img src="/images/image-20210806201718682.png" alt="image-20210806201718682"></p><p>最后点击ok，如果是个正常包这里点不了。</p><p><img src="/images/image-20210806201758851.png" alt="image-20210806201758851"></p></li><li><p>认证服务中创建测试类CreateJwtTest</p><p>注意：</p><ul><li><p>将需要用到的文件放到resources下</p><p><img src="/images/image-20210806202207124.png" alt="image-20210806202207124"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changgou.oauth;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.Jwt;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.JwtHelper;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.crypto.sign.RsaSigner;<br><span class="hljs-keyword">import</span> org.springframework.security.rsa.crypto.KeyStoreKeyFactory;<br><br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.interfaces.RSAPrivateKey;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateJwtTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createJWT</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//基于私钥生成jwt</span><br>        <span class="hljs-comment">//1. 创建一个秘钥工厂</span><br>        <span class="hljs-comment">//1: 指定私钥的位置  </span><br>        ClassPathResource classPathResource = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;changgou.jks&quot;</span>);<br>        <span class="hljs-comment">//2: 指定秘钥库的密码</span><br>        String keyPass = <span class="hljs-string">&quot;changgou&quot;</span>;<br>        KeyStoreKeyFactory keyStoreKeyFactory = <span class="hljs-keyword">new</span> KeyStoreKeyFactory(classPathResource,keyPass.toCharArray());<br><br>        <span class="hljs-comment">//2. 基于工厂获取私钥</span><br>        String alias = <span class="hljs-string">&quot;changgou&quot;</span>;<br>        String password = <span class="hljs-string">&quot;changgou&quot;</span>;<br>        KeyPair keyPair = keyStoreKeyFactory.getKeyPair(alias, password.toCharArray());<br>        <span class="hljs-comment">//将当前的私钥转换为rsa私钥</span><br>        RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();<br><br>        <span class="hljs-comment">//3.生成jwt</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap();<br>        map.put(<span class="hljs-string">&quot;company&quot;</span>,<span class="hljs-string">&quot;heima&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;beijing&quot;</span>);<br><br>        Jwt jwt = JwtHelper.encode(JSON.toJSONString(map), <span class="hljs-keyword">new</span> RsaSigner(rsaPrivateKey));<br>        String jwtEncoded = jwt.getEncoded();<br>        System.out.println(jwtEncoded);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>基于公钥解析jwt令牌</p><p>上面创建令牌后，我们可以对JWT令牌进行解析，这里解析需要用到公钥，我们可以将之前生成的公钥public.key拷贝出来用字符串变量token存储，然后通过公钥解密。</p><p>在changgou-user-oauth创建测试类com.changgou.token.ParseJwtTest实现解析校验令牌数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.Jwt;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.JwtHelper;<br><span class="hljs-keyword">import</span> org.springframework.security.jwt.crypto.sign.RsaVerifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParseJwtTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseJwt</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//基于公钥去解析jwt</span><br>        String jwt =<span class="hljs-string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiYmVpamluZyIsImNvbXBhbnkiOiJoZWltYSJ9.cjZNz8G0m4noNYN2VM1SH3ujAtbHElW5Vtbadb0NDI0cjM1DaAXzMA53Qbj4pmVQPl_IfSKqUEXbLxowdRa5NHR43laFsR0kzGbJiTINfSVSroSslYpDdEVwCeAF_a7I-R819YTj4p6sjuYKXbzXpeZQErczFbWWWGR2_U44xH6u1ejRNv8PikFiuzNw-muL7zUJkvqeSJzbEMnQdZMbfvZp4LtSI6B4G_PqpdNXkv19-juxAh99VgJInH_ItF0y5IBOxofA7gRebCZmU8L57gO9ohf2L00D95kis_Ji8lmA1ptLIfXqO_qLVvLBUNH-VtgjGAF0-0pyB-5jlbHP7w&quot;</span>;<br><br>        String publicKey =<span class="hljs-string">&quot;-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvFsEiaLvij9C1Mz+oyAmt47whAaRkRu/8kePM+X8760UGU0RMwGti6Z9y3LQ0RvK6I0brXmbGB/RsN38PVnhcP8ZfxGUH26kX0RK+tlrxcrG+HkPYOH4XPAL8Q1lu1n9x3tLcIPxq8ZZtuIyKYEmoLKyMsvTviG5flTpDprT25unWgE4md1kthRWXOnfWHATVY7Y/r4obiOL1mS5bEa/iNKotQNnvIAKtjBM4RlIDWMa6dmz+lHtLtqDD2LF1qwoiSIHI75LQZ/CNYaHCfZSxtOydpNKq8eb1/PGiLNolD4La2zf0/1dlcr5mkesV570NxRmU1tFm8Zd3MZlZmyv9QIDAQAB-----END PUBLIC KEY-----&quot;</span>;<br><br>        Jwt token = JwtHelper.decodeAndVerify(jwt, <span class="hljs-keyword">new</span> RsaVerifier(publicKey));<br><br>        String claims = token.getClaims();<br>        System.out.println(claims);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果为：（就是创建令牌时放入的数据）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-attr">&quot;company&quot;</span>:<span class="hljs-string">&quot;heima&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-Oauth2-0入门"><a href="#4-Oauth2-0入门" class="headerlink" title="4. Oauth2.0入门"></a>4. Oauth2.0入门</h2><h3 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h3><p>这里都准备好了，主要看下表结构就可以了</p><ol><li><p>搭建认证服务器之前，先在用户系统表结构中增加如下表结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE `oauth_client_details` (<br>  `client_id` varchar(48) NOT NULL COMMENT &#x27;客户端ID，主要用于标识对应的应用&#x27;,<br>  `resource_ids` varchar(256) DEFAULT NULL,<br>  `client_secret` varchar(256) DEFAULT NULL COMMENT &#x27;客户端秘钥，BCryptPasswordEncoder加密&#x27;,<br>  `scope` varchar(256) DEFAULT NULL COMMENT &#x27;对应的范围&#x27;,<br>  `authorized_grant_types` varchar(256) DEFAULT NULL COMMENT &#x27;认证模式&#x27;,<br>  `web_server_redirect_uri` varchar(256) DEFAULT NULL COMMENT &#x27;认证后重定向地址&#x27;,<br>  `authorities` varchar(256) DEFAULT NULL,<br>  `access_token_validity` int(11) DEFAULT NULL COMMENT &#x27;令牌有效期&#x27;,<br>  `refresh_token_validity` int(11) DEFAULT NULL COMMENT &#x27;令牌刷新周期&#x27;,<br>  `additional_information` varchar(4096) DEFAULT NULL,<br>  `autoapprove` varchar(256) DEFAULT NULL,<br>  PRIMARY KEY (`client_id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure></li><li><p>导入1条初始化数据,其中加密字符明文为changgou：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO `oauth_client_details` VALUES (&#x27;changgou&#x27;, null, &#x27;$2a$10$Yvkp3xzDcri6MAsPIqnzzeGBHez1QZR3A079XDdmNU4R725KrkXi2&#x27;, &#x27;app&#x27;, &#x27;authorization_code,password,refresh_token,client_credentials&#x27;, &#x27;http://localhost&#x27;, null, &#x27;43200&#x27;, &#x27;43200&#x27;, null, null);<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-2-Oauth2授权模式介绍"><a href="#4-2-Oauth2授权模式介绍" class="headerlink" title="4.2 Oauth2授权模式介绍"></a>4.2 Oauth2授权模式介绍</h3><p>Oauth2有以下授权模式：</p><ol><li>授权码模式（Authorization Code）</li><li>隐式授权模式（Implicit）</li><li>密码模式（Resource Owner Password Credentials） </li><li>客户端模式（Client Credentials）</li></ol><p>其中授权码模式和密码模式应用较多，本小节介绍授权码模式。</p><h4 id="4-2-1-授权码模式"><a href="#4-2-1-授权码模式" class="headerlink" title="4.2.1 授权码模式"></a>4.2.1 授权码模式</h4><ol><li><p><strong>授权码授权流程</strong></p><ol><li>客户端（这个客户端不是用户，是客户端服务器）请求第三方授权</li><li>用户同意给客户端授权</li><li>客户端获取到授权码，请求认证服务器申请令牌</li><li>认证服务器向客户端响应令牌</li><li>客户端请求资源服务器的资源，资源服务校验令牌合法性，完成授权</li><li>资源服务器返回受保护资源</li></ol></li><li><p><strong>申请授权码</strong></p><p>请求认证服务获取授权码：</p><p>注意：</p><ul><li><p>9200是项目中设置好的用户认证微服务的端口号</p></li><li><p><code>/oauth/authorize</code>是oauth2.0内部已经规定好的获得授权码的路径</p></li><li><p><code>client_id=changgou</code>是服务器数据库中表的字段和对应的属性</p><p><img src="/images/image-20210806223116209.png" alt="image-20210806223116209"></p></li><li><p><code>response_type=code</code>表明用的是oauth2.0的授权码模式</p></li><li><p><code>scop=app</code>也是表中的字段和属性</p><p><img src="/images/image-20210806223447185.png" alt="image-20210806223447185"></p></li><li><p><code>redirect_uri</code>：跳转uri，当授权码申请成功后会跳转到此地址，并在后边带上code参数（授权码）</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Get请求：<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/oauth/</span>authorize?client_id=changgou&amp;response_type=code&amp;scop=app&amp;redirect_uri=http:<span class="hljs-regexp">//</span>localhost<br></code></pre></td></tr></table></figure><p>在浏览器输入上面的请求，发现跳转到了登陆页面</p><p><img src="/images/image-20210806223824348.png" alt="image-20210806223824348"></p><p>输入账号和密码，点击Login。 Spring Security接收到请求会调用UserDetailsService接口（这个接口它内部自己写好了，不用编写）的loadUserByUsername方法查询用户正确的密码。 当前导入的基础工程中客户端ID为changgou，秘钥也为changgou（这个客户端ID还有密钥的加密字符在最开始被插入数据库了，所以这里能够登录成功）即可认证通过。</p><p>接下来进入授权页面：</p><p><img src="/images/image-20210806224201321.png" alt="image-20210806224201321"></p><p>点击Authorize,接下来返回授权码： 认证服务携带授权码跳转redirect_uri,code=OicI5N就是返回的授权码, <strong>每一个授权码只能使用一次</strong></p><p><img src="/images/image-20210806224319499.png" alt="image-20210806224319499"></p></li><li><p><strong>申请令牌</strong></p><p>拿到授权码后，申请令牌</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Post请求：<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/oauth/</span>token<br></code></pre></td></tr></table></figure><p>此链接需要使用 http Basic认证(下图Basic Auth就是这个认证)</p><p>以上测试使用postman完成：</p><p><img src="/images/image-20210806225752649.png" alt="image-20210806225752649"></p><p><img src="/images/image-20210806225820728.png" alt="image-20210806225820728"></p><p>客户端Id和客户端密码会匹配数据库oauth_client_details表中的客户端id及客户端密码。</p><p>点击发送： 申请令牌成功</p><p><img src="/images/image-20210806230037261.png" alt="image-20210806230037261"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">access_token：访问令牌，携带此令牌访问资源 <br>token_type：有<span class="hljs-keyword">MAC</span> <span class="hljs-keyword">Token</span>与Bearer <span class="hljs-keyword">Token</span>两种类型，两种的校验算法不同，RFC 6750建议Oauth2采用 Bearer <span class="hljs-keyword">Token</span>（http:<span class="hljs-comment">//www.rfcreader.com/#rfc6750）。 </span><br>refresh_token：刷新令牌，使用此令牌可以延长访问令牌的过期时间。 <br>expires_in：过期时间，单位为秒。 <br>scope：范围，与定义的客户端范围一致。    <br>jti：当前<span class="hljs-keyword">token</span>的唯一标识<br></code></pre></td></tr></table></figure><p>关于access_token和jti的关系，需要多强调一点：</p><ul><li><p>jti与access_token成对出现，一 一对应。他俩是一个键值对。jti作为键存储在cookie中，access_token作为值存储在redis中（因为cookei存放的数据长度有限，不然不需要下面的</p><p>redis）</p></li></ul></li><li><p><strong>令牌校验</strong>  </p><p>Spring Security Oauth2提供校验令牌的端点，如下：</p><p>Get: <a href="http://localhost:9200/oauth/check_token?token=">http://localhost:9200/oauth/check_token?token=</a> [access_token]</p><p>（这里的[access_token]就是刚刚获得的令牌）</p><p>使用postman测试如下:</p><p><img src="/images/image-20210806231247708.png" alt="image-20210806231247708"></p><p>此时说明校验成功</p></li><li><p><strong>刷新令牌</strong></p><p>刷新令牌是当令牌快过期时重新生成一个令牌，它与授权码授权和密码授权生成令牌不同，刷新令牌不需要授权码 也不需要账号和密码，只需要一个刷新令牌、客户端id和客户端密码。</p><p>测试如下： Post：<a href="http://localhost:9200/oauth/token">http://localhost:9200/oauth/token</a></p><p>参数：</p><ul><li><p>grant_type： 固定为 refresh_token</p></li><li><p>refresh_token：刷新令牌（注意不是access_token，而是refresh_token）</p><p><img src="/images/image-20210806231738266.png" alt="image-20210806231738266"></p></li></ul></li></ol><h4 id="4-2-2-密码模式"><a href="#4-2-2-密码模式" class="headerlink" title="4.2.2 密码模式"></a>4.2.2 密码模式</h4><p>密码模式（Resource Owner Password Credentials）与授权码模式的区别是申请令牌不再使用授权码，而是直接 通过用户名和密码即可申请令牌。</p><ol><li><p><strong>申请令牌</strong></p><p>测试如下</p><p>注意：</p><ul><li>这里的用户名和密码就是真正的用户的账号和密码，和前面客户端的不是一个概念。</li><li>这里的用户名和密码需要去<code>tb_user</code>表中找，但是这里代码还没有完成，都用的<code>itheima</code>做密码</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">Post请求：<br>http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9200</span><span class="hljs-regexp">/oauth/</span>token<br><br>携带参数： <br>grant_type：密码模式授权填写password <br>username：账号  <br>password：密码<br></code></pre></td></tr></table></figure><p>此链接也需要使用 http Basic认证</p><p><img src="/images/image-20210806233653549.png" alt="image-20210806233653549"></p><p>测试结果如下</p><p><img src="/images/image-20210806233733190.png" alt="image-20210806233733190"></p></li></ol><h3 id="4-3-资源服务授权"><a href="#4-3-资源服务授权" class="headerlink" title="4.3 资源服务授权"></a>4.3 资源服务授权</h3><p>资源服务拥有要访问的受保护资源，客户端携带令牌访问资源服务，如果令牌合法则可成功访问资源服务中的资源，如下图:</p><p><img src="/images/image-20210806234229211.png" alt="image-20210806234229211"></p><p>上图的业务流程如下:</p><ol><li>客户端请求认证服务申请令牌</li><li>认证服务生成令牌认证服务采用非对称加密算法，使用私钥生成令牌</li><li>客户端携带令牌访问资源服务客户端在Http header 中添加： Authorization：Bearer令牌</li><li>资源服务请求认证服务校验令牌的有效性资源服务接收到令牌，使用公钥校验令牌的合法性</li><li>令牌有效，资源服务向客户端响应资源信息</li></ol><h4 id="4-3-1-用户服务对接Oauth2"><a href="#4-3-1-用户服务对接Oauth2" class="headerlink" title="4.3.1 用户服务对接Oauth2"></a>4.3.1 用户服务对接Oauth2</h4><ol><li><p>配置公钥 ，将 changggou_user_auth 项目中public.key复制到changgou_service_user中</p><p><img src="/images/image-20210806234937362.png" alt="image-20210806234937362"></p></li><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置每个系统的Http请求路径安全控制策略以及读取公钥信息识别令牌，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableResourceServer</span> <span class="hljs-comment">//声明当前的服务是一个资源服务器</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><span class="hljs-comment">//激活方法上的PreAuthorize注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-comment">//公钥</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PUBLIC_KEY = <span class="hljs-string">&quot;public.key&quot;</span>;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 定义JwtTokenStore</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> jwtAccessTokenConverter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TokenStore <span class="hljs-title">tokenStore</span><span class="hljs-params">(JwtAccessTokenConverter jwtAccessTokenConverter)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JwtTokenStore(jwtAccessTokenConverter);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 定义JJwtAccessTokenConverter</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">jwtAccessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;<br>        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();<br>        converter.setVerifierKey(getPubKey());<br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取非对称加密公钥 Key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 公钥 Key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getPubKey</span><span class="hljs-params">()</span> </span>&#123;<br>        Resource resource = <span class="hljs-keyword">new</span> ClassPathResource(PUBLIC_KEY);<br>        <span class="hljs-keyword">try</span> &#123;<br>            InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(resource.getInputStream());<br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(inputStreamReader);<br>            <span class="hljs-keyword">return</span> br.lines().collect(Collectors.joining(<span class="hljs-string">&quot;\n&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * Http安全配置，对每个到达系统的http请求链接进行校验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//所有请求必须认证通过</span><br>        http.authorizeRequests()<br>                <span class="hljs-comment">//下边的路径放行</span><br>                .antMatchers(<br>                        <span class="hljs-string">&quot;/user/add&quot;</span>,<span class="hljs-string">&quot;/user/load/**&quot;</span>). <span class="hljs-comment">//配置地址放行</span><br>                permitAll()<br>                .anyRequest().<br>                authenticated();    <span class="hljs-comment">//其他地址需要认证授权</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>资源服务授权测试</p><p>不携带令牌访问<a href="http://localhost:9005/user">http://localhost:9005/user</a></p><p>由于该地址受访问限制，需要授权，所以出现如下错误：</p><p><img src="/images/image-20210807000317476.png" alt="image-20210807000317476"></p><p>携带令牌访问<a href="http://localhost:9005/user">http://localhost:9005/user</a></p><p>在http header中添加 Authorization： Bearer 令牌</p><p>注意：</p><ul><li>Bearer 令牌之间有空格</li><li>令牌是前面生成的还没过期，所以这里可以直接用</li></ul><p><img src="/images/image-20210807000526789.png" alt="image-20210807000526789"></p><p><img src="/images/image-20210807000550001.png" alt="image-20210807000550001"></p></li></ol><h2 id="5-认证开发"><a href="#5-认证开发" class="headerlink" title="5 认证开发"></a>5 认证开发</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p><img src="/images/image-20210807125506369.png" alt="image-20210807125506369"></p><p>执行流程：</p><ol><li>用户登录，请求认证服务</li><li>认证服务认证通过，生成jwt令牌，将jwt令牌及相关信息写入Redis，并且将身份令牌写入cookie </li><li>用户访问资源页面，带着cookie到网关 </li><li>网关从cookie获取token，并查询Redis校验token,如果token不存在则拒绝访问，否则放行</li><li>用户退出，请求认证服务，清除redis中的token，并且删除cookie中的token </li></ol><p>使用redis存储用户的身份令牌有以下作用：</p><ol><li>实现用户退出注销功能，服务端清除令牌后，即使客户端请求携带token也是无效的</li><li>由于jwt令牌过长，不宜存储在cookie中，所以将jwt令牌存储在redis，由客户端请求服务端获取并在客户端存储 </li></ol><h3 id="5-2-Redis配置"><a href="#5-2-Redis配置" class="headerlink" title="5.2 Redis配置"></a>5.2 Redis配置</h3><p>增加认证服务changgou_user_auth中application.yml配置文件中的Redis配置</p><h3 id="5-3-认证服务"><a href="#5-3-认证服务" class="headerlink" title="5.3 认证服务"></a>5.3 认证服务</h3><h4 id="5-3-1-认证服务需求分析"><a href="#5-3-1-认证服务需求分析" class="headerlink" title="5.3.1 认证服务需求分析"></a>5.3.1 认证服务需求分析</h4><p>认证服务需要实现的功能如下：</p><ol><li><p>登录接口</p><p>前端post提交账号、密码等，用户身份校验通过，生成令牌，并将令牌存储到redis。 将令牌写入cookie。</p></li><li><p>退出接口 </p><p>校验当前用户的身份为合法并且为已登录状态。 将令牌从redis删除。 删除cookie中的令牌。</p><p><img src="/images/image-20210807132848712.png" alt="image-20210807132848712"></p></li></ol><h4 id="5-3-2-授权参数配置"><a href="#5-3-2-授权参数配置" class="headerlink" title="5.3.2 授权参数配置"></a>5.3.2 授权参数配置</h4><p>修改changgou_user_auth中application.yml配置文件，修改对应的授权配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">auth:</span><br>  <span class="hljs-attr">ttl:</span> <span class="hljs-number">1200</span>  <span class="hljs-comment">#token存储到redis的过期时间</span><br>  <span class="hljs-attr">clientId:</span> <span class="hljs-string">changgou</span>    <span class="hljs-comment">#客户端ID</span><br>  <span class="hljs-attr">clientSecret:</span> <span class="hljs-string">changgou</span>    <span class="hljs-comment">#客户端秘钥</span><br>  <span class="hljs-attr">cookieDomain:</span> <span class="hljs-string">localhost</span>   <span class="hljs-comment">#Cookie保存对应的域名</span><br>  <span class="hljs-attr">cookieMaxAge:</span> <span class="hljs-number">-1</span>          <span class="hljs-comment">#Cookie过期时间，-1表示浏览器关闭则销毁</span><br></code></pre></td></tr></table></figure><h4 id="5-3-3-申请令牌测试"><a href="#5-3-3-申请令牌测试" class="headerlink" title="5.3.3 申请令牌测试"></a>5.3.3 申请令牌测试</h4><p>这里和正常的业务代码无关，这里只是测试申请令牌有没有错</p><p>为了不破坏Spring Security的代码，我们在Service方法中通过RestTemplate请求Spring Security所暴露的申请令牌接口来申请令牌，下边是测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplyTokenTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//这个bean需要自己声明，已经声明在启动类中了</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//通过它可以在注册中心获取地址信息</span><br>    <span class="hljs-keyword">private</span> LoadBalancerClient loadBalancerClient;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">applyToken</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//构建请求地址  http://localhost:9200/oauth/token</span><br>        <span class="hljs-comment">//user-auth是这个微服务在注册中心的名字。返回的是这个服务的实例对象</span><br>        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="hljs-string">&quot;user-auth&quot;</span>);<br>        <span class="hljs-comment">// 通过这个实例对象，就可以获得他的路径信息  http://localhost:9200</span><br>        URI uri = serviceInstance.getUri();<br>        <span class="hljs-comment">// http://localhost:9200/oauth/token</span><br>        String url =uri+<span class="hljs-string">&quot;/oauth/token&quot;</span>;<br><br>        <span class="hljs-comment">// 封装请求参数 body , headers。这里的用户名和密码写死了，实际开发中不是这样</span><br>        MultiValueMap&lt;String, String&gt; body = <span class="hljs-keyword">new</span> LinkedMultiValueMap&lt;&gt;();<br>        body.add(<span class="hljs-string">&quot;grant_type&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);<br>        body.add(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;itheima&quot;</span>);<br>        body.add(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;itheima&quot;</span>);<br><br>        MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> LinkedMultiValueMap&lt;&gt;();<br>        headers.add(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-keyword">this</span>.getHttpBasic(<span class="hljs-string">&quot;changgou&quot;</span>,<span class="hljs-string">&quot;changgou&quot;</span>));<br>        HttpEntity&lt;MultiValueMap&lt;String,String&gt;&gt; requestEntity = <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(body,headers);    <span class="hljs-comment">//body, header就是封装在这个里面的</span><br><br>        <span class="hljs-comment">//当后端出现了401,400.后端不对着两个异常编码进行处理,而是直接返回给前端</span><br>        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">if</span> (response.getRawStatusCode()!=<span class="hljs-number">400</span> &amp;&amp; response.getRawStatusCode() != <span class="hljs-number">401</span>)&#123;<br>                    <span class="hljs-keyword">super</span>.handleError(response);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//发送请求</span><br>        ResponseEntity&lt;Map&gt; responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, Map.class);<br>        Map map = responseEntity.getBody();<br>        System.out.println(map);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getHttpBasic</span><span class="hljs-params">(String clientId, String clientSecret)</span> </span>&#123;<br>        String value =clientId+<span class="hljs-string">&quot;:&quot;</span>+clientSecret;<br>        <span class="hljs-keyword">byte</span>[] encode = Base64Utils.encode(value.getBytes());<br>        <span class="hljs-comment">//Basic Y2hhbmdnb3U6Y2hhbmdnb3U=</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Basic &quot;</span>+<span class="hljs-keyword">new</span> String(encode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-4-业务层"><a href="#5-3-4-业务层" class="headerlink" title="5.3.4 业务层"></a>5.3.4 业务层</h4><p>AuthService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthService</span> </span>&#123;<br>    <span class="hljs-function">AuthToken <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, String clientId, String clientSecret)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AuthServiceImpl实现类：</p><p>基于刚才写的测试实现申请令牌的service方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> LoadBalancerClient loadBalancerClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;auth.ttl&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> ttl;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthToken <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, String clientId, String clientSecret)</span> </span>&#123;<br>        <span class="hljs-comment">//1.申请令牌</span><br>        ServiceInstance serviceInstance = loadBalancerClient.choose(<span class="hljs-string">&quot;user-auth&quot;</span>);<br>        URI uri = serviceInstance.getUri();<br>        String url=uri+<span class="hljs-string">&quot;/oauth/token&quot;</span>;<br><br>        MultiValueMap&lt;String, String&gt; body = <span class="hljs-keyword">new</span> LinkedMultiValueMap&lt;&gt;();<br>        body.add(<span class="hljs-string">&quot;grant_type&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);<br>        body.add(<span class="hljs-string">&quot;username&quot;</span>,username);<br>        body.add(<span class="hljs-string">&quot;password&quot;</span>,password);<br><br>        MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> LinkedMultiValueMap&lt;&gt;();<br>        headers.add(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-keyword">this</span>.getHttpBasic(clientId,clientSecret));<br>        HttpEntity&lt;MultiValueMap&lt;String,String&gt;&gt; requestEntity = <span class="hljs-keyword">new</span> HttpEntity&lt;&gt;(body,headers);<br><br>        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">if</span> (response.getRawStatusCode()!=<span class="hljs-number">400</span> &amp;&amp; response.getRawStatusCode()!=<span class="hljs-number">401</span>)&#123;<br>                    <span class="hljs-keyword">super</span>.handleError(response);<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        ResponseEntity&lt;Map&gt; responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, Map.class);<br>        Map map = responseEntity.getBody();<br>        <span class="hljs-keyword">if</span> (map == <span class="hljs-keyword">null</span> || map.get(<span class="hljs-string">&quot;access_token&quot;</span>) == <span class="hljs-keyword">null</span> || map.get(<span class="hljs-string">&quot;refresh_token&quot;</span>) == <span class="hljs-keyword">null</span> || map.get(<span class="hljs-string">&quot;jti&quot;</span>) == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//申请令牌失败</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;申请令牌失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//2.封装结果数据</span><br>        AuthToken authToken = <span class="hljs-keyword">new</span> AuthToken();<br>        authToken.setAccessToken((String) map.get(<span class="hljs-string">&quot;access_token&quot;</span>));<br>        authToken.setRefreshToken((String) map.get(<span class="hljs-string">&quot;refresh_token&quot;</span>));<br>        authToken.setJti((String)map.get(<span class="hljs-string">&quot;jti&quot;</span>));<br><br>        <span class="hljs-comment">//3.将jti作为redis中的key,将jwt作为redis中的value进行数据的存放</span><br>        stringRedisTemplate.boundValueOps(authToken.getJti()).set(authToken.getAccessToken(),ttl, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> authToken;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getHttpBasic</span><span class="hljs-params">(String clientId, String clientSecret)</span> </span>&#123;<br>        String value = clientId+<span class="hljs-string">&quot;:&quot;</span>+clientSecret;<br>        <span class="hljs-keyword">byte</span>[] encode = Base64Utils.encode(value.getBytes());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Basic &quot;</span>+<span class="hljs-keyword">new</span> String(encode);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-5-控制层"><a href="#5-3-5-控制层" class="headerlink" title="5.3.5 控制层"></a>5.3.5 控制层</h4><p>AuthController编写用户登录授权方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/oauth&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthService authService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;auth.clientId&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String clientId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;auth.clientSecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String clientSecret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;auth.cookieDomain&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String cookieDomain;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;auth.cookieMaxAge&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cookieMaxAge;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(username))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;用户名不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(password))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;密码不存在&quot;</span>);<br>        &#125;<br><br>        AuthToken authToken = authService.login(username,password,clientId,clientSecret);<br><br>        <span class="hljs-keyword">this</span>.saveJtiToCookie(authToken.getJti());<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;登录成功&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveJtiToCookie</span><span class="hljs-params">(String jti)</span> </span>&#123;<br>        HttpServletResponse response = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();<br>        CookieUtil.addCookie(response,cookieDomain,<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;uid&quot;</span>,jti,cookieMaxAge,<span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-6-登录请求放行"><a href="#5-3-6-登录请求放行" class="headerlink" title="5.3.6 登录请求放行"></a>5.3.6 登录请求放行</h4><p>修改认证服务WebSecurityConfig类中configure（），添加放行路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    web.ignoring().antMatchers(<br>            <span class="hljs-string">&quot;/oauth/login&quot;</span>,<br>            <span class="hljs-string">&quot;/oauth/logout&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-7-测试认证接口"><a href="#5-3-7-测试认证接口" class="headerlink" title="5.3.7 测试认证接口"></a>5.3.7 测试认证接口</h4><p>使用postman测试：<a href="http://localhost:9200/oauth/login">http://localhost:9200/oauth/login</a></p><p><img src="/images/image-20210807144203187.png" alt="image-20210807144203187"></p><h4 id="5-3-8-动态获取用户信息"><a href="#5-3-8-动态获取用户信息" class="headerlink" title="5.3.8 动态获取用户信息"></a>5.3.8 动态获取用户信息</h4><p>当前在认证服务中，用户密码是写死在用户认证类中。所以用户登录时，无论帐号输入什么，只要密码是itheima都可以访问。 因此需要动态获取用户帐号与密码</p><ol><li><p>定义被访问接口</p><p>用户微服务changgou_service_user对外暴露根据用户名获取用户信息接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/load/&#123;username&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> userService.findById(username);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>放行该接口，修改用户微服务下的ResourceServerConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">//所有请求必须认证通过</span><br>    http.authorizeRequests()<br>            <span class="hljs-comment">//下边的路径放行</span><br>            .antMatchers(<br>                    <span class="hljs-string">&quot;/user/add&quot;</span>,<span class="hljs-string">&quot;/user/load/**&quot;</span>). <span class="hljs-comment">//配置地址放行</span><br>            permitAll()<br>            .anyRequest().<br>            authenticated();    <span class="hljs-comment">//其他地址需要认证授权</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>定义feign接口</p><p>changgou_service_user_api新增feign接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/user/load/&#123;username&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>认证服务添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_user_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改认证服务启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.changgou.user.feign&quot;)</span><br></code></pre></td></tr></table></figure></li><li><p>修改用户认证类</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*****</span><br><span class="hljs-comment"> * 自定义授权认证类</span><br><span class="hljs-comment"> */</span><br>@Service<br>public <span class="hljs-keyword">class</span> UserDetailsServiceImpl implements UserDetailsService &#123;<br><br>    @Autowired<br>    ClientDetailsService clientDetailsService;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> UserFeign userFeign;<br><br>    <span class="hljs-comment">/****</span><br><span class="hljs-comment">     * 自定义授权认证</span><br><span class="hljs-comment">     * @param username</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     * @throws UsernameNotFoundException</span><br><span class="hljs-comment">     */</span><br>    @Override<br>    public UserDetails load<span class="hljs-constructor">UserByUsername(String <span class="hljs-params">username</span>)</span> throws UsernameNotFoundException &#123;<br>        <span class="hljs-comment">//取出身份，如果身份为空说明没有认证</span><br>        Authentication authentication = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SecurityContextHolder</span>.</span></span>get<span class="hljs-constructor">Context()</span>.get<span class="hljs-constructor">Authentication()</span>;<br>        <span class="hljs-comment">//没有认证统一采用httpbasic认证，httpbasic中存储了client_id和client_secret，开始认证client_id和client_secret</span><br>        <span class="hljs-keyword">if</span>(authentication==null)&#123;<br>            ClientDetails clientDetails = clientDetailsService.load<span class="hljs-constructor">ClientByClientId(<span class="hljs-params">username</span>)</span>;<br>            <span class="hljs-keyword">if</span>(clientDetails!=null)&#123;<br>                <span class="hljs-comment">//秘钥</span><br>                String clientSecret = clientDetails.get<span class="hljs-constructor">ClientSecret()</span>;<br>                <span class="hljs-comment">//静态方式</span><br>                <span class="hljs-comment">//return new User(username,new BCryptPasswordEncoder().encode(clientSecret), AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;&quot;));</span><br>                <span class="hljs-comment">//数据库查找方式</span><br>                return <span class="hljs-keyword">new</span> <span class="hljs-constructor">User(<span class="hljs-params">username</span>,<span class="hljs-params">clientSecret</span>, AuthorityUtils.<span class="hljs-params">commaSeparatedStringToAuthorityList</span>(<span class="hljs-string">&quot;&quot;</span>)</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">username</span>)</span>) &#123;<br>            return null;<br>        &#125;<br><br>        <span class="hljs-comment">//根据用户名查询用户信息</span><br><span class="hljs-comment">//        String pwd = new BCryptPasswordEncoder().encode(&quot;itheima&quot;);</span><br>        com.changgou.user.pojo.User userInfo = userFeign.find<span class="hljs-constructor">UserInfo(<span class="hljs-params">username</span>)</span>;<br>        <span class="hljs-comment">//创建User对象</span><br>        String permissions = <span class="hljs-string">&quot;goods_list,seckill_list&quot;</span>;<br>        UserJwt userDetails = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserJwt(<span class="hljs-params">username</span>,<span class="hljs-params">userInfo</span>.<span class="hljs-params">getPassword</span>()</span>,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AuthorityUtils</span>.</span></span>comma<span class="hljs-constructor">SeparatedStringToAuthorityList(<span class="hljs-params">permissions</span>)</span>);<br>        return userDetails;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>测试：localhost:9200/oauth/login</p><p>这次输入真正的用户名和密码（这里我测试失败了，感觉是密码有问题）</p><h2 id="6-认证服务对接网关"><a href="#6-认证服务对接网关" class="headerlink" title="6 认证服务对接网关"></a>6 认证服务对接网关</h2><h3 id="6-1-新建网关工程changgou-gateway-web"><a href="#6-1-新建网关工程changgou-gateway-web" class="headerlink" title="6.1 新建网关工程changgou_gateway_web"></a>6.1 新建网关工程changgou_gateway_web</h3><ol><li><p>changgou_gateway(网关的父工程)的pom文件添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--网关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--redis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建工程changgou_gateway_web,并创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebGatewayApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(WebGatewayApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建application.yml (网管这里的路径配置还不熟，有时间加强)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway-web</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">globalcors:</span><br>        <span class="hljs-attr">cors-configurations:</span><br>          <span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span> <span class="hljs-comment"># 匹配所有请求</span><br>            <span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-comment">#跨域处理 允许所有的域</span><br>            <span class="hljs-attr">allowedMethods:</span> <span class="hljs-comment"># 支持的方法</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">GET</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">POST</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">PUT</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">DELETE</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_goods_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://goods</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/album/**,/api/brand/**,/api/cache/**,/api/categoryBrand/**,/api/category/**,/api/para/**,/api/pref/**,/api/sku/**,/api/spec/**,/api/spu/**,/api/stockBack/**,/api/template/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-comment">#- PrefixPath=/brand</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>          <span class="hljs-comment">#用户微服务</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_user_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/user/**,/api/address/**,/api/areas/**,/api/cities/**,/api/provinces/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>          <span class="hljs-comment">#认证微服务</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">changgou_oauth_user</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://user-auth</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/oauth/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8001</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2-网关全局过滤器"><a href="#6-2-网关全局过滤器" class="headerlink" title="6.2 网关全局过滤器"></a>6.2 网关全局过滤器</h3><p><img src="/images/image-20210807164927008.png" alt="image-20210807164927008"></p><p>新建过滤器类AuthorizeFilter,对请求进行过滤</p><p>业务逻辑：</p><ol><li>判断当前请求是否为登录请求，是的话，则放行</li><li>判断cookie中是否存在信息, 没有的话，拒绝访问</li><li>判断redis中令牌是否存在，没有的话，拒绝访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AuthService authService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        ServerHttpRequest request = exchange.getRequest();<br>        ServerHttpResponse response = exchange.getResponse();<br><br>        <span class="hljs-comment">//1.判断当前请求路径是否为登录请求,如果是,则直接放行</span><br>        String path = request.getURI().getPath();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/api/oauth/login&quot;</span>.equals(path) || !UrlFilter.hasAuthorize(path) )&#123;<br>            <span class="hljs-comment">//直接放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br><br>        <span class="hljs-comment">//2.从cookie中获取jti的值,如果该值不存在,拒绝本次访问</span><br>        String jti = authService.getJtiFromCookie(request);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(jti))&#123;<br>            <span class="hljs-comment">//拒绝访问</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//3.从redis中获取jwt的值,如果该值不存在,拒绝本次访问</span><br>        String jwt = authService.getJwtFromRedis(jti);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(jwt))&#123;<br>            <span class="hljs-comment">//拒绝访问</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//4.对当前的请求对象进行增强,让它会携带令牌的信息</span><br>        request.mutate().header(<span class="hljs-string">&quot;Authorization&quot;</span>,<span class="hljs-string">&quot;Bearer &quot;</span>+jwt);<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>新建业务逻辑类AuthService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-comment">//从cookie中获取jti的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getJtiFromCookie</span><span class="hljs-params">(ServerHttpRequest request)</span> </span>&#123;<br>        HttpCookie httpCookie = request.getCookies().getFirst(<span class="hljs-string">&quot;uid&quot;</span>);<br>        <span class="hljs-keyword">if</span> (httpCookie != <span class="hljs-keyword">null</span>)&#123;<br>            String jti = httpCookie.getValue();<br>            <span class="hljs-keyword">return</span> jti;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//从redis中获取jwt</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getJwtFromRedis</span><span class="hljs-params">(String jti)</span> </span>&#123;<br>        String jwt = stringRedisTemplate.boundValueOps(jti).get();<br>        <span class="hljs-keyword">return</span> jwt;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><p>访问：<a href="http://localhost:8001/api/oauth/login%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E6%B5%8B%E8%AF%95%E9%80%9A%E8%BF%87%EF%BC%8C%E6%8B%BF%E5%88%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%95%B0%E6%8D%AE">http://localhost:8001/api/oauth/login，可以发现测试通过，拿到返回结果数据</a></p><p><img src="/images/image-20210807165333771.png" alt="image-20210807165333771"></p><h2 id="7-自定义登录页面"><a href="#7-自定义登录页面" class="headerlink" title="7 自定义登录页面"></a>7 自定义登录页面</h2><ol><li><p>认证服务添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>把静态资源和页面放到changgou_user_auth微服务中</p><p><img src="/images/image-20210807172105423.png" alt="image-20210807172105423"></p></li><li><p>静态资源放行，修改WebSecurityConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 忽略安全拦截的URL</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> web</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(WebSecurity web)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    web.ignoring().antMatchers(<br>            <span class="hljs-string">&quot;/oauth/login&quot;</span>,<br>            <span class="hljs-string">&quot;/oauth/logout&quot;</span>,<br>            <span class="hljs-string">&quot;/oauth/toLogin&quot;</span>,<span class="hljs-string">&quot;/login.html&quot;</span>,<span class="hljs-string">&quot;/css/**&quot;</span>,<span class="hljs-string">&quot;/data/**&quot;</span>,<span class="hljs-string">&quot;/fonts/**&quot;</span>,<span class="hljs-string">&quot;/img/**&quot;</span>,<span class="hljs-string">&quot;/js/**&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>开启表单登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    http.csrf().disable()<br>            .httpBasic()        <span class="hljs-comment">//启用Http基本身份验证</span><br>            .and()<br>            .formLogin()       <span class="hljs-comment">//启用表单身份验证</span><br>            .and()<br>            .authorizeRequests()    <span class="hljs-comment">//限制基于Request请求访问</span><br>            .anyRequest()<br>            .authenticated();       <span class="hljs-comment">//其他请求都需要经过验证</span><br>   <br>    http.formLogin().loginPage(<span class="hljs-string">&quot;/oauth/toLogin&quot;</span>)  <span class="hljs-comment">//设置访问登录页面的路径</span><br>            .loginProcessingUrl(<span class="hljs-string">&quot;/oauth/login&quot;</span>);  <span class="hljs-comment">//设置执行登录操作的路径</span><br>   <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在changgou_user_auth微服务中的AuthController类上怎加下面的访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toLogin&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toLogin</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改login.html的登录页面, 并定义前端的login方法</p><p>100行开始</p><p><img src="/images/image-20210807173951504.png" alt="image-20210807173951504"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--script样式的修改放最后面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">username</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript"><span class="hljs-attr">password</span>:<span class="hljs-string">&quot;&quot;</span>,</span><br><span class="javascript"><span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;&quot;</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">login</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">app.msg=<span class="hljs-string">&quot;正在登录&quot;</span>;</span><br><span class="javascript">axios.post(<span class="hljs-string">&quot;/api/oauth/login?username=&quot;</span>+app.username+<span class="hljs-string">&quot;&amp;password=&quot;</span>+app.password).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">if</span> (response.data.flag)&#123;</span><br><span class="javascript">app.msg=<span class="hljs-string">&quot;登录成功&quot;</span>;</span><br><span class="javascript">&#125; <span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">app.msg=<span class="hljs-string">&quot;登录失败&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义路经过滤，方便统一授权资源</p><p><img src="/images/image-20210807174204477.png" alt="image-20210807174204477"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UrlFilter</span> </span>&#123;<br><br>    <span class="hljs-comment">//所有需要传递令牌的地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String filterPath=<span class="hljs-string">&quot;/api/wseckillorder,/api/seckill,/api/wxpay,/api/wxpay/**,/api/worder/**,/api/user/**,/api/address/**,/api/wcart/**,/api/cart/**,/api/categoryReport/**,/api/orderConfig/**,/api/order/**,/api/orderItem/**,/api/orderLog/**,/api/preferential/**,/api/returnCause/**,/api/returnOrder/**,/api/returnOrderItem/**&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasAuthorize</span><span class="hljs-params">(String url)</span></span>&#123;<br><br>        String[] split = filterPath.replace(<span class="hljs-string">&quot;**&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (String value : split) &#123;<br><br>            <span class="hljs-keyword">if</span> (url.startsWith(value))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>; <span class="hljs-comment">//代表当前的访问地址是需要传递令牌的</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; <span class="hljs-comment">//代表当前的访问地址是不需要传递令牌的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>最后进行测试</p><p>访问：<a href="http://localhost:9200/oauth/toLogin">http://localhost:9200/oauth/toLogin</a></p><p><img src="/images/image-20210807174443284.png" alt="image-20210807174443284"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>畅购商城项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第二部分</title>
    <link href="/2021/07/27/1.2%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/27/1.2%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part07-商品搜索"><a href="#Part07-商品搜索" class="headerlink" title="Part07 商品搜索"></a>Part07 商品搜索</h1><h2 id="1-根据关键字查询"><a href="#1-根据关键字查询" class="headerlink" title="1. 根据关键字查询"></a>1. 根据关键字查询</h2><ol><li><p>changgou_service_search项目创建SearchService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SearchService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全文检索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> searchMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//他的实现类会抛异常，所以接口里也需要抛出异常</span><br>    <span class="hljs-function">Map <span class="hljs-title">search</span><span class="hljs-params">(Map&lt;String, String&gt; searchMap)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_search项目创建SearchService接口实现类SearchServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SearchService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate esTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">search</span><span class="hljs-params">(Map&lt;String, String&gt; searchMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Map&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-comment">//有条件才查询Es</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != searchMap) &#123;<br>            <span class="hljs-comment">//组合条件对象</span><br>            BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();<br>            <span class="hljs-comment">//0:关键词</span><br>            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(searchMap.get(<span class="hljs-string">&quot;keywords&quot;</span>))) &#123;<br>                boolQuery.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, searchMap.get(<span class="hljs-string">&quot;keywords&quot;</span>)).operator(Operator.AND));<br><br>            &#125;<br><br>            <span class="hljs-comment">//4. 原生搜索实现类</span><br>            NativeSearchQueryBuilder nativeSearchQueryBuilder = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder();<br>            nativeSearchQueryBuilder.withQuery(boolQuery);<br><br>            <span class="hljs-comment">//10: 执行查询, 返回结果对象</span><br>            AggregatedPage&lt;SkuInfo&gt; aggregatedPage = esTemplate.queryForPage(nativeSearchQueryBuilder.build(), SkuInfo.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse searchResponse, Class&lt;T&gt; aClass, Pageable pageable)</span> </span>&#123;<br><br>                    List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>                    SearchHits hits = searchResponse.getHits();<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != hits) &#123;<br>                        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                            SkuInfo skuInfo = JSON.parseObject(hit.getSourceAsString(), SkuInfo.class);<br><br>                            list.add((T) skuInfo);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;T&gt;(list, pageable, hits.getTotalHits(), searchResponse.getAggregations());<br>                &#125;<br>            &#125;);<br><br>            <span class="hljs-comment">//11. 总条数</span><br>            resultMap.put(<span class="hljs-string">&quot;total&quot;</span>, aggregatedPage.getTotalElements());<br>            <span class="hljs-comment">//12. 总页数</span><br>            resultMap.put(<span class="hljs-string">&quot;totalPages&quot;</span>, aggregatedPage.getTotalPages());<br>            <span class="hljs-comment">//13. 查询结果集合</span><br>            resultMap.put(<span class="hljs-string">&quot;rows&quot;</span>, aggregatedPage.getContent());<br><br>            <span class="hljs-keyword">return</span> resultMap;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_search项目创建SearchController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku_search&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SearchService searchService;<br><br>    <span class="hljs-comment">//对搜索入参带有特殊符号进行处理</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handlerSearchMap</span><span class="hljs-params">(Map&lt;String,String&gt; searchMap)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> != searchMap)&#123;<br>            Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = searchMap.entrySet();<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>                <span class="hljs-keyword">if</span>(entry.getKey().startsWith(<span class="hljs-string">&quot;spec_&quot;</span>))&#123;<br>                    searchMap.put(entry.getKey(),entry.getValue().replace(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;%2B&quot;</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全文检索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//特殊符号处理</span><br>        handlerSearchMap(paramMap);<br>        Map resultMap = searchService.search(paramMap);<br>        <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>使用postmain访问 <a href="http://localhost:9009/sku_search?keywords=%E6%89%8B%E6%9C%BA">http://localhost:9009/sku_search?keywords=手机</a></p><p>虽然查询出9000多条结果，但是默认只显示10条数据</p><p><img src="/images/image-20210804195339008.png" alt="image-20210804195339008"></p></li></ol><h2 id="2-条件筛选"><a href="#2-条件筛选" class="headerlink" title="2 条件筛选"></a>2 条件筛选</h2><p><img src="/images/image-20210804195611466.png" alt="image-20210804195611466"></p><p>用户有可能会根据分类搜索、品牌搜索，还有可能根据规格搜索，以及价格搜索和排序操作。根据分类和品牌搜索的时候，可以直接根据指定域搜索，而规格搜索的域数据是不确定的，价格是一个区间搜索，所以我们可以分为三段实现，先实现分类、品牌搜素，再实现规格搜索，然后实现价格区间搜索。</p><h3 id="2-1-品牌筛选"><a href="#2-1-品牌筛选" class="headerlink" title="2.1 品牌筛选"></a>2.1 品牌筛选</h3><h4 id="2-1-1-需求分析"><a href="#2-1-1-需求分析" class="headerlink" title="2.1.1 需求分析"></a>2.1.1 需求分析</h4><p>页面每次向后台传入对应的分类和品牌，后台据分类和品牌进行条件过滤即可。</p><h4 id="2-1-2-代码实现"><a href="#2-1-2-代码实现" class="headerlink" title="2.1.2 代码实现"></a>2.1.2 代码实现</h4><p>修改搜索微服务com.changgou.service.SearchServiceImpl的搜索方法，添加品牌过滤</p><p>增加品牌筛选部分 (后面增加部分也都用序号来表示先后顺序) 的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1:条件 品牌</span><br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(searchMap.get(<span class="hljs-string">&quot;brand&quot;</span>))) &#123;<br>    <span class="hljs-comment">//按照品牌进行过滤查询。这里的brandName是索引库中的一个域值，不是随便写的名字</span><br>    boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brandName&quot;</span>, searchMap.get(<span class="hljs-string">&quot;brand&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-3-测试"><a href="#2-1-3-测试" class="headerlink" title="2.1.3 测试"></a>2.1.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA">http://localhost:9009/sku_search?keywords=手机&amp;brand=华为</a></p><p>结果如下：</p><p>可以看到比第一次的数据少了几千条</p><p><img src="/images/image-20210804201208277.png" alt="image-20210804201208277"></p><h3 id="2-2-规格过滤"><a href="#2-2-规格过滤" class="headerlink" title="2.2 规格过滤"></a>2.2 规格过滤</h3><h4 id="2-2-1-需求分析"><a href="#2-2-1-需求分析" class="headerlink" title="2.2.1 需求分析"></a>2.2.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628079276433.png" alt="image-20210804195611466"></p><p>规格这一部分，需要向后台发送规格名字以及规格值，我们可以按照一定要求来发送数据，例如规格名字以特殊前缀提交到后台：<code>spec_网络制式：电信4G、spec_显示屏尺寸：4.0-4.9英寸</code></p><p>后台接到数据后，可以根据前缀spec_来区分是否是规格，如果以<code>spec_xxx</code>开始的数据则为规格数据，需要根据指定规格找信息。</p><p><img src="/images/image-20210804201759706.png" alt="image-20210804201759706"></p><p>上图是规格的索引存储格式，真实数据在spechMap.规格名字.keyword（这个是规格的域）中，所以找数据也是按照如下格式去找：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">spechMap.规格名字.<span class="hljs-keyword">keyword</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-代码实现"><a href="#2-2-2-代码实现" class="headerlink" title="2.2.2 代码实现"></a>2.2.2 代码实现</h4><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加规格查询操作</p><p>增加部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2:条件 规格</span><br><span class="hljs-keyword">for</span> (String key : searchMap.keySet()) &#123;<br>    <span class="hljs-keyword">if</span> (key.startsWith(<span class="hljs-string">&quot;spec_&quot;</span>)) &#123;<br>        <span class="hljs-comment">//发送请求的路径会涉及到编码和解码，如果不设置下面这一步，传递过来的路径就是错误的</span><br>        String value = searchMap.get(key).replace(<span class="hljs-string">&quot;%2B&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>);<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;specMap.&quot;</span> + key.substring(<span class="hljs-number">5</span>) + <span class="hljs-string">&quot;.keyword&quot;</span>,value));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3 测试"></a>2.2.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E7%94%B5%E8%A7%86&amp;spec_%E5%B0%BA%E5%AF%B8=%E9%87%91%E8%89%B2">http://localhost:9009/sku_search?keywords=电视&amp;spec_尺寸=金色</a></p><p><img src="/images/image-20210804211201850.png" alt="image-20210804211201850"></p><h3 id="2-3-聚合（分组）查询"><a href="#2-3-聚合（分组）查询" class="headerlink" title="2.3 聚合（分组）查询"></a>2.3 聚合（分组）查询</h3><h4 id="2-3-1-需求分析"><a href="#2-3-1-需求分析" class="headerlink" title="2.3.1 需求分析"></a>2.3.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628083462378.png" alt="image-20210804195611466"></p><p>根据查询的结果返回一个brandList给前端，用于更新品牌展示和规格展示</p><h4 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h4><p>1）品牌聚合</p><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加品牌聚合操作</p><p>增加的代码部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//6. 品牌聚合(分组)查询</span><br>String skuBrand = <span class="hljs-string">&quot;skuBrand&quot;</span>;<br><span class="hljs-comment">// terms(skuBrand)设置分组查询之后的列名为skuBrand， field(&quot;brandName&quot;)当前要来操作的分组域</span><br>nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms(skuBrand).field(<span class="hljs-string">&quot;brandName&quot;</span>));<br><br><span class="hljs-comment">//14. 获取品牌聚合结果</span><br>StringTerms brandTerms = (StringTerms) aggregatedPage.getAggregation(skuBrand);<br><span class="hljs-comment">//流运算，比原始for循环效率高很多</span><br>List&lt;String&gt; brandList = brandTerms.getBuckets().stream().map(bucket -&gt; bucket.getKeyAsString()).collect(Collectors.toList());<br>resultMap.put(<span class="hljs-string">&quot;brandList&quot;</span>, brandList);<br></code></pre></td></tr></table></figure><p>2）规格聚合</p><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加规格聚合操作</p><p>增加的代码部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7. 规格聚合(分组)查询</span><br>String skuSpec = <span class="hljs-string">&quot;skuSpec&quot;</span>;<br>nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms(skuSpec).field(<span class="hljs-string">&quot;spec.keyword&quot;</span>));<br><br><span class="hljs-comment">//15. 获取规格聚合结果</span><br>StringTerms specTerms = (StringTerms) aggregatedPage.getAggregation(skuSpec);<br>List&lt;String&gt; specList = specTerms.getBuckets().stream().map(bucket -&gt; bucket.getKeyAsString()).collect(Collectors.toList());<br>resultMap.put(<span class="hljs-string">&quot;specList&quot;</span>, specList);<br><br><span class="hljs-keyword">return</span> resultMap;<br></code></pre></td></tr></table></figure><h4 id="2-3-3-测试"><a href="#2-3-3-测试" class="headerlink" title="2.3.3 测试"></a>2.3.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E7%94%B5%E8%A7%86">http://localhost:9009/sku_search?keywords=电视</a></p><p>可以看到结果多出来一个brandList</p><p><img src="/images/image-20210804212744912.png" alt="image-20210804212744912"></p><p>访问地址：<a href="http://localhost:9009/sku_search?spec_%E5%B0%BA%E5%AF%B8=%E9%87%91%E8%89%B2">http://localhost:9009/sku_search?spec_尺寸=金色</a></p><p>可以看到结果多出来一个specList</p><p><img src="/images/image-20210804213513056.png" alt="image-20210804213513056"></p><h3 id="2-4-价格区间查询"><a href="#2-4-价格区间查询" class="headerlink" title="2.4 价格区间查询"></a>2.4 价格区间查询</h3><h4 id="2-4-1-需求分析"><a href="#2-4-1-需求分析" class="headerlink" title="2.4.1 需求分析"></a>2.4.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628083462378.png" alt="image-20210804195611466"></p><p>价格区间查询，每次需要将价格传入到后台，前端传入后台的价格大概是<code>price=0-500</code>或者<code>price=500-1000</code>依次类推，最后一个是<code>price=3000</code>,后台可以根据-分割，如果分割得到的结果最多有2个，第1个表示<code>x&lt;price</code>，第2个表示<code>price&lt;=y</code>。</p><h4 id="2-4-2-代码实现"><a href="#2-4-2-代码实现" class="headerlink" title="2.4.2 代码实现"></a>2.4.2 代码实现</h4><p>修改com.changgou.service.impl.SearchServiceImpl的搜索方法，增加价格区间查询操作</p><p>增加的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3:条件 价格</span><br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(searchMap.get(<span class="hljs-string">&quot;price&quot;</span>))) &#123;<br>    String[] p = searchMap.get(<span class="hljs-string">&quot;price&quot;</span>).split(<span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-keyword">if</span> (p.length == <span class="hljs-number">2</span>) &#123;<br>        boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(p[<span class="hljs-number">1</span>]));<br>    &#125;  boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(p[<span class="hljs-number">0</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-3-测试"><a href="#2-4-3-测试" class="headerlink" title="2.4.3 测试"></a>2.4.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?price=0-500">http://localhost:9009/sku_search?price=0-500</a></p><p>可以看到价格均在这个区间</p><p><img src="/images/image-20210804220238483.png" alt="image-20210804220238483"></p><h2 id="3-搜索分页"><a href="#3-搜索分页" class="headerlink" title="3. 搜索分页"></a>3. 搜索分页</h2><h3 id="3-1-分页分析"><a href="#3-1-分页分析" class="headerlink" title="3.1 分页分析"></a>3.1 分页分析</h3><p><img src="/images/image-20210804230948101.png" alt="image-20210804230948101"></p><p>页面需要实现分页搜索，所以我们后台每次查询的时候，需要实现分页。用户页面每次会传入当前页和每页查询多少条数据，当然如果不传入每页显示多少条数据，默认查询30条即可。</p><p>前端需要传递过来两个参数，分别是当前页数和每页传递多少条数据</p><h3 id="3-2-分页实现"><a href="#3-2-分页实现" class="headerlink" title="3.2 分页实现"></a>3.2 分页实现</h3><p>分页使用PageRequest.of( pageNo- 1, pageSize);实现，第1个参数表示第N页，从0开始，第2个参数表示每页显示多少条</p><p>增加的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//9: 分页</span><br>String pageNum = searchMap.get(<span class="hljs-string">&quot;pageNum&quot;</span>); <span class="hljs-comment">//当前页</span><br>String pageSize = searchMap.get(<span class="hljs-string">&quot;pageSize&quot;</span>); <span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-comment">//如果前端没有传递，进行默认值设置</span><br><span class="hljs-keyword">if</span> (StringUtils.isEmpty(pageNum)) &#123;<br>    pageNum = <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(StringUtils.isEmpty(pageSize))&#123;<br>    pageSize = <span class="hljs-string">&quot;30&quot;</span>;<br>&#125;<br>nativeSearchQueryBuilder.withPageable(PageRequest.of(Integer.parseInt(pageNum) - <span class="hljs-number">1</span>, Integer.parseInt(pageSize)));<br><br><span class="hljs-comment">//16. 返回当前页</span><br>resultMap.put(<span class="hljs-string">&quot;pageNum&quot;</span>, pageNum);<br></code></pre></td></tr></table></figure><p>测试地址：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=20">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=20</a></p><p>可以看到总页数不再是1了，其实翻到最下面可以看到当前页为1，但是图片中就不放出来了</p><p><img src="/images/image-20210804232503168.png" alt="image-20210804232503168"></p><h2 id="4-搜索排序"><a href="#4-搜索排序" class="headerlink" title="4. 搜索排序"></a>4. 搜索排序</h2><h3 id="4-1-排序分析"><a href="#4-1-排序分析" class="headerlink" title="4.1 排序分析"></a>4.1 排序分析</h3><p><img src="/images/image-20210804232701584.png" alt="image-20210804232701584"></p><p>排序这里总共有根据价格排序、根据评价排序、根据新品排序、根据销量排序，排序要想实现非常简单，只需要告知排序的域以及排序方式即可实现。</p><p>价格排序：只需要根据价格高低排序即可，降序价格高-&gt;低，升序价格低-&gt;高</p><p>评价排序：评价分为好评、中评、差评，可以在数据库中设计3个列，用来记录好评、中评、差评的量，每次排序的时候，好评的比例来排序，当然还要有条数限制，评价条数需要超过N条。</p><p>新品排序：直接根据商品的发布时间或者更新时间排序。</p><p>销量排序：销量排序除了销售数量外，还应该要有时间段限制。</p><h3 id="4-2-排序实现"><a href="#4-2-排序实现" class="headerlink" title="4.2 排序实现"></a>4.2 排序实现</h3><p>这里我们不单独针对某个功能实现排序，我们只需要在后台接收2个参数，分别是排序域名字和排序方式</p><p>增加部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//8: 排序</span><br><span class="hljs-keyword">if</span> (!StringUtils.isEmpty(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>))) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ASC&quot;</span>.equals(searchMap.get(<span class="hljs-string">&quot;sortRule&quot;</span>))) &#123;<br>        nativeSearchQueryBuilder.withSort(SortBuilders.fieldSort(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>)).order(SortOrder.ASC));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        nativeSearchQueryBuilder.withSort(SortBuilders.fieldSort(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>)).order(SortOrder.DESC));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC</a></p><p>按照价格降序排序，每页显示1000条数据</p><h2 id="5-高亮显示"><a href="#5-高亮显示" class="headerlink" title="5. 高亮显示"></a>5. 高亮显示</h2><h3 id="5-1-高亮分析"><a href="#5-1-高亮分析" class="headerlink" title="5.1 高亮分析"></a>5.1 高亮分析</h3><p><img src="/images/image-20210804233916692.png" alt="image-20210804233916692"></p><p>高亮显示是指根据商品关键字搜索商品的时候，显示的页面对关键字给定了特殊样式，让它显示更加突出，如上图商品搜索中，关键字编程了红色，其实就是给定了红色样式。</p><h3 id="5-2-高亮搜索实现步骤解析"><a href="#5-2-高亮搜索实现步骤解析" class="headerlink" title="5.2 高亮搜索实现步骤解析"></a>5.2 高亮搜索实现步骤解析</h3><p>将之前的搜索换掉，换成高亮搜索，我们需要做3个步骤：</p><ol><li>指定高亮域，也就是设置哪个域需要高亮显示。设置高亮域的时候，需要指定前缀和后缀，也就是关键词用什么html标签包裹，再给该标签</li><li>高亮搜索实现</li><li>将非高亮数据替换成高亮数据</li></ol><p>第1点，例如在百度中搜索数据的时候，会有2个地方高亮显示，分别是标题和描述，商城搜索的时候，只是商品名称高亮显示了。而高亮显示其实就是添加了样式，例如<code>&lt;span style=&quot;color:red;&quot;&gt;笔记本&lt;/span&gt;</code>,而其中span开始标签可以称为前缀，span结束标签可以称为后缀。</p><p>第2点，高亮搜索使用ElasticsearchTemplate实现。</p><p>第3点，高亮搜索后，会搜出非高亮数据和高亮数据，高亮数据会加上第1点中的高亮样式，此时我们需要将非高亮数据换成高亮数据即可。例如非高亮:<code>华为笔记本性能超强悍</code> 高亮数据：<code>华为&lt;span style=&quot;color:red;&quot;笔记本&lt;/span&gt;性能超强悍</code>,将非高亮的换成高亮的，到页面就能显示样式了。</p><h3 id="5-3-高亮代码实现"><a href="#5-3-高亮代码实现" class="headerlink" title="5.3 高亮代码实现"></a>5.3 高亮代码实现</h3><p>删掉之前com.changgou.service.impl.SearchServiceImpl的搜索方法搜索代码，用下面高亮搜索代码替换：</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//5:高亮</span><br>HighlightBuilder.Field field = <span class="hljs-keyword">new</span> HighlightBuilder<br>        .Field(<span class="hljs-string">&quot;name&quot;</span>)<br>        .preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>)<br>        .postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);<br>nativeSearchQueryBuilder.withHighlightFields(field);<br><br><br><span class="hljs-comment">//10: 执行查询, 返回结果对象</span><br>AggregatedPage&lt;SkuInfo&gt; aggregatedPage = esTemplate.queryForPage(nativeSearchQueryBuilder.build(), SkuInfo.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse searchResponse, Class&lt;T&gt; aClass, Pageable pageable)</span> </span>&#123;<br><br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        SearchHits hits = searchResponse.getHits();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != hits) &#123;<br>            <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                SkuInfo skuInfo = JSON.parseObject(hit.getSourceAsString(), SkuInfo.class);<br>                <span class="hljs-comment">//========设置高亮域==========</span><br>                Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != highlightFields &amp;&amp; highlightFields.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    skuInfo.setName(highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>).getFragments()[<span class="hljs-number">0</span>].toString());<br>                &#125;<br>                <span class="hljs-comment">//===========================</span><br>                list.add((T) skuInfo);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;T&gt;(list, pageable, hits.getTotalHits(), searchResponse.getAggregations());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC&amp;keywords=%E7%94%B5%E8%84%91">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC&amp;keywords=电脑</a></p><p>会发现返回结果关键字电脑前后加上了标签，如果是在浏览器上，将会高亮</p><p><img src="/images/image-20210804235641430.png" alt="image-20210804235641430"></p><h1 id="Part08-Thymeleaf"><a href="#Part08-Thymeleaf" class="headerlink" title="Part08 Thymeleaf"></a>Part08 Thymeleaf</h1><h2 id="1-Thymeleaf介绍"><a href="#1-Thymeleaf介绍" class="headerlink" title="1. Thymeleaf介绍"></a>1. Thymeleaf介绍</h2><p>thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p><p>它的特点便是：开箱即用，Thymeleaf允许您处理六种模板，每种模板称为模板模式：</p><ul><li>XML</li><li>有效的XML</li><li>XHTML</li><li>有效的XHTML</li><li>HTML5</li><li>旧版HTML5</li></ul><p>所有这些模式都指的是格式良好的XML文件，但<em>Legacy HTML5</em>模式除外，它允许您处理HTML5文件，其中包含独立（非关闭）标记，没有值的标记属性或不在引号之间写入的标记属性。为了在这种特定模式下处理文件，Thymeleaf将首先执行转换，将您的文件转换为格式良好的XML文件，这些文件仍然是完全有效的HTML5（实际上是创建HTML5代码的推荐方法）<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#fn1">1</a>。</p><p>另请注意，验证仅适用于XML和XHTML模板。</p><p>然而，这些并不是Thymeleaf可以处理的唯一模板类型，并且用户始终能够通过指定在此模式下<em>解析</em>模板的方法和<em>编写</em>结果的方式来定义他/她自己的模式。这样，任何可以建模为DOM树（无论是否为XML）的东西都可以被Thymeleaf有效地作为模板处理。</p><h2 id="2-Springboot整合thymeleaf"><a href="#2-Springboot整合thymeleaf" class="headerlink" title="2. Springboot整合thymeleaf"></a>2. Springboot整合thymeleaf</h2><p>使用springboot 来集成使用Thymeleaf可以大大减少单纯使用thymleaf的代码量，所以我们接下来使用springboot集成使用thymeleaf.</p><p>实现的步骤为：</p><ul><li>创建一个sprinboot项目</li><li>添加thymeleaf的起步依赖</li><li>添加spring web的起步依赖</li><li>编写html 使用thymleaf的语法获取变量对应后台传递的值</li><li>编写controller 设置变量的值到model中</li></ul><p>具体代码如下</p><ol><li><p>创建工程，添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web起步依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-comment">&lt;!--thymeleaf配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建启动类(我这里的名字起的比较随意)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(TestApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置thymeleaf的缓存为false</span><br></code></pre></td></tr></table></figure></li><li><p>创建controller用于测试后台 设置数据到model中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <span class="hljs-comment">// 这里是需要跳转到demo.html页面，不是返回数据，所以用的是@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建demo.html到resources.templates包下 （注意templates这个包名是固定的，不能乱写）</p><p>注意：</p><ul><li><code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>这句声明使用thymeleaf标签, 不能忘了</li><li><code>th:text=&quot;$&#123;hello&#125;</code>使用了EL表达式，通过“hello”这个键获取他的值，controller中已经设置了他的值为“hello thymeleaf”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Thymeleaf快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问请求路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805124816251.png" alt="image-20210805124816251"></p></li></ol><h2 id="3-Thymeleaf基本语法"><a href="#3-Thymeleaf基本语法" class="headerlink" title="3. Thymeleaf基本语法"></a>3. Thymeleaf基本语法</h2><h3 id="3-1-提交表单（th-action）"><a href="#3-1-提交表单（th-action）" class="headerlink" title="3.1 提交表单（th:action）"></a>3.1 提交表单（th:action）</h3><p>编写标签</p><p>注意：</p><ul><li><code>@&#123;/test/hello&#125;</code>定义了表单提交路径</li><li><code>th:type=&quot;text&quot;</code>表明这是一个文本框输入标签</li><li><code>th:name=&quot;id&quot;</code>表明文本框的键的名称为id, 记得传递到控制器方法的形参也要定义为id</li><li><code>&lt;button&gt;提交&lt;/button&gt;</code>定义按钮，名称叫提交</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test/hello&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写相应的控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model, String id)</span></span>&#123;<br>    System.out.println(id);<br>    model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h3 id="3-2-对象遍历（th-each）"><a href="#3-2-对象遍历（th-each）" class="headerlink" title="3.2 对象遍历（th:each）"></a>3.2 对象遍历（th:each）</h3><p>创建包pojo，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller中添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model, String id)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br><br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>));<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写页面标签</p><p>注意：</p><ul><li><code>th:each=&quot;user, userStat:$&#123;users&#125;</code>, th:each表示开启遍历， user表示这个集合中的每一个对象，${users}表示从Model里面拿到的从控制器传递过来的集合，users表示给这个集合取一个集合变量名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>下标<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>住址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user, users:$&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            下标：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h3 id="3-3-遍历Map集合"><a href="#3-3-遍历Map集合" class="headerlink" title="3.3 遍历Map集合"></a>3.3 遍历Map集合</h3><p>Controller中添加map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Object&gt; dataMap = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>dataMap.put(<span class="hljs-string">&quot;No&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>dataMap.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;深圳&quot;</span>);<br>model.addAttribute(<span class="hljs-string">&quot;dataMap&quot;</span>,dataMap);<br></code></pre></td></tr></table></figure><p>编写标签语言</p><p>注意： </p><ul><li><code>th:text=&quot;$&#123;map&#125;&quot;</code>会将键值对以 key=value 的形式呈现在浏览器上</li><li><code>$&#123;mapStat.current.key&#125;</code>获取键和值的时候，中间都带了个current</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;map,mapStat:$&#123;dataMap&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;map&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    key:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;mapStat.current.key&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    value:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;mapStat.current.value&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    ==============================================<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805133846850.png" alt="image-20210805133846850"></p><h3 id="3-4-遍历数组"><a href="#3-4-遍历数组" class="headerlink" title="3.4 遍历数组"></a>3.4 遍历数组</h3><p>Controller中添加数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//存储一个数组</span><br>String[] names = &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;;<br>model.addAttribute(<span class="hljs-string">&quot;names&quot;</span>,names);<br></code></pre></td></tr></table></figure><p>编写标签</p><p>注意：</p><ul><li><code>nmStat.count</code>中的count是从1开始计数的，如果换成<code>nmStat.index</code>则是从0开始计数的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;nm,nmStat:$&#123;names&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;nmStat.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;nm&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    ==============================================<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805134433640.png" alt="image-20210805134433640"></p><h3 id="3-5-Date输出"><a href="#3-5-Date输出" class="headerlink" title="3.5 Date输出"></a>3.5 Date输出</h3><p>后台添加日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期</span><br>model.addAttribute(<span class="hljs-string">&quot;now&quot;</span>,<span class="hljs-keyword">new</span> Date());<br></code></pre></td></tr></table></figure><p>编写标签</p><p>注意：</p><ul><li><code>#dates.format</code>表示调用thymeleaf中的方法</li><li><code>now</code>是从控制器返回过来的键值对中的键</li><li><code>&#39;yyyy-MM-dd hh:ss:mm&#39;</code>设置要显示的日期格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(now,&#x27;yyyy-MM-dd hh:ss:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805135336701.png" alt="image-20210805135336701"></p><h3 id="3-6-条件判断（th-if）"><a href="#3-6-条件判断（th-if）" class="headerlink" title="3.6 条件判断（th:if）"></a>3.6 条件判断（th:if）</h3><p>Controller添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if条件</span><br>model.addAttribute(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><p>编写标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;(age&gt;=18)&#125;&quot;</span>&gt;</span>终于长大了！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805135716174.png" alt="image-20210805135716174"></p><h3 id="3-7-模块申明与页面包含"><a href="#3-7-模块申明与页面包含" class="headerlink" title="3.7 模块申明与页面包含"></a>3.7 模块申明与页面包含</h3><p>创建一个footer.html代码如下</p><p>注意：</p><ul><li><code>th:fragment=&quot;copy&quot;</code>定义一个copy模块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fragment<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;C&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span> &gt;</span><br>    关于我们<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在demo.html中引入模块</p><p>注意：</p><ul><li><code>th:include=&quot;footer::copy&quot;</code>, 表示的是引入footer.html中的被定义为copy的模块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;A&quot;</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;footer::copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h2 id="4-搜索页面渲染"><a href="#4-搜索页面渲染" class="headerlink" title="4 搜索页面渲染"></a>4 搜索页面渲染</h2><h3 id="4-1-搜索分析"><a href="#4-1-搜索分析" class="headerlink" title="4.1 搜索分析"></a>4.1 搜索分析</h3><p><img src="/images/image-20210805162300670.png" alt="image-20210805162300670"></p><p>搜索页面要显示的内容主要分为3块:</p><ol><li>搜索的数据结果</li><li>筛选出的数据搜索条件</li><li>用户已经勾选的数据条件</li></ol><h3 id="4-2-搜索实现"><a href="#4-2-搜索实现" class="headerlink" title="4.2 搜索实现"></a>4.2 搜索实现</h3><p><img src="/images/image-20210805162446418.png" alt="image-20210805162446418"></p><p>搜索的业务流程如上图，用户每次搜索的时候，先经过搜索业务工程，搜索业务工程调用搜索微服务工程，然后由thymeleaf渲染出静态化页面后返回给客户端</p><h4 id="4-2-1-搜索工程搭建"><a href="#4-2-1-搜索工程搭建" class="headerlink" title="4.2.1 搜索工程搭建"></a>4.2.1 搜索工程搭建</h4><ol><li><p>在changgou-service_search工程中的pom.xml中引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>静态资源导入</p><p>将本地笔记中的html页面复制到工程的resources.templates包下</p><p><img src="/images/image-20210805165043549.png" alt="image-20210805165043549"></p><p>将本地笔记中的资源复制到resources.static包下。（这两个包的名字固定）</p><p><img src="/images/image-20210805165243525.png" alt="image-20210805165243525"></p></li><li><p>更改配置文件,在spring下添加内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 不开启缓存</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="4-2-2-基础数据渲染"><a href="#4-2-2-基础数据渲染" class="headerlink" title="4.2.2 基础数据渲染"></a>4.2.2 基础数据渲染</h4><ol><li><p>更新SearchController,定义跳转搜索结果页面方法</p><p>代码如下</p><p>注意：</p><ul><li>由于这里要返回到页面，必须把类上的@RestController给换成@Controller，并把其他需要返回给前端json串的方法上添加@ResponseBody的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//搜索页面   http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为&amp;spec_网络制式=移动4G</span><br><span class="hljs-comment">//入参：Map</span><br><span class="hljs-comment">//返回值 Map</span><br><span class="hljs-comment">//由于页面是thymeleaf 完成的 属于服务器内页面渲染 跳转页面</span><br><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; searchMap, Model model)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>   <br>    <span class="hljs-comment">//特殊符号处理，这个方法被单独抽出来了</span><br>    handlerSearchMap(searchMap);<br>   <br>    <span class="hljs-comment">//执行查询返回值</span><br>    Map&lt;String, Object&gt; resultMap = searchService.search(searchMap);<br>   <br>    <span class="hljs-comment">//把药传递的数据以键值对的形式存储在model中</span><br>    model.addAttribute(<span class="hljs-string">&quot;searchMap&quot;</span>, searchMap);<br>    model.addAttribute(<span class="hljs-string">&quot;result&quot;</span>, resultMap);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;search&quot;</span>;  <span class="hljs-comment">//跳转到search.html页面</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发送请求：<a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA&amp;spec_%E7%BD%91%E7%BB%9C%E5%88%B6%E5%BC%8F=%E7%A7%BB%E5%8A%A84G">http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为&amp;spec_网络制式=移动4G</a></p><p><img src="/images/image-20210805170254574.png" alt="image-20210805170254574"></p></li><li><p>搜索结果页面渲染, 根据用户选择条件回显</p><p>(从search.html的465行开始)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bread&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-breadcrumb&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>全部结果<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.keywords&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-tag&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 品牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;brand&#x27;)&#125;&quot;</span>&gt;</span><br>            品牌:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.brand&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 价格--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;price&#x27;)&#125;&quot;</span>&gt;</span><br>            价格:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.price&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 规格--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;sm:$&#123;searchMap&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#strings.startsWith(sm.key,&#x27;spec_&#x27;)&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#strings.replace(sm.key,&#x27;spec_&#x27;,&#x27;&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#strings.replace(sm.value,&#x27;%2B&#x27;,&#x27;+&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-form form-dark&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-control control-right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-icon icon-touch-magnifier&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>根据规格参数是否携带品牌决定是否返回品牌列表</p><p>代码从500行开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- th:unless和 th:<span class="hljs-keyword">if</span> 的逻辑刚好相反，如果这个map里面有brand的话，返回<span class="hljs-keyword">false</span>--&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;type-wrap logo&quot;</span> th:unless=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;brand&#x27;)&#125;&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;fl key brand&quot;</span>&gt;品牌&lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;value logos&quot;</span>&gt;<br>        &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;logo-list&quot;</span>&gt;<br>            &lt;li th:each=<span class="hljs-string">&quot;brand,brandSate:$&#123;result.brandList&#125;&quot;</span>&gt;<br>                &lt;a th:text=<span class="hljs-string">&quot;$&#123;brand&#125;&quot;</span> th:href=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(brand=$&#123;brand&#125;)&#125;&quot;</span>&gt;&lt;/a&gt;<br>            &lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ext&quot;</span>&gt;<br>        &lt;a href=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;sui-btn&quot;</span>&gt;多选&lt;/a&gt;<br>        &lt;a href=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;更多&lt;/a&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>请求路径：<a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA">http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为</a></p><p>可以发现，品牌列表在传递的参数有品牌的时候不见了</p><p><img src="/images/image-20210805191635785.png" alt="image-20210805191635785"></p></li><li><p>规格数据格式转换及规格、价格显示</p><p>更新搜索业务层实现，将json字符串集合，转换成需要的map形式</p><p>记得在规格结果聚合那里调用下面这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将json字符串集合，转换成需要的map形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> specList</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Map&lt;String, Set&lt;String&gt;&gt; formartSpec(List&lt;String&gt; specList)&#123;<br>    Map&lt;String,Set&lt;String&gt;&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (specList!=<span class="hljs-keyword">null</span> &amp;&amp; specList.size()&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (String specJsonString : specList) &#123;  <span class="hljs-comment">//&quot;&#123;&#x27;颜色&#x27;: &#x27;黑色&#x27;, &#x27;尺码&#x27;: &#x27;250度&#x27;&#125;&quot;</span><br>            <span class="hljs-comment">//将获取到的json转换为map</span><br>            Map&lt;String,String&gt; specMap = JSON.parseObject(specJsonString, Map.class);<br>            <span class="hljs-keyword">for</span> (String specKey : specMap.keySet()) &#123;<br>                Set&lt;String&gt; specSet = resultMap.get(specKey);<br>                <span class="hljs-keyword">if</span> (specSet == <span class="hljs-keyword">null</span>)&#123;<br>                    specSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>                &#125;<br>                <span class="hljs-comment">//将规格信息存入set中</span><br>                specSet.add(specMap.get(specKey));<br>                <span class="hljs-comment">//将set存入map</span><br>                resultMap.put(specKey,specSet);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>更新页面与规格相关部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--规格部分--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-wrap&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;spec,specStat:$&#123;result.specList&#125;&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;spec_&#x27;+spec.key)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl key&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;spec.key&#125;&quot;</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl value&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;op,opstat:$&#123;spec.value&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;op&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(&#x27;spec_&#x27;+$&#123;spec.key&#125;=$&#123;op&#125;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl ext&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更新价格相关代码</p><p>531行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--价格部分--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-wrap&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;price&#x27;)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl key&quot;</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl value&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;0-500元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;0-500&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;500-1000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;500-1000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;1000-1500元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;1000-1500&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;1500-2000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;1500-2000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;2000-3000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;2000-3000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;3000元以上&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;3000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl ext&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求路径： <a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA">http://localhost:9009//sku_search/list?keywords=手机</a></p><p>可以看到品牌，规格，价格都有改动</p><p><img src="/images/image-20210805193700666.png" alt="image-20210805193700666"></p></li><li><p>商品列表</p><p>609行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--商品列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yui3-g&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yui3-u-1-5&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;sku,skuStat:$&#123;result.rows&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-wrap&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-img&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;a th:href=&quot;&#x27;http://192.168.200.128:8081/&#x27;+$&#123;sku.spuId&#125;+&#x27;.html&#x27;&quot;  target=&quot;_blank&quot;&gt;&lt;img th:src=&quot;$&#123;sku.image&#125;&quot; /&gt;&lt;/a&gt;--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://192.168.200.128:8081/10000000616300.html&#x27;&quot;</span>  <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$&#123;sku.image&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>¥<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;sku.price&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attr&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://192.168.200.128:8081/10000000616300.html&#x27;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&quot;$&#123;sku.spec&#125;&quot;</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;sku.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;commit&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;command&quot;</span>&gt;</span>已有<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2000<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人评价<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;operate&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;success-cart.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-bordered btn-danger&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-bordered&quot;</span>&gt;</span>收藏<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求路径：<a href="http://localhost:9009//sku_search/list?keywords=%E7%94%B5%E8%A7%86">http://localhost:9009//sku_search/list?keywords=电视</a></p><p><img src="/images/image-20210805194727321.png" alt="image-20210805194727321"></p></li></ol><h3 id="4-3-关键字搜索"><a href="#4-3-关键字搜索" class="headerlink" title="4.3 关键字搜索"></a>4.3 关键字搜索</h3><p>修改search.html，54行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>  <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/search/list&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-form form-inline&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-append&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;autocomplete&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;searchMap.keywords&#125;&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-error input-xxlarge&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-xlarge btn-danger&quot;</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search/list?keywords=%E5%8D%8E%E4%B8%BA">http://localhost:9009/sku_search/list?keywords=华为</a></p><p><img src="/images/image-20210805200047392.png" alt="image-20210805200047392"></p><h3 id="4-4-条件搜索实现"><a href="#4-4-条件搜索实现" class="headerlink" title="4.4 条件搜索实现"></a>4.4 条件搜索实现</h3><p><img src="/images/image-20210805200258542.png" alt="image-20210805200258542"></p><p>用户每次点击搜索的时候，其实在上次搜索的基础之上加上了新的搜索条件，也就是在上一次请求的URL后面追加了新的搜索条件，我们可以在后台每次拼接组装出上次搜索的URL，然后每次将URL存入到Model中，页面每次点击不同条件的时候，从Model中取出上次请求的URL，然后再加上新点击的条件参数实现跳转即可。</p><ol><li><p>后台记录搜索URL</p><p>修改SkuController，添加组装URL的方法，并将组装好的URL存储起来,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拼装url</span><br>StringBuilder url = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;/search/list&quot;</span>);<br><span class="hljs-keyword">if</span> (searchMap != <span class="hljs-keyword">null</span> &amp;&amp; searchMap.size()&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//是由查询条件</span><br>    url.append(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String paramKey : searchMap.keySet()) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;sortRule&quot;</span>.equals(paramKey) &amp;&amp; !<span class="hljs-string">&quot;sortField&quot;</span>.equals(paramKey) &amp;&amp; !<span class="hljs-string">&quot;pageNum&quot;</span>.equals(paramKey))&#123;<br>            url.append(paramKey).append(<span class="hljs-string">&quot;=&quot;</span>).append(searchMap.get(paramKey)).append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//http://localhost:9009/search/list?keywords=手机&amp;spec_网络制式=4G&amp;</span><br>    String urlString = url.toString();<br>    <span class="hljs-comment">//去除路径上的最后一个&amp;</span><br>    urlString=urlString.substring(<span class="hljs-number">0</span>,urlString.length()-<span class="hljs-number">1</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;url&quot;</span>,urlString);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;url&quot;</span>,url);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>页面搜索对接</p><p>修改品牌部份</p><p><img src="/images/image-20210805201634600.png" alt="image-20210805201634600"></p><p>修改规格部分</p><p><img src="/images/image-20210805202354898.png" alt="image-20210805202354898"></p><p>修改价格部分</p><p><img src="/images/image-20210805202524337.png" alt="image-20210805202524337"></p><p>测试，点击品牌，规格，价格参数后都会自动拼接到url字符串上</p><p><img src="/images/image-20210805203120830.png" alt="image-20210805203120830"></p></li></ol><h3 id="4-5-移除搜索条件"><a href="#4-5-移除搜索条件" class="headerlink" title="4.5 移除搜索条件"></a>4.5 移除搜索条件</h3><p><img src="/images/image-20210805203243750.png" alt="image-20210805203243750"></p><p>如上图，用户点击条件搜索后，要将选中的条件显示出来，并提供移除条件的<code>x</code>按钮,显示条件我们可以从searchMap中获取，移除其实就是将之前的请求地址中的指定条件删除即可。</p><p>修改search.html，移除分类、品牌、价格、规格搜索条件，代码如下：</p><p>只要修改方框里的内容，其实就是把字符串用空串代替</p><p><img src="/images/image-20210805204605803.png" alt="image-20210805204605803"></p><h3 id="4-6-排序"><a href="#4-6-排序" class="headerlink" title="4.6 排序"></a>4.6 排序</h3><p>修改search.html，实现排序，代码如下：</p><p>603行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(sortRule=&#x27;ASC&#x27;,sortField=&#x27;price&#x27;)&#125;&quot;</span>&gt;</span>价格↑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(sortRule=&#x27;DESC&#x27;,sortField=&#x27;price&#x27;)&#125;&quot;</span>&gt;</span>价格↓<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试: 点击价格，看是否进行排序</p><p><img src="/images/image-20210805205025043.png" alt="image-20210805205025043"></p><h3 id="4-7-分页"><a href="#4-7-分页" class="headerlink" title="4.7 分页"></a>4.7 分页</h3><ol><li><p>分页工具类定义</p><p>在common工程中添加Page分页对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span> &lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br><span class="hljs-comment">//当前默认为第一页</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer pageNum = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//默认每页显示条件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer pageSize = <span class="hljs-number">20</span>;<br><br><br><span class="hljs-comment">//判断当前页是否为空或是小于1</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">cpn</span><span class="hljs-params">(Integer pageNum)</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == pageNum || pageNum &lt; <span class="hljs-number">1</span>)&#123;<br>pageNum = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pageNum;<br>&#125;<br><br><br><span class="hljs-comment">// 页数（第几页）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> currentpage;<br><br><span class="hljs-comment">// 查询数据库里面对应的数据有多少条</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> total;<span class="hljs-comment">// 从数据库查处的总记录数</span><br><br><span class="hljs-comment">// 每页显示多少分页标签</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">// 下页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> next;<br><br><span class="hljs-keyword">private</span> List&lt;T&gt; list;<br><br><span class="hljs-comment">// 最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> last;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> lpage;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rpage;<br><br><span class="hljs-comment">//从哪条开始查</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> start;<br><br><span class="hljs-comment">//全局偏移量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> offsize = <span class="hljs-number">2</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br>&#125;<br><br><span class="hljs-comment">/****</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage 当前页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total 总记录数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize 每页显示多少条</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentpage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> currentpage,<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">long</span> pagesize)</span> </span>&#123;<br><br><span class="hljs-comment">//如果整除表示正好分N页，如果不能整除在N页的基础上+1页</span><br><span class="hljs-keyword">int</span> totalPages = (<span class="hljs-keyword">int</span>) (total%pagesize==<span class="hljs-number">0</span>? total/pagesize : (total/pagesize)+<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//总页数</span><br><span class="hljs-keyword">this</span>.last = totalPages;<br><br><span class="hljs-comment">//判断当前页是否越界,如果越界，我们就查最后一页</span><br><span class="hljs-keyword">if</span>(currentpage&gt;totalPages)&#123;<br><span class="hljs-keyword">this</span>.currentpage = totalPages;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">this</span>.currentpage=currentpage;<br>&#125;<br><br><span class="hljs-comment">//计算起始页</span><br><span class="hljs-keyword">this</span>.start = (<span class="hljs-keyword">this</span>.currentpage-<span class="hljs-number">1</span>)*pagesize;<br>&#125;<br>  <br>  <span class="hljs-comment">/****</span><br><span class="hljs-comment"> * 初始化分页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initPage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize)</span></span>&#123;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-keyword">this</span>.total = total;<br><span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-keyword">this</span>.size=pagesize;<br><br><span class="hljs-comment">//计算当前页和数据库查询起始值以及总页数</span><br>setCurrentpage(currentpage, total, pagesize);<br><br><span class="hljs-comment">//分页计算</span><br><span class="hljs-keyword">int</span> leftcount =<span class="hljs-keyword">this</span>.offsize,<span class="hljs-comment">//需要向上一页执行多少次</span><br>rightcount =<span class="hljs-keyword">this</span>.offsize;<br><br><span class="hljs-comment">//起点页</span><br><span class="hljs-keyword">this</span>.lpage =currentpage;<br><span class="hljs-comment">//结束页</span><br><span class="hljs-keyword">this</span>.rpage =currentpage;<br><br><span class="hljs-comment">//2点判断</span><br><span class="hljs-keyword">this</span>.lpage = currentpage-leftcount;<span class="hljs-comment">//正常情况下的起点</span><br><span class="hljs-keyword">this</span>.rpage = currentpage+rightcount;<span class="hljs-comment">//正常情况下的终点</span><br><br><span class="hljs-comment">//页差=总页数和结束页的差</span><br><span class="hljs-keyword">int</span> topdiv = <span class="hljs-keyword">this</span>.last-rpage;<span class="hljs-comment">//判断是否大于最大页数</span><br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 起点页</span><br><span class="hljs-comment"> * 1、页差&lt;0  起点页=起点页+页差值</span><br><span class="hljs-comment"> * 2、页差&gt;=0 起点和终点判断</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.lpage=topdiv&lt;<span class="hljs-number">0</span>? <span class="hljs-keyword">this</span>.lpage+topdiv:<span class="hljs-keyword">this</span>.lpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 结束页</span><br><span class="hljs-comment"> * 1、起点页&lt;=0   结束页=|起点页|+1</span><br><span class="hljs-comment"> * 2、起点页&gt;0    结束页</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.rpage=<span class="hljs-keyword">this</span>.lpage&lt;=<span class="hljs-number">0</span>? <span class="hljs-keyword">this</span>.rpage+(<span class="hljs-keyword">this</span>.lpage*-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>: <span class="hljs-keyword">this</span>.rpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 当起点页&lt;=0  让起点页为第一页</span><br><span class="hljs-comment"> * 否则不管</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.lpage=<span class="hljs-keyword">this</span>.lpage&lt;=<span class="hljs-number">0</span>? <span class="hljs-number">1</span>:<span class="hljs-keyword">this</span>.lpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 如果结束页&gt;总页数   结束页=总页数</span><br><span class="hljs-comment"> * 否则不管</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.rpage=<span class="hljs-keyword">this</span>.rpage&gt;last? <span class="hljs-keyword">this</span>.last:<span class="hljs-keyword">this</span>.rpage;<br>&#125;<br>  <br>  <span class="hljs-comment">/****</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total   总记录数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage当前页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize每页显示多少条</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize)</span> </span>&#123;<br>initPage(total,currentpage,pagesize);<br>&#125;<br><br><span class="hljs-comment">//上一页</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getUpper</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> currentpage&gt;<span class="hljs-number">1</span>? currentpage-<span class="hljs-number">1</span>: currentpage;<br>&#125;<br><br><span class="hljs-comment">//总共有多少页，即末页</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLast</span><span class="hljs-params">(<span class="hljs-keyword">int</span> last)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.last = (<span class="hljs-keyword">int</span>) (total%size==<span class="hljs-number">0</span>? total/size : (total/size)+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/****</span><br><span class="hljs-comment"> * 带有偏移量设置的分页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> offsize</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize,<span class="hljs-keyword">int</span> offsize)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.offsize = offsize;<br>initPage(total, currentpage, pagesize);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span>  currentpage&lt;last? currentpage+<span class="hljs-number">1</span>: last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span> next)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.next = next;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getCurrentpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> currentpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotal</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.total = total;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.size = size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getLast</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getLpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> lpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLpage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.lpage = lpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getRpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> rpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRpage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.rpage = rpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getStart</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> start;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStart</span><span class="hljs-params">(<span class="hljs-keyword">long</span> start)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.start = start;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentpage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> currentpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.currentpage = currentpage;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the list</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list the list to set</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;T&gt; list)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.list = list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-comment">//当前页</span><br><span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-keyword">int</span> cpage =<span class="hljs-number">17</span>;<br>Page page = <span class="hljs-keyword">new</span> Page(<span class="hljs-number">1001</span>,cpage,<span class="hljs-number">50</span>,<span class="hljs-number">7</span>);<br>System.out.println(<span class="hljs-string">&quot;开始页:&quot;</span>+page.getLpage()+<span class="hljs-string">&quot;__当前页：&quot;</span>+page.getCurrentpage()+<span class="hljs-string">&quot;__结束页&quot;</span>+page.getRpage()+<span class="hljs-string">&quot;____总页数：&quot;</span>+page.getLast());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分页实现</p><p>修改SkuController,实现分页信息封装，代码如下：</p><p>添加到拼接url的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//封装分页数据并返回</span><br><span class="hljs-comment">//1.总记录数</span><br><span class="hljs-comment">//2.当前页</span><br><span class="hljs-comment">//3.每页显示多少条</span><br>Page&lt;SkuInfo&gt; page = <span class="hljs-keyword">new</span> Page&lt;SkuInfo&gt;(<br>        Long.parseLong(String.valueOf( resultMap.get(<span class="hljs-string">&quot;total&quot;</span>))),<br>        Integer.parseInt(String.valueOf(resultMap.get(<span class="hljs-string">&quot;pageNum&quot;</span>))),<br>        Page.pageSize<br>);<br>model.addAttribute(<span class="hljs-string">&quot;page&quot;</span>,page);<br></code></pre></td></tr></table></figure></li><li><p>页面分页实现</p><p>修改search.html，实现分页查询，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-pagination pagination-large&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prev disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;page.upper&#125;)&#125;&quot;</span>&gt;</span>«上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;i:$&#123;#numbers.sequence(page.lpage,page.rpage)&#125;&quot;</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;i&#125;==$&#123;page.currentpage&#125;?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;i&#125;)&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;i&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;page.next&#125;)&#125;&quot;</span>&gt;</span>下一页»<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;page.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>页<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;page.total&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>个商品<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="5-畅购商品详情页"><a href="#5-畅购商品详情页" class="headerlink" title="5. 畅购商品详情页"></a>5. 畅购商品详情页</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>当系统审核完成商品，需要将商品详情页进行展示，那么采用静态页面生成的方式生成，并部署到高性能的web服务器中进行访问是比较合适的。所以，开发流程如下图所示：</p><p><img src="/images/image-20210805232618788.png" alt="image-20210805232618788"></p><p>此处MQ我们使用Rabbitmq即可。</p><p>执行步骤解释：</p><ul><li>系统管理员（商家运维人员）修改或者审核商品的时候, 会更改数据库中商品上架状态并发送商品id给rabbitMq中的上架交换器</li><li>上架交换器会将商品id发给静态页生成队列</li><li>静态页微服务设置监听器, 监听静态页生成队列, 根据商品id获取商品详细数据并使用thymeleaf的模板技术生成静态页</li></ul><h3 id="5-2-商品静态化微服务创建"><a href="#5-2-商品静态化微服务创建" class="headerlink" title="5.2 商品静态化微服务创建"></a>5.2 商品静态化微服务创建</h3><h4 id="5-2-1-需求分析"><a href="#5-2-1-需求分析" class="headerlink" title="5.2.1 需求分析"></a>5.2.1 需求分析</h4><p>该微服务只用于生成商品静态页，不做其他事情。</p><h4 id="5-2-2-搭建项目"><a href="#5-2-2-搭建项目" class="headerlink" title="5.2.2 搭建项目"></a>5.2.2 搭建项目</h4><ol><li><p>在changgou-service下创建一个名称为changgou_service_page的项目,作为静态化页面生成微服务</p></li><li><p>changgou-service-page中添加起步依赖，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改application.yml的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9011</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">page</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">600000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">600000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br><span class="hljs-comment"># 生成静态页的位置</span><br><span class="hljs-attr">pagepath:</span> <span class="hljs-string">D:\items</span><br></code></pre></td></tr></table></figure></li><li><p>创建系统启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.changgou.goods.feign&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(PageApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-3-生成静态页"><a href="#5-3-生成静态页" class="headerlink" title="5.3 生成静态页"></a>5.3 生成静态页</h3><h4 id="5-3-1-需求分析"><a href="#5-3-1-需求分析" class="headerlink" title="5.3.1 需求分析"></a>5.3.1 需求分析</h4><p>页面发送请求，传递要生成的静态页的商品的SpuID.后台controller 接收请求，调用thyemleaf的原生API生成商品静态页。</p><p><img src="/images/image-20210805233422423.png" alt="image-20210805233422423"></p><p>上图是要生成的商品详情页，从图片上可以看出需要查询SPU的3个分类作为面包屑显示，同时还需要查询SKU和SPU信息。</p><h4 id="5-3-2-Feign创建"><a href="#5-3-2-Feign创建" class="headerlink" title="5.3.2 Feign创建"></a>5.3.2 Feign创建</h4><p>一会儿需要查询SPU和SKU以及Category，所以我们需要先创建Feign，修改changgou-service-goods-api,添加CategoryFeign，并在CategoryFeign中添加根据ID查询分类数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CategoryFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/category/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在changgou-service-goods-api,添加SkuFeign,并添加根据SpuID查询Sku集合，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;goods&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku&quot;)</span>  <span class="hljs-comment">//这个路径拼接到下面方法上也可以</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SkuFeign</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 多条件搜索品牌数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spuId&quot;)</span> String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在changgou-service-goods-api,添加SpuFeign,并添加根据SpuID查询Spu信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SpuFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/findSpuById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findSpuById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-3-静态页生成代码"><a href="#5-3-3-静态页生成代码" class="headerlink" title="5.3.3 静态页生成代码"></a>5.3.3 静态页生成代码</h4><ol><li><p>创建PageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PageService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成静态化页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">generateItemPage</span><span class="hljs-params">(String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建PageServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PageService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SpuFeign spuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryFeign categoryFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SkuFeign skuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TemplateEngine templateEngine;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pagepath&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String pagepath;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateItemPage</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>        <span class="hljs-comment">//获取context对象,用于存放商品详情数据</span><br>        Context context = <span class="hljs-keyword">new</span> Context();<br>        Map&lt;String, Object&gt; itemData = <span class="hljs-keyword">this</span>.findItemData(spuId);<br>        context.setVariables(itemData);<br>        <span class="hljs-comment">//获取商品详情页生成的指定位置</span><br>        File dir = <span class="hljs-keyword">new</span> File(pagepath);<br>        <span class="hljs-comment">//判断商品详情页文件夹是否存在,不存在则创建</span><br>        <span class="hljs-keyword">if</span> (!dir.exists())&#123;<br>            dir.mkdirs();<br>        &#125;<br>        <span class="hljs-comment">//定义输出流,进行文件生成</span><br>        File file = <span class="hljs-keyword">new</span> File(dir+<span class="hljs-string">&quot;/&quot;</span>+spuId+<span class="hljs-string">&quot;.html&quot;</span>);<br>        Writer out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            out = <span class="hljs-keyword">new</span> PrintWriter(file);<br>            <span class="hljs-comment">//生成文件</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 1.模板名称</span><br><span class="hljs-comment">             * 2.context对象,包含了模板需要的数据</span><br><span class="hljs-comment">             * 3.输出流,指定文件输出位置</span><br><span class="hljs-comment">             */</span><br>            templateEngine.process(<span class="hljs-string">&quot;item&quot;</span>,context,out);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//获取静态化页面数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title">findItemData</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br><br>        Map&lt;String,Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-comment">//获取spu信息</span><br>        Result&lt;Spu&gt; spuResult = spuFeign.findSpuById(spuId);<br>        Spu spu = spuResult.getData();<br>        resultMap.put(<span class="hljs-string">&quot;spu&quot;</span>,spu);<br><br>        <span class="hljs-comment">//获取图片信息</span><br>        <span class="hljs-keyword">if</span> (spu != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(spu.getImages()))&#123;<br>                resultMap.put(<span class="hljs-string">&quot;imageList&quot;</span>,spu.getImages().split(<span class="hljs-string">&quot;,&quot;</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//获取分类信息</span><br>        Category category1 = (Category) categoryFeign.findById(spu.getCategory1Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category1&quot;</span>,category1);<br>        Category category2 = (Category) categoryFeign.findById(spu.getCategory2Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category2&quot;</span>,category2);<br>        Category category3 = (Category) categoryFeign.findById(spu.getCategory3Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category3&quot;</span>,category3);<br>        <span class="hljs-comment">//获取sku集合信息</span><br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>        resultMap.put(<span class="hljs-string">&quot;skuList&quot;</span>,skuList);<br><br>        resultMap.put(<span class="hljs-string">&quot;specificationList&quot;</span>, JSON.parseObject(spu.getSpecItems(), Map.class));<br>        <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明page_create_queue队列,并绑定到商品上架交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAGE_CREATE_QUEUE=<span class="hljs-string">&quot;page_create_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(PAGE_CREATE_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">PAGE_CREATE_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PAGE_CREATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br><br>    <span class="hljs-comment">//队列与交换机的绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_UP_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">PAGE_CREATE_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(PAGE_CREATE_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建PageListener监听类,监听page_create_queue队列,获取消息,并生成静态化页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PageService pageService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.PAGE_CREATE_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成商品详情页面,商品id为: &quot;</span>+spuId);<br>        <span class="hljs-comment">//生成静态化页面</span><br>        pageService.generateItemPage(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更新canal中消息队列配置类与Page服务一致</p></li><li><p>更新canal中对于spu表的监听类,当商品审核状态从0变1,则将当前spuId发送到消息队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取最新审核商品</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;status&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;1&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;status&quot;</span>)))&#123;<br>  <span class="hljs-comment">//发送商品spuId</span><br>  rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_UP_EXCHANGE,<span class="hljs-string">&quot;&quot;</span>,newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>最后记得把list.html拷贝到templates包下</p><h4 id="5-3-4-启动测试"><a href="#5-3-4-启动测试" class="headerlink" title="5.3.4 启动测试"></a>5.3.4 启动测试</h4><p>启动eurekea服务端,数据监控服务,商品服务,静态页生成服务. 将spu表中status字段从0更新为1。在生成的items目录下会看到新增的页面，把css, img等那些静态资源放到与items同级的包下，可以看到，点开页面可以看到下图</p><p><img src="/images/image-20210806141505171.png" alt="image-20210806141505171"></p><h4 id="5-3-5-基于nginx完成静态页访问"><a href="#5-3-5-基于nginx完成静态页访问" class="headerlink" title="5.3.5 基于nginx完成静态页访问"></a>5.3.5 基于nginx完成静态页访问</h4><p>用FileZilla连接到服务器（这里就是我们的虚拟机）</p><p><img src="/images/image-20210806142622109.png" alt="image-20210806142622109"></p><p>把生成的html页面复制到服务器端的html包下</p><p><img src="/images/image-20210806142913422.png" alt="image-20210806142913422"></p><p>然后重启服务器端的nginx</p><p>输入请求路径（端口改为http协议默认端口80了）：<a href="http://192.168.200.128/10000001516600.html">http://192.168.200.128/10000001516600.html</a></p><p>可以发现，通过访问远端服务器也可以访问到图片了</p><p><img src="/images/image-20210806143130888.png" alt="image-20210806143130888"></p>]]></content>
    
    
    <categories>
      
      <category>畅购商城项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第一部分</title>
    <link href="/2021/07/26/1.1%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/26/1.1%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part-01-框架搭建"><a href="#Part-01-框架搭建" class="headerlink" title="Part-01 框架搭建"></a>Part-01 框架搭建</h1><h2 id="1-框架搭建"><a href="#1-框架搭建" class="headerlink" title="1. 框架搭建"></a>1. 框架搭建</h2><h3 id="1-1-项目结构说明"><a href="#1-1-项目结构说明" class="headerlink" title="1.1 项目结构说明"></a>1.1 项目结构说明</h3><p><img src="/images/image-20210726205356384.png" alt="image-20210726205356384"></p><p>各个包的用途</p><ul><li><p>changgou_auth:  （目前还不是太理解这一部分的作用）</p></li><li><p>changgou_common: 用来放返回给前端的result</p></li></ul><p><img src="/images/image-20210726205734286.png" alt="image-20210726205734286"></p><ul><li>changgou_common_db:  （目前还不是太理解这一部分的作用）</li><li>changgou_eureka: 微服务的注册中心，获取不同微服务的地址，便于通信</li><li>changgou_gateway : 网关模块，根据网站的规模和需要，可以将综合逻辑相关的服务用网关路由组合到一起。在这里还可以做鉴权和限流相关操作。</li><li>changgou_reverser: (目前还不是太理解这一部分的作用)</li><li>changgou_service: 微服务模块，该模块用于存放所有独立的微服务工程。</li></ul><p><img src="/images/image-20210726210519758.png" alt="image-20210726210519758"></p><ul><li><p>changgou_service_api: 这里面放了各个微服务对应工程的JavaBean、Feign、以及Hystrix配置，该工程主要对外提供依赖。</p></li><li><p>changgou_transaction_fescar: 分布式事务模块，将分布式事务抽取到该工程中，任何工程如需要使用分布式事务，只需依赖该工程即可。 (目前还不是太理解这一部分的作用)</p></li><li><p>changgou_web: web服务工程，对应功能模块如需要调用多个微服务，可以将他们写入到该模块中，例如网站后台、网站前台等。 (目前还不是太理解这一部分的作用)</p></li></ul><h3 id="1-2-父工程搭建"><a href="#1-2-父工程搭建" class="headerlink" title="1.2 父工程搭建"></a>1.2 父工程搭建</h3><p>首先，创建空项目changgou。下面的所有模块都是用的无模板maven创建的，没有用Spring Initializr。</p><h4 id="1-2-1-一级父工程搭建"><a href="#1-2-1-一级父工程搭建" class="headerlink" title="1.2.1  一级父工程搭建"></a>1.2.1  一级父工程搭建</h4><p>在项目下面创建父工程 changgou_parent</p><p>配置好pom.xml文件，将src文件夹给删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--spring boot项目跳过测试，但是测试类会生成.class文件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--依赖包--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--测试包--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--这下面的几个包是因为我没加时出异常：“java.lang.TypeNotPresentException: Type javax.xml.bind.JAXBContext not present”   应该和jdk的版本有关系--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-二级父工程模块搭建"><a href="#1-2-2-二级父工程模块搭建" class="headerlink" title="1.2.2 二级父工程模块搭建"></a>1.2.2 二级父工程模块搭建</h4><p>创建changgou_gateway、changgou_service、changgou_service_api、 </p><p>changgou_web工程，工程全部为pom工程，并将所有工程的src文件删除。</p><h3 id="1-3-Eureka微服务搭建"><a href="#1-3-Eureka微服务搭建" class="headerlink" title="1.3 Eureka微服务搭建"></a>1.3 <strong>Eureka</strong>微服务搭建</h3><ol><li><p>在一级父工程下创建模块changgou_eureka。这个模块是用来当做注册中心服务方的（eureka-server）</p></li><li><p>pom.xml文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--eureka-server依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 appliation.yml 配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6868</span> <span class="hljs-comment"># 表明这个服务的端口号是6868，启动以后在网页端输入（localhost:6868）即可访问图形界面</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于他是注册中心，所以不用注册到eureka中</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#他是给client提供信息的，所以不用从eureka中获取信息</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 表明这是一个注册中心，但是要注意在网页端输入 localhost:6868 才能看到图形界面，而不是下面这个带/eureka/的url</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p><code>$&#123;server.port&#125;</code>也是一种语言，用来获取配置文件键值对中的值的字符串，在这里就是 6868。            </p></li><li><p>在 java 目录下创建包 com.changgou.eureka，并在 eureka 包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//表明这是一个服务的启动类</span><br><span class="hljs-meta">@EnableEurekaServer</span>     <span class="hljs-comment">//表明这是eureka-server</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>上述步骤完成以后，启动启动类。在浏览器输入<code>localhost:6868</code>, 看是否能顺利打开图形界面。</p><h3 id="1-4-公共模块服务搭建"><a href="#1-4-公共模块服务搭建" class="headerlink" title="1.4 公共模块服务搭建"></a>1.4 公共模块服务搭建</h3><h4 id="1-4-1-全局公共模块"><a href="#1-4-1-全局公共模块" class="headerlink" title="1.4.1 全局公共模块"></a>1.4.1 全局公共模块</h4><ol><li><p>在一级父工程下创建子模块 changgou_common</p></li><li><p>引入 pom.xml 文件依赖（redis, operfeign这俩依赖目前还不知道其用途）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--web起步依赖。这里导入他，是因为这个包的目的就是创建实体类并将结果封装返回给前端--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- redis 使用--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这里的响应结果和前端请求的格式都是json格式，所以需要这个包--&gt;</span>    <br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.51<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 com.changgou.entity 包，包下封装相关公共实体类。（这里的entity实体类就按照模板来就行了，因为它是用来和前端交互信息的，写法比较固定）</p><p><img src="/images/image-20210726220028054.png" alt="image-20210726220028054"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回结果实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag;<span class="hljs-comment">//是否成功</span><br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//返回码</span><br>    <span class="hljs-keyword">private</span> String message;<span class="hljs-comment">//返回消息</span><br><br>    <span class="hljs-keyword">private</span> T data;<span class="hljs-comment">//返回数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, Integer code, String message, Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = (T)data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, Integer code, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">this</span>.code = StatusCode.OK;<br>        <span class="hljs-keyword">this</span>.message = <span class="hljs-string">&quot;执行成功&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFlag</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlag</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(Integer code)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页结果类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageResult</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long total;<span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; rows;<span class="hljs-comment">//记录</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageResult</span><span class="hljs-params">(Long total, List&lt;T&gt; rows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.total = total;<br>        <span class="hljs-keyword">this</span>.rows = rows;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageResult</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotal</span><span class="hljs-params">(Long total)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.total = total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getRows</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rows;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRows</span><span class="hljs-params">(List&lt;T&gt; rows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rows = rows;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回码实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatusCode</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> OK=<span class="hljs-number">20000</span>;<span class="hljs-comment">//成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ERROR =<span class="hljs-number">20001</span>;<span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOGINERROR =<span class="hljs-number">20002</span>;<span class="hljs-comment">//用户名或密码错误</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ACCESSERROR =<span class="hljs-number">20003</span>;<span class="hljs-comment">//权限不足</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REMOTEERROR =<span class="hljs-number">20004</span>;<span class="hljs-comment">//远程调用失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REPERROR =<span class="hljs-number">20005</span>;<span class="hljs-comment">//重复操作</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-数据访问公共模块搭建"><a href="#1-4-2-数据访问公共模块搭建" class="headerlink" title="1.4.2 数据访问公共模块搭建"></a>1.4.2 数据访问公共模块搭建</h4><p>这个公共模块是连接mysql数据库的公共微服务模块，所以需要连接mysql的微服务都继承自此工程。 </p><ol><li><p>创建数据访问公共模块changgou_common_db</p></li><li><p>给 pom.xml 文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通用mapper起步依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--MySQL数据库驱动--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--mybatis分页插件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-5-商品微服务搭建"><a href="#1-5-商品微服务搭建" class="headerlink" title="1.5 商品微服务搭建"></a>1.5 商品微服务搭建</h3><h4 id="1-5-1-商品微服务API工程搭建"><a href="#1-5-1-商品微服务API工程搭建" class="headerlink" title="1.5.1 商品微服务API工程搭建"></a>1.5.1 商品微服务<strong>API</strong>工程搭建</h4><ol><li><p>二级父工程 changgou_service_api 的 pom.xml 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--这个包的作用是持久化，具体的说就是在实体类中进行元数据标签的作用，是ORM框架中用到的--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ORM框架可以通过这个元数据标签，使得实体类与数据库中的表建立映射关系。<br>例如javax.persistence.Column标识实体类中的这个属性对应于数据库中的一个字段等等。</p></li><li><p>changgou_service_api 下创建 changgou_service_goods_api 子模块</p></li></ol><h4 id="1-5-2-微服务工程搭建"><a href="#1-5-2-微服务工程搭建" class="headerlink" title="1.5.2 微服务工程搭建"></a>1.5.2 微服务工程搭建</h4><ol><li><p>二级父工程 changgou_service 下创建 changgou_service_goods 子模块 ，pom.xml 文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--这个包需要和数据库打交道，所以导入了changgou_common_db依赖，因为在changgou_common_db这个包中导入了数据库的一些依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common_db<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--导入changgou_service_goods_api包，是因为这个包里面定义了商品的pojo--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建并配置文件application.yml </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span>      <span class="hljs-comment"># 配置这个商品微服务的端口为 9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">goods</span>   <span class="hljs-comment"># 配置这个微服务的名称为 goods</span><br>  <span class="hljs-attr">datasource:</span>     <span class="hljs-comment"># 配置mysql数据库的连接，注意他比spring低一级，注意要连接的数据库的 url 和表名称</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.200.128:3306/changgou_goods?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><span class="hljs-comment"># register-with-eureka，fetch-registry这俩不写的话默认为true，表示他是eureka-client</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span> <span class="hljs-comment"># 声明注册中心</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 声明这个实例可以通过ip访问到，而不只是域名</span><br><span class="hljs-attr">feign:</span>   <span class="hljs-comment"># 这里还不熟，后面单独加强</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 开启熔断机制</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">20000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><span class="hljs-comment"># 这里还不熟，后面单独加强</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-comment"># 熔断器超时时间，默认：1000/毫秒</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">20000</span><br></code></pre></td></tr></table></figure></li><li><p>创建包com.changgou.goods，并在goods下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">// 表明他是这个服务的启动类</span><br><span class="hljs-meta">@EnableEurekaClient</span>     <span class="hljs-comment">// 表明这个微服务是一个eureka-client</span><br><span class="hljs-meta">@MapperScan(basePackages = &#123;&quot;com.changgou.goods.dao&quot;&#125;)</span>  <span class="hljs-comment">//@MapperScan是tk.mybatis.spring.annotation包下的，用于扫描dao包下的Mapper接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run( GoodsApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-商品微服务-品牌增删改查"><a href="#2-商品微服务-品牌增删改查" class="headerlink" title="2. 商品微服务-品牌增删改查"></a>2. 商品微服务-品牌增删改查</h2><p>先实现他的基本需求</p><ol><li>查询全部列表数据 </li><li>根据ID查询实体数据 </li><li>增加 </li><li>修改</li><li>删除</li><li>条件查询</li><li>分页查询</li><li>分页+条件查询 </li></ol><p>再观察他的表结构   (<em>tips: ctrl+enter 是在表格内换行, 直接按 enter会退出表格</em>)</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>品牌id</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>image</td><td>品牌图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>letter</td><td>品牌的首字母</td><td>CHAR</td><td></td><td></td></tr><tr><td>seq</td><td>排序</td><td>INT</td><td></td><td></td></tr></tbody></table><h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h3><p>商品类的整体包结构还是三层架构</p><p><img src="/images/image-20210727122004680.png" alt="image-20210727122004680"></p><h4 id="2-1-1-品牌列表"><a href="#2-1-1-品牌列表" class="headerlink" title="2.1.1 品牌列表"></a>2.1.1 品牌列表</h4><ol><li>在changgou_service_goods_api创建com.changgou.goods.pojo包，pojo包下创建 Brand实体类</li></ol><p><img src="/images/image-20210727120159612.png" alt="image-20210727120159612"></p><p>​    <img src="/images/image-20210727120235587.png" alt="image-20210727120235587"></p><p>​    注意实体类中的<code>@Table(name=&quot;tb_brand&quot;)</code>和<code>@Id</code>这俩注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changgou.goods.pojo;<br><br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> javax.persistence.Table;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * brand实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Table(name=&quot;tb_brand&quot;)</span>  <span class="hljs-comment">//表明这个类和mysql数据库中的 tb_brand 相对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-meta">@Id</span>  <span class="hljs-comment">//表明id是表的主键</span><br><span class="hljs-keyword">private</span> Integer id;<span class="hljs-comment">//品牌id</span><br><br><br><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//品牌名称</span><br><span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//品牌图片地址</span><br><span class="hljs-keyword">private</span> String letter;<span class="hljs-comment">//品牌的首字母</span><br><span class="hljs-keyword">private</span> Integer seq;<span class="hljs-comment">//排序</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getImage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> image;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImage</span><span class="hljs-params">(String image)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.image = image;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLetter</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> letter;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLetter</span><span class="hljs-params">(String letter)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.letter = letter;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getSeq</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> seq;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSeq</span><span class="hljs-params">(Integer seq)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.seq = seq;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>Dao创建 </p><p>在changgou_service_goods微服务下创建com.changgou.goods.dao.BrandMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Mapper&lt;T&gt;是一个接口, 继承它以后可以用一些基本的对数据库单表的操作方法,如果查询比较复杂, 则可以自己在BrandMapper中定义方法在注解上完成sql语句的编写</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">Brand</span>&gt; </span>&#123; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务层 (service层)</p><p>创建com.changgou.goods.service.BrandService接口，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BrandService</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 com.changgou.goods.service.impl 包，包下创建服务实现类 BrandServiceImpl， 代码如下：</p><p>注意: </p><ul><li>业务层实现类上的 bean 定义<code>@Service</code>不能忘了</li><li>要记得用<code>@Autowired</code>注入BrandMapper这个接口,是通过这个接口去操控数据库的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BrandService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BrandMapper brandMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brandMapper.selectAll();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层 </p><p>控制层 com.changgou.goods包下创建controller包 ，包下创建类</p><p>注意:</p><ul><li><code>@RestController</code> = <code>@ResponseBody</code>+<code>@Controller</code>, <code>@ResponseBody</code>表明这个方法的返回值不是去跳转页面,而是响应给客户端浏览器的响应体. <code>@Controller</code>则是把这个类创建成bean放入spring容器</li><li>由于项目一般前后端分离, 前端项目和后端项目会部署在不同的服务器上, 所以客户端浏览器的请求是跨域的, 会存在请求通过前端到达不了后端的情况,  <code>@CrossOrigin</code>则表明允许跨域, 会解决掉上述问题</li><li><code>@RequestMapping</code>限制了这个控制器的访问路径</li><li><code>@Autowired</code>则是注入<code>BrandService</code>接口, 使用其接口实现类的方法</li><li><code>@GetMapping</code>则是使用了Restful风格, Get 表明这次请求是一次查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@RequestMapping(&quot;/brand&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BrandService brandService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Brand&gt; brandList = brandService.findAll();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,brandList) ;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>以上是查询全部商品的一个流程, 其他的基本需求流程是一样的, 若需要仔细研究请查看本机上的changgou项目.</p><h2 id="3-公共异常处理"><a href="#3-公共异常处理" class="headerlink" title="3. 公共异常处理"></a>3. 公共异常处理</h2><p>为了代码更容易维护，创建一个类集中处理异常 </p><p>在com.changgou.goods.handler包下创建公共异常处理类BaseExceptionHandler (也可在controller包下直接创建,看自己喜好)</p><p>注意: </p><ul><li><code>@ControllerAdvice</code>表明这是一个增强的<code>@Controller</code>, 是对整个controller进行操作的一个类</li><li><code>@ExceptionHandler(value = Exception.class)</code>表明这个方法是用来处理为<code>Exception</code>的异常</li><li><code>@ResponseBody</code>则是把结果<code>new Result(false, StatusCode.ERROR, &quot;执行出错&quot;)</code>返回给前端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">error</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>        e.printStackTrace();        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.ERROR, <span class="hljs-string">&quot;执行出错&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part-02-分布式文件存储"><a href="#Part-02-分布式文件存储" class="headerlink" title="Part-02 分布式文件存储"></a>Part-02 分布式文件存储</h1><h2 id="1-跨域解决方案CORS"><a href="#1-跨域解决方案CORS" class="headerlink" title="1. 跨域解决方案CORS"></a>1. 跨域解决方案CORS</h2><p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port） </p><p>跨域调用，会出现如下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">No</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-keyword">header</span> <span class="hljs-keyword">is</span> present <span class="hljs-keyword">on</span> the requested resource. <br>Origin <span class="hljs-string">&#x27;http://localhost:9100&#x27;</span> <span class="hljs-keyword">is</span> therefore <span class="hljs-keyword">not</span> allowed <span class="hljs-keyword">access</span>. The response had HTTP status code <span class="hljs-number">400.</span><br></code></pre></td></tr></table></figure><h2 id="2-通用mapper自定义方法"><a href="#2-通用mapper自定义方法" class="headerlink" title="2. 通用mapper自定义方法"></a>2. 通用<strong>mapper</strong>自定义方法</h2><h3 id="2-1-根据商品分类名称查询品牌列表"><a href="#2-1-根据商品分类名称查询品牌列表" class="headerlink" title="2.1 根据商品分类名称查询品牌列表"></a>2.1 根据商品分类名称查询品牌列表</h3><h4 id="2-1-1-表结构分析"><a href="#2-1-1-表结构分析" class="headerlink" title="2.1.1 表结构分析"></a>2.1.1 表结构分析</h4><p>已知分类与品牌之间的关系属于多对多关系, 通过中间表建立关系</p><p><img src="/images/image-20210727132544864.png" alt="image-20210727132544864"></p><p>​    <img src="/images/image-20210727132633929.png" alt="image-20210727132633929"></p><p><img src="/images/image-20210727132720929.png" alt="image-20210727132720929"></p><p><img src="/images/image-20210727132809184.png" alt="image-20210727132809184"></p><h4 id="2-1-2-代码实现"><a href="#2-1-2-代码实现" class="headerlink" title="2.1.2 代码实现"></a>2.1.2 代码实现</h4><p>由于这是一个复杂查询, Mapper<T>接口中的方法无法直接实现, 所以需要自己定义</p><ol><li><p>修改dao包中的BrandMapper，BrandMapper中新增方法定义 </p><p>注意: </p><ul><li>由于name不能直接写在sql语句里面, 所以需要用变量<code>#&#123;name&#125;</code>代替, 这个参数通过<code>@Param(&quot;name&quot;) String categoryName</code>传过来.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;SELECT NAME, image FROM tb_brand WHERE id IN (SELECT brand_id FROM tb_category_brand WHERE category_id IN (SELECT id FROM tb_category WHERE NAME=#&#123;name&#125; ORDER BY seq));&quot;)</span><br>   <span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">findBrandListByCategoryName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String categoryName)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>service层, controller层的流程不变</p></li></ol><h2 id="3-分布式文件存储-FastDFS"><a href="#3-分布式文件存储-FastDFS" class="headerlink" title="3. 分布式文件存储-FastDFS"></a>3. 分布式文件存储-FastDFS</h2><h3 id="3-1-FastDFS简介"><a href="#3-1-FastDFS简介" class="headerlink" title="3.1 FastDFS简介"></a>3.1 FastDFS简介</h3><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS 架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文件上传、下载，通过Tracker server 调度最终由 Storage server 完成文件上传和下载。</p><p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Stora-geserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。 可以将storage称为存储服务器。 </p><img src="/images/image-20210727134921556.png" alt="image-20210727134921556" style="zoom: 67%;" /><h3 id="3-2-上传流程"><a href="#3-2-上传流程" class="headerlink" title="3.2 上传流程"></a>3.2 上传流程</h3><img src="/images/image-20210727135143849.png" alt="image-20210727135143849" style="zoom:67%;" /><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。 </p><p><img src="/images/image-20210727135358878.png" alt="image-20210727135358878"></p><p><strong>组名</strong>：文件上传后所在的 storage 组名称，在文件上传成功后有storage 服务器返回，需要客户端自行保存。</p><p><strong>虚拟磁盘路径</strong>：storage 配置的虚拟路径，与磁盘选项store_path对应。如果配置了store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p><p><strong>数据两级目录</strong>：storage 服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</p><p><strong>文件名</strong>：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p><h3 id="3-3-文件存储微服务搭建"><a href="#3-3-文件存储微服务搭建" class="headerlink" title="3.3 文件存储微服务搭建"></a>3.3 文件存储微服务搭建</h3><ol><li><p>在二级父工程changgou_service下创建文件管理微服务changgou_service_file，该工程主要用于实现文件上传以及文件删除等功能。修改pom.xml，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastdfs-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.27.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在resources文件夹下创建fasfDFS的配置文件<code>fdfs_client.conf</code>, 这个名字要和代码中的对应  (<em>这里的配置端口还不太懂, 没搞清楚这俩端口的区别</em>)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">connect_timeout</span> = <span class="hljs-number">60</span><br><span class="hljs-attr">network_timeout</span> = <span class="hljs-number">60</span><br><span class="hljs-attr">charset</span> = UTF-<span class="hljs-number">8</span><br><span class="hljs-attr">http.tracker_http_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">tracker_server</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">200.128</span>:<span class="hljs-number">22122</span><br></code></pre></td></tr></table></figure></li><li><p>在resources文件夹下创建application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span>  <span class="hljs-comment">#限制单个上传的文件最大为10MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">10MB</span> <span class="hljs-comment">#限制的总上传数据最大为10MB</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9008</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.file包，创建启动类FileApplication </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(FileApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-4-文件上传"><a href="#3-4-文件上传" class="headerlink" title="3.4 文件上传"></a>3.4 文件上传</h3><p>这里的步骤是固定的, 以后需要用到的话直接把这里的工具类给复制过去</p><ol><li><p>文件信息封装</p><p>文件上传一般都有文件的名字、文件的内容、文件的扩展名、文件的md5值、文件的作者等相关属性，我们可以创建一个对象封装这些属性，代码如下:</p><p>创建com.changgou.file.pojo.FastDFSFile </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastDFSFile</span> </span>&#123;<br>    <span class="hljs-comment">//文件名字</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//文件内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] content;<br>    <span class="hljs-comment">//文件扩展名</span><br>    <span class="hljs-keyword">private</span> String ext;<br>    <span class="hljs-comment">//文件MD5摘要值</span><br>    <span class="hljs-keyword">private</span> String md5;<br>    <span class="hljs-comment">//文件创建作者</span><br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FastDFSFile</span><span class="hljs-params">(String name, <span class="hljs-keyword">byte</span>[] content, String ext, String height,</span></span><br><span class="hljs-params"><span class="hljs-function">                       String width, String author)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.content = content;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FastDFSFile</span><span class="hljs-params">(String name, <span class="hljs-keyword">byte</span>[] content, String ext)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.content = content;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getContent() &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getExt</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExt</span><span class="hljs-params">(String ext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMd5</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> md5;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMd5</span><span class="hljs-params">(String md5)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.md5 = md5;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文件操作</p><p>创建FastDFSClient类,放在com.changgou.file.util下在该类中实现FastDFS信息获取以及文件的相关操作，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changgou.file.util;<br><br><span class="hljs-keyword">import</span> org.csource.common.NameValuePair;<br><span class="hljs-keyword">import</span> org.csource.fastdfs.*;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastDFSClient</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> org.slf4j.Logger logger = LoggerFactory.getLogger(FastDFSClient.class);<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 初始化加载FastDFS的TrackerServer配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String filePath = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;fdfs_client.conf&quot;</span>).getFile().getAbsolutePath();<br>            ClientGlobal.init(filePath);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;FastDFS Client Init Fail!&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 1.文件的组名  2.文件的路径信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] upload(FastDFSFile file) &#123;<br>        <span class="hljs-comment">//获取文件的作者</span><br>        NameValuePair[] meta_list = <span class="hljs-keyword">new</span> NameValuePair[<span class="hljs-number">1</span>];<br>        meta_list[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> NameValuePair(<span class="hljs-string">&quot;author&quot;</span>, file.getAuthor());<br><br>        <span class="hljs-comment">//接收返回数据</span><br>        String[] uploadResults = <span class="hljs-keyword">null</span>;<br>        StorageClient storageClient=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建StorageClient客户端对象</span><br>            storageClient = getTrackerClient();<br><br>            <span class="hljs-comment">/***</span><br><span class="hljs-comment">             * 文件上传</span><br><span class="hljs-comment">             * 1)文件字节数组</span><br><span class="hljs-comment">             * 2)文件扩展名</span><br><span class="hljs-comment">             * 3)文件作者</span><br><span class="hljs-comment">             */</span><br>            uploadResults = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception when uploadind the file:&quot;</span> + file.getName(), e);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (uploadResults == <span class="hljs-keyword">null</span> &amp;&amp; storageClient!=<span class="hljs-keyword">null</span>) &#123;<br>            logger.error(<span class="hljs-string">&quot;upload file fail, error code:&quot;</span> + storageClient.getErrorCode());<br>        &#125;<br>        <span class="hljs-comment">//获取组名</span><br>        String groupName = uploadResults[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//获取文件存储路径</span><br>        String remoteFileName = uploadResults[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> uploadResults;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取文件信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName:组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName：文件存储完整名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileInfo <span class="hljs-title">getFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            StorageClient storageClient = getTrackerClient();<br>            <span class="hljs-keyword">return</span> storageClient.get_file_info(groupName, remoteFileName);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception: Get File from Fast DFS failed&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件下载</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title">downFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建StorageClient</span><br>            StorageClient storageClient = getTrackerClient();<br><br>            <span class="hljs-comment">//下载文件</span><br>            <span class="hljs-keyword">byte</span>[] fileByte = storageClient.download_file(groupName, remoteFileName);<br>            InputStream ins = <span class="hljs-keyword">new</span> ByteArrayInputStream(fileByte);<br>            <span class="hljs-keyword">return</span> ins;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception: Get File from Fast DFS failed&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//创建StorageClient</span><br>        StorageClient storageClient = getTrackerClient();<br><br>        <span class="hljs-comment">//删除文件</span><br>        <span class="hljs-keyword">int</span> i = storageClient.delete_file(groupName, remoteFileName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StorageServer[] getStoreStorages(String groupName)<br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建TrackerClient</span><br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        <span class="hljs-comment">//获取TrackerServer</span><br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-comment">//获取Storage组</span><br>        <span class="hljs-keyword">return</span> trackerClient.getStoreStorages(trackerServer, groupName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage信息,IP和端口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerInfo[] getFetchStorages(String groupName,<br>                                                String remoteFileName) <span class="hljs-keyword">throws</span> IOException &#123;<br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-keyword">return</span> trackerClient.getFetchStorages(trackerServer, groupName, remoteFileName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Tracker服务地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getTrackerUrl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;http://&quot;</span>+getTrackerServer().getInetSocketAddress().getHostString()+<span class="hljs-string">&quot;:&quot;</span>+ClientGlobal.getG_tracker_http_port()+<span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> StorageClient <span class="hljs-title">getTrackerClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        TrackerServer trackerServer = getTrackerServer();<br>        StorageClient storageClient = <span class="hljs-keyword">new</span> StorageClient(trackerServer, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span>  storageClient;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Tracker</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TrackerServer <span class="hljs-title">getTrackerServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-keyword">return</span>  trackerServer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文件上传 </p><p>创建一个FileController，在该控制器中实现文件上传操作，代码如下</p><p>注意:</p><ul><li>Post表示数据提交</li><li>controller方法里的参数一定是从前端传递过来的, 注意参数的名称要和前端取名对应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">uploadFile</span><span class="hljs-params">(MultipartFile file)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(file == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>            &#125;<br><br>            String originalFilename = file.getOriginalFilename();<br>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(originalFilename))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>            &#125;<br><br>            String extName = originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">byte</span>[] content = file.getBytes();<br><br>            FastDFSFile fastDFSFile = <span class="hljs-keyword">new</span> FastDFSFile(originalFilename, content, extName);<br><br>            String[] uploadResults = FastDFSClient.upload(fastDFSFile);<br><br>            String url = FastDFSClient.getTrackerUrl() + uploadResults[<span class="hljs-number">0</span>] + uploadResults[<span class="hljs-number">1</span>];<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;文件上传成功&quot;</span>, url);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.ERROR, <span class="hljs-string">&quot;文件上传失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Postman</strong>测试文件上传 </p><p>测试的时候记得文件名称也取成file, 不然请求参数传到controller那里由于参数和方法里的形参对不上会报错</p></li></ol><h1 id="Part-03-微服务网关鉴权JWT"><a href="#Part-03-微服务网关鉴权JWT" class="headerlink" title="Part-03 微服务网关鉴权JWT"></a>Part-03 微服务网关鉴权JWT</h1><h2 id="1-BCrypt密码加密"><a href="#1-BCrypt密码加密" class="headerlink" title="1. BCrypt密码加密"></a>1. BCrypt密码加密</h2><h3 id="1-1-Bcypt快速入门"><a href="#1-1-Bcypt快速入门" class="headerlink" title="1.1 Bcypt快速入门"></a>1.1 Bcypt快速入门</h3><p>在用户模块，对于用户密码的保护，通常都会进行加密。我们通常对密码进行加密，然后存放在数据库中，在用户进行登录的时候，将其输入的密码进行加密然后与数据库中存放的密文进行比较，以验证用户密码是否正确。目前，MD5和BCrypt比较流行。相对来说, BCrypt比MD5更安全。因为其内部引入的加盐机制. (加盐实际上是随机生成一个29位字符的字符串) </p><p>官网: <a href="http://www.mindrot.org/projects/jBCrypt/">http://www.mindrot.org/projects/jBCrypt/</a></p><p>测试用例</p><p>注意: </p><ul><li>每次程序执行时生成盐值的密文是会变的</li><li>BCrypt不支持反运算(即通过密文得到明文), 只支持密码校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCrypt; <span class="hljs-comment">//注意这里的包别导错了</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBCrypt</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.生成盐</span><br>        String gensalt = BCrypt.gensalt();<br>        System.out.println(<span class="hljs-string">&quot;salt:&quot;</span> + gensalt);<br><br>        <span class="hljs-comment">// 2.生成密码</span><br>        String saltPassword = BCrypt.hashpw(<span class="hljs-string">&quot;123456&quot;</span>, gensalt);<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + saltPassword);<br>        <br>        <span class="hljs-comment">// 3.对密码进行校验</span><br>        <span class="hljs-keyword">boolean</span> checkpw = BCrypt.checkpw(<span class="hljs-string">&quot;123456&quot;</span>, saltPassword);<br>        System.out.println(checkpw);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-商城新增管理员密码加密"><a href="#1-2-商城新增管理员密码加密" class="headerlink" title="1.2 商城新增管理员密码加密"></a>1.2 商城新增管理员密码加密</h3><p>代码实现</p><p>注意:</p><ul><li>大致的框架都已经完成了,这里只是实现让密码加密这一部分过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 增加</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Admin admin)</span></span>&#123;<br>      <span class="hljs-comment">//获取盐</span><br>      String gensalt = BCrypt.gensalt();<br>      <span class="hljs-comment">//对用户的密码进行加密</span><br>      String hashpw = BCrypt.hashpw(admin.getPassword(), gensalt);<br>      admin.setPassword(hashpw);<br>      adminMapper.insert(admin);<br>  &#125;<br></code></pre></td></tr></table></figure><p>cotroller层代码讲解</p><p>注意：</p><ul><li><code>@RequestBody</code>: 对前端传过来的json串自动赋值给这里的admin新参对象</li><li>数据库表的登录字段名称是<code>login_name</code>, 但是Admin类里是<code>loginName</code>, 不知道为啥这样也可以对应</li><li>启动服务的时候先启动注册中心的，在启动相应的微服务的类，不然会报错 <code>com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       adminService.add(admin);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-管理员登录密码验证"><a href="#1-3-管理员登录密码验证" class="headerlink" title="1.3 管理员登录密码验证"></a>1.3 管理员登录密码验证</h3><p>需求分析:</p><p>用户发送请求，输入用户名和密码。后台管理微服务controller接收参数，验证用户名和密码是否正确，如果正确则返回用户登录成功结果, 如果错误则返回登陆失败信息。 </p><p>代码实现</p><ol><li><p>AdminService新增方法定义 login()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户登录</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Admin admin)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>AdminServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Admin admin)</span> </span>&#123;<br>       <span class="hljs-comment">// 根据登录名查询管理员</span><br>       Admin admin1 = <span class="hljs-keyword">new</span> Admin();<br>       admin1.setLoginName(admin.getLoginName());<br>       admin1.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>       Admin admin2 = adminMapper.selectOne(admin1);<br>       <br>       <span class="hljs-comment">//比对数据库查询出的对象是否存在，存在则返回真，不存在则返回假</span><br>       <span class="hljs-keyword">if</span>(admin2 == <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> BCrypt.checkpw(admin.getPassword(), admin2.getPassword());<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>AdminController新增方法</p><p>注意：</p><ul><li><code>@RequestBody</code>不能少，不然前端传过来的json串无法赋值给admin对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <span class="hljs-comment">//post 表示会传递json串过来</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       <span class="hljs-keyword">boolean</span> login = adminService.login(admin);<br>       <span class="hljs-keyword">if</span> (login)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.LOGINERROR, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-JWT-实现微服务鉴权"><a href="#2-JWT-实现微服务鉴权" class="headerlink" title="2. JWT 实现微服务鉴权"></a>2. <strong>JWT</strong> 实现微服务鉴权</h2><h3 id="2-1-什么是微服务鉴权"><a href="#2-1-什么是微服务鉴权" class="headerlink" title="2.1 什么是微服务鉴权"></a>2.1 什么是微服务鉴权</h3><img src="/images/image-20210727205423816.png" alt="image-20210727205423816"  /><p>我们可以采用JWT的方式来实现鉴权校验。</p><h3 id="2-2-JWT"><a href="#2-2-JWT" class="headerlink" title="2.2 JWT"></a>2.2 <strong>JWT</strong></h3><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><ul><li><p><strong>头部</strong>（<strong>Header</strong>） </p><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;typ&quot;</span>:<span class="hljs-string">&quot;JWT&quot;</span>,<span class="hljs-attr">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码，编码后的字符串如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span><br></code></pre></td></tr></table></figure></li><li><p><strong>载荷</strong>（<strong>payload</strong>）</p><p>载荷就是存放有效信息的地方。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;sub&quot;</span>:<span class="hljs-string">&quot;1234567890&quot;</span>,<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doe&quot;</span>,<span class="hljs-attr">&quot;admin&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p>然后将其进行base64编码，得到Jwt的第二部分</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJzdWIiOiIxMj<span class="hljs-name">M0</span><span class="hljs-symbol">NTY3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>Ikpva<span class="hljs-name">G4</span>gR<span class="hljs-name">G9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iO<span class="hljs-symbol">nRydWV9</span><br></code></pre></td></tr></table></figure></li><li><p><strong>签证</strong>（<strong>signature</strong>）</p><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">header</span></span> (base<span class="hljs-number">64</span>后的)<br><span class="hljs-attribute">payload</span> (base<span class="hljs-number">64</span>后的)<br><span class="hljs-attribute">secret</span> <br></code></pre></td></tr></table></figure><p>然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分（第三部分就包括了一二部分）</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">TJVA<span class="hljs-number">95</span><span class="hljs-keyword">Or</span><span class="hljs-name">M7</span>E<span class="hljs-number">2</span>cBab<span class="hljs-number">30</span>RMHrHDcEfxjoYZgeFO<span class="hljs-symbol">NFh7</span>HgQ<br></code></pre></td></tr></table></figure></li></ul><p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt: </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span>.eyJzdWIiOiIxMjM<span class="hljs-number">0</span>NTY<span class="hljs-number">3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>IkpvaG<span class="hljs-number">4</span>gRG<span class="hljs-number">9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iOnRydWV<span class="hljs-number">9</span>.TJVA<span class="hljs-number">95</span>OrM<span class="hljs-number">7</span>E<span class="hljs-number">2</span>cBab<span class="hljs-number">30</span>RMHrHDcEfxjoYZgeFONFh<span class="hljs-number">7</span>HQ<br></code></pre></td></tr></table></figure><h3 id="2-3-JJWT签发与验证token"><a href="#2-3-JJWT签发与验证token" class="headerlink" title="2.3 JJWT签发与验证token"></a>2.3 <strong>JJWT</strong>签发与验证<strong>token</strong></h3><p>JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License，版本2.0)，JJWT很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。 </p><p>官方文档： <a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a> </p><h4 id="2-3-1-创建token"><a href="#2-3-1-创建token" class="headerlink" title="2.3.1 创建token"></a>2.3.1 创建<strong>token</strong></h4><ol><li><p>新建项目jwtTest中的pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建测试类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        JwtBuilder builder = Jwts.builder()<br>                                .setId(<span class="hljs-string">&quot;888&quot;</span>)<br>                                .setSubject(<span class="hljs-string">&quot;小白&quot;</span>)<br>                                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                                .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itcast&quot;</span>);<br><br>        System.out.println(builder.compact());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行打印结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJhbGciOiJIUzI1NiJ9</span>.eyJqdGkiOiI<span class="hljs-number">4</span>ODgiLCJzdWIiOiLlsI_nmb<span class="hljs-number">0</span>iLCJpYXQiOjE<span class="hljs-number">2</span>MjczOTI<span class="hljs-number">3</span>MzR<span class="hljs-number">9</span>.Je<span class="hljs-number">1</span>REFE<span class="hljs-number">0</span>D<span class="hljs-number">0</span>w<span class="hljs-number">9</span>eV<span class="hljs-number">3</span>rUl<span class="hljs-number">6</span>sqQN<span class="hljs-number">4</span>m<span class="hljs-number">3</span>Z-LSShbyn<span class="hljs-number">8</span>JGleEgw<br></code></pre></td></tr></table></figure><p>由于载荷中包含时间，每次生成的jwt是不一样的。</p></li></ol><h4 id="2-3-2-解析token"><a href="#2-3-2-解析token" class="headerlink" title="2.3.2 解析token"></a>2.3.2 解析<strong>token</strong></h4><p>我们刚才已经创建了token ，在web应用中这个操作是由服务端进行然后发给客户端，客户端在下次向服务端发送请求时需要携带这个token，那服务端接到这个token 应该解析出token中的信息（例如用户id）,根据这些信息查询数据库返回相应的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        JwtBuilder builder = Jwts.builder()<br>                                .setId(<span class="hljs-string">&quot;888&quot;</span>)<br>                                .setSubject(<span class="hljs-string">&quot;小白&quot;</span>)<br>                                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                                .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itcast&quot;</span>);<br><br>        String compactJwt = builder.compact();<br>        System.out.println(compactJwt);<br><br>        Claims claims = Jwts.parser().setSigningKey(<span class="hljs-string">&quot;itcast&quot;</span>).parseClaimsJws(compactJwt).getBody();<br>        System.out.println(claims);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.eyJqdGkiOiI<span class="hljs-number">4</span>ODgiLCJzdWIiOiLlsI_<span class="hljs-symbol">nmb0</span>iLCJpYXQiOjE<span class="hljs-number">2</span>MjczOT<span class="hljs-name">M2</span><span class="hljs-symbol">NDN9</span><span class="hljs-number">.2</span>QzU<span class="hljs-number">2</span>Z-MSSGpspIe<span class="hljs-number">9</span>za<span class="hljs-number">7</span>SmkLJT<span class="hljs-number">2</span>tqHv<span class="hljs-number">9</span>mOBQ<span class="hljs-symbol">N1</span>JWqBU<br>&#123;jti=<span class="hljs-number">888</span>, <span class="hljs-keyword">sub</span>=小白, iat=<span class="hljs-number">1627393643</span>&#125;<br></code></pre></td></tr></table></figure><p>试着将token或签名秘钥(代码里面的<code>&quot;itcast&quot;</code>字符串)篡改一下，会发现运行时就会报错，所以解析token也就是验证token.</p><p>还可以设置token的过期时间，自定义claims(载荷里的键值对)等。具体用法可以上网查也可以看本地笔记。</p><h3 id="2-4-畅购微服务鉴权代码实现"><a href="#2-4-畅购微服务鉴权代码实现" class="headerlink" title="2.4 畅购微服务鉴权代码实现"></a>2.4 畅购微服务鉴权代码实现</h3><h4 id="2-4-1-思路分析"><a href="#2-4-1-思路分析" class="headerlink" title="2.4.1 思路分析"></a>2.4.1 思路分析</h4><img src="/images/image-20210727225002149.png" alt="image-20210727225002149" style="zoom:80%;" /><ol><li>用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录</li><li>用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户 </li><li>用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN </li><li>网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误</li></ol><h4 id="2-4-2-系统微服务签发token"><a href="#2-4-2-系统微服务签发token" class="headerlink" title="2.4.2 系统微服务签发token"></a>2.4.2 系统微服务签发<strong>token</strong></h4><ol><li><p>在changgou_service_system添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在changgou_service_system的util包中创建类： JwtUtil (这个工具类会用就行，需要深入学习的时候再学)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//有效期为</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long JWT_TTL = <span class="hljs-number">3600000L</span>;<span class="hljs-comment">// 60 * 60 *1000  一个小时</span><br>    <span class="hljs-comment">//设置秘钥明文</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JWT_KEY = <span class="hljs-string">&quot;itcast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createJWT</span><span class="hljs-params">(String id, String subject, Long ttlMillis)</span> </span>&#123;<br><br>        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;<br>        <span class="hljs-keyword">long</span> nowMillis = System.currentTimeMillis();<br>        Date now = <span class="hljs-keyword">new</span> Date(nowMillis);<br>        <span class="hljs-keyword">if</span>(ttlMillis==<span class="hljs-keyword">null</span>)&#123;<br>            ttlMillis=JwtUtil.JWT_TTL;<br>        &#125;<br>        <span class="hljs-keyword">long</span> expMillis = nowMillis + ttlMillis;<br>        Date expDate = <span class="hljs-keyword">new</span> Date(expMillis);<br>        SecretKey secretKey = generalKey();<br><br>        JwtBuilder builder = Jwts.builder()<br>                .setId(id)              <span class="hljs-comment">//唯一的ID</span><br>                .setSubject(subject)   <span class="hljs-comment">// 主题  可以是JSON数据</span><br>                .setIssuer(<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">// 签发者</span><br>                .setIssuedAt(now)      <span class="hljs-comment">// 签发时间</span><br>                .signWith(signatureAlgorithm, secretKey) <span class="hljs-comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span><br>                .setExpiration(expDate);<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成加密后的秘钥 secretKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecretKey <span class="hljs-title">generalKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);<br>        SecretKey key = <span class="hljs-keyword">new</span> SecretKeySpec(encodedKey, <span class="hljs-number">0</span>, encodedKey.length, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改AdminController的login方法, 用户登录成功 则签发TOKEN</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <span class="hljs-comment">//post 表示会传递json串过来</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       <span class="hljs-keyword">boolean</span> login = adminService.login(admin);<br>       <span class="hljs-keyword">if</span> (login)&#123;  <span class="hljs-comment">//如果验证成功</span><br>           Map&lt;String, String&gt; info = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>           info.put(<span class="hljs-string">&quot;username&quot;</span>, admin.getLoginName());<br>           String token = JwtUtil.createJWT(UUID.randomUUID().toString(), admin.getLoginName(), <span class="hljs-keyword">null</span>);<br>           info.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;登录成功&quot;</span>, info);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.LOGINERROR, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><p>使用postman测试</p><h4 id="2-4-3-网关过滤器验证token"><a href="#2-4-3-网关过滤器验证token" class="headerlink" title="2.4.3 网关过滤器验证token"></a>2.4.3 网关过滤器验证<strong>token</strong></h4><ol><li><p>在changgou_gateway_system网关系统添加依赖 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>util包下创建JWTUtil类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//有效期为</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long JWT_TTL = <span class="hljs-number">3600000L</span>;<span class="hljs-comment">// 60 * 60 *1000  一个小时</span><br>    <span class="hljs-comment">//设置秘钥明文</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JWT_KEY = <span class="hljs-string">&quot;itcast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createJWT</span><span class="hljs-params">(String id, String subject, Long ttlMillis)</span> </span>&#123;<br><br>        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;<br>        <span class="hljs-keyword">long</span> nowMillis = System.currentTimeMillis();<br>        Date now = <span class="hljs-keyword">new</span> Date(nowMillis);<br>        <span class="hljs-keyword">if</span>(ttlMillis==<span class="hljs-keyword">null</span>)&#123;<br>            ttlMillis=JwtUtil.JWT_TTL;<br>        &#125;<br>        <span class="hljs-keyword">long</span> expMillis = nowMillis + ttlMillis;<br>        Date expDate = <span class="hljs-keyword">new</span> Date(expMillis);<br>        SecretKey secretKey = generalKey();<br><br>        JwtBuilder builder = Jwts.builder()<br>                .setId(id)              <span class="hljs-comment">//唯一的ID</span><br>                .setSubject(subject)   <span class="hljs-comment">// 主题  可以是JSON数据</span><br>                .setIssuer(<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">// 签发者</span><br>                .setIssuedAt(now)      <span class="hljs-comment">// 签发时间</span><br>                .signWith(signatureAlgorithm, secretKey) <span class="hljs-comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span><br>                .setExpiration(expDate);<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成加密后的秘钥 secretKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecretKey <span class="hljs-title">generalKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);<br>        SecretKey key = <span class="hljs-keyword">new</span> SecretKeySpec(encodedKey, <span class="hljs-number">0</span>, encodedKey.length, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建过滤器，用于token验证</p><p>注意：记得把过滤类放入spring容器中，不要忘了<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        <span class="hljs-comment">//1.获取请求</span><br>        ServerHttpRequest request = exchange.getRequest();<br>        <span class="hljs-comment">//2.获取响应</span><br>        ServerHttpResponse response = exchange.getResponse();<br>        <span class="hljs-comment">//3.如果是登录请求则放行</span><br>        <span class="hljs-keyword">if</span>(request.getURI().getPath().contains(<span class="hljs-string">&quot;/admin/login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//4.获取请求头</span><br>        HttpHeaders headers = request.getHeaders();<br>        <span class="hljs-comment">//5.获取请求头中的令牌。自己写路径的时候记得按照key=Authorization, value=token的形式来，不要瞎起名字</span><br>        String token = headers.getFirst(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        <span class="hljs-comment">//6.判断请求头中是否有令牌</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(token))&#123;<br>            <span class="hljs-comment">//7. 响应中放入返回的状态吗, 没有权限访问</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//8.返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br>        <span class="hljs-comment">//9.如果请求头中有令牌则解析令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtil.parseJWT(token);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//10. 解析jwt令牌出错, 说明令牌过期或者伪造等不合法情况出现</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//11.返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//12.放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>最后再postman中进行测试</p><h1 id="Part-04-商品管理"><a href="#Part-04-商品管理" class="headerlink" title="Part-04 商品管理"></a>Part-04 商品管理</h1><h2 id="1-分布式ID生成解决方案"><a href="#1-分布式ID生成解决方案" class="headerlink" title="1. 分布式ID生成解决方案"></a>1. 分布式<strong>ID</strong>生成解决方案</h2><p>数据太多导致数据库单表性能下降，需要对数据库进行分库分表、数据库多实例部署等，如果此时这张表还按照主键自增，因为已经不在一个机器上了，这种方式会使主键重复。为了避免ID重复，因此需要分布式ID</p><h3 id="1-1-分布式ID生成解决方案"><a href="#1-1-分布式ID生成解决方案" class="headerlink" title="1.1 分布式ID生成解决方案"></a>1.1 分布式<strong>ID</strong>生成解决方案</h3><p>UUID, Redis, 开源算法<strong>snowflake</strong> 都可以实现分布式ID。这里主要讲下开源算法<strong>snowflake</strong> ，其他的如果用到去网上搜博客深入学习。</p><h4 id="1-1-1-开源算法snowflake"><a href="#1-1-1-开源算法snowflake" class="headerlink" title="1.1.1 开源算法snowflake"></a>1.1.1 开源算法<strong>snowflake</strong></h4><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型（8字节，64位）的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0</p><img src="/images/image-20210728121416974.png" alt="image-20210728121416974" style="zoom:80%;" /><p>快速入门</p><ol><li><p>新建工程，将资料/工具类下的IdWorker.java拷贝到工程中 （这个工具类会用就行了，需要深入学习时再细看）</p></li><li><p>编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">snowFlakeTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        IdWorker idWorker = <span class="hljs-keyword">new</span> IdWorker(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>            <span class="hljs-keyword">long</span> id = idWorker.nextId();<br>            System.out.println(id);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="1-1-2-配置分布式ID生成器"><a href="#1-1-2-配置分布式ID生成器" class="headerlink" title="1.1.2 配置分布式ID生成器"></a>1.1.2 配置分布式<strong>ID</strong>生成器</h4><ol><li><p>IdWorker.java拷贝到changgou_common工程com.changgou.util包中 （放到common包是因为微服务都要用到他。如果把这个类部署到微服务会很麻烦，要一个一个部署）</p></li><li><p>changgou_service_goods的application.yml添加配置 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">workerId:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">datacenterId:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>修改GoodsApplication, 增加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;workerId&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer workerId;<br>   <br>   <span class="hljs-meta">@Value(&quot;$&#123;datacenterId&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer  datacenterId;<br>   <br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> IdWorker <span class="hljs-title">idWorker</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> IdWorker(workerId,datacenterId);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-新增和修改商品"><a href="#2-新增和修改商品" class="headerlink" title="2. 新增和修改商品"></a>2. 新增和修改商品</h2><h3 id="2-1-概念与表结构分析"><a href="#2-1-概念与表结构分析" class="headerlink" title="2.1 概念与表结构分析"></a><strong>2.1</strong> 概念与表结构分析</h3><h4 id="2-1-1-SPU与SKU概念"><a href="#2-1-1-SPU与SKU概念" class="headerlink" title="2.1.1 SPU与SKU概念"></a><strong>2.1.1 SPU</strong>与<strong>SKU</strong>概念</h4><p><strong>SPU = Standard Product Unit （标准产品单位）</strong> </p><ul><li><p>概念 : SPU 是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。 </p></li><li><p>通俗点讲，属性值、特性相同的货品就可以称为一个 SPU</p><p>例如：华为<strong>P30</strong> 就是一个 <strong>SPU</strong> </p></li></ul><p><strong>SKU=stock keeping unit ( 库存量单位)</strong></p><ul><li><p>SKU 即库存进出计量的单位， 可以是以件、盒、托盘等为单位。</p></li><li><p>SKU 是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。</p><p>例如：华为<strong>P30</strong> 红色 <strong>64G</strong> 就是一个 <strong>SKU</strong></p></li></ul><h4 id="2-1-2-表结构分析"><a href="#2-1-2-表结构分析" class="headerlink" title="2.1.2 表结构分析"></a><strong>2.1.2</strong> 表结构分析</h4><p>tb_spu 表 （SPU表）</p><img src="/images/image-20210728142103218.png" alt="image-20210728142103218"  /><p>tb_sku 表（SKU商品表）</p><p><img src="/images/image-20210728142351938.png" alt="image-20210728142351938"></p><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a><strong>2.2</strong> 代码实现</h3><h4 id="2-2-1-SPU与SKU列表的保存"><a href="#2-2-1-SPU与SKU列表的保存" class="headerlink" title="2.2.1 SPU与SKU列表的保存"></a>2.2.1 <strong>SPU</strong>与<strong>SKU</strong>列表的保存</h4><ol><li><p>changgou_service_goods_api工程的pojo包中创建组合实体类Goods </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Spu spu;<br>    <span class="hljs-keyword">private</span> List&lt;Sku&gt; skuList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Spu <span class="hljs-title">getSpu</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> spu;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSpu</span><span class="hljs-params">(Spu spu)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.spu = spu;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">getSkuList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> skuList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSkuList</span><span class="hljs-params">(List&lt;Sku&gt; skuList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.skuList = skuList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuService新增方法add(Goods goods) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Goods goods)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> CategoryMapper categoryMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> SkuMapper skuMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> BrandMapper brandMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> IdWorker idWorker;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 增加</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Transactional</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Goods goods)</span></span>&#123;<br>   <br>       Spu spu = goods.getSpu();<br>       <span class="hljs-keyword">long</span> spuId = idWorker.nextId();<br>       spu.setId(String.valueOf(spuId));<br>       spu.setIsDelete(<span class="hljs-string">&quot;0&quot;</span>);<br>       spu.setIsMarketable(<span class="hljs-string">&quot;0&quot;</span>);<br>       spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<br>       spuMapper.insertSelective(spu);<br>   <br>       saveSkuList(goods);<br>   &#125;<br>   <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存sku列表。</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 这里单独加一个方法是因为这个操作步骤较多</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSkuList</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//获取spu对象</span><br>       Spu spu = goods.getSpu();<br>       <span class="hljs-comment">//获取当前日期</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>       <span class="hljs-comment">//获取品牌对象</span><br>       Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());<br>       <span class="hljs-comment">//获取分类对象</span><br>       Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());<br>       <span class="hljs-comment">//获取sku集合对象</span><br>       List&lt;Sku&gt; skuList = goods.getSkuList();<br>   <br>       <span class="hljs-keyword">if</span>(skuList != <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-comment">//小技巧： 直接打 iter 可以快速出来下面的遍历代码</span><br>           <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>               <span class="hljs-comment">//设置sku主键ID</span><br>               sku.setId(String.valueOf(idWorker.nextId()));<br>               <span class="hljs-comment">//设置sku规格</span><br>               <span class="hljs-keyword">if</span>(sku.getSpec() == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(sku.getSpec()))&#123;<br>                   sku.setSpec(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>               &#125;<br>               <span class="hljs-comment">//设置sku名称(商品名称 + 规格)</span><br>               String name = spu.getName();<br>               <span class="hljs-comment">//将规格json字符串转换成Map</span><br>               Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);<br>               <span class="hljs-keyword">if</span> (specMap != <span class="hljs-keyword">null</span> &amp;&amp; specMap.size() &gt;<span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-keyword">for</span> (String value : specMap.values()) &#123;<br>                       name += <span class="hljs-string">&quot; &quot;</span>+value;<br>                   &#125;<br>               &#125;<br>   <br>               sku.setName(name);<span class="hljs-comment">//名称</span><br>               sku.setSpuId(spu.getId());<span class="hljs-comment">//设置spu的ID</span><br>               sku.setCreateTime(date);<span class="hljs-comment">//创建日期</span><br>               sku.setUpdateTime(date);<span class="hljs-comment">//修改日期</span><br>               sku.setCategoryId(category.getId());<span class="hljs-comment">//商品分类ID</span><br>               sku.setCategoryName(category.getName());<span class="hljs-comment">//商品分类名称</span><br>               sku.setBrandName(brand.getName());<span class="hljs-comment">//品牌名称</span><br>               skuMapper.insertSelective(sku);<span class="hljs-comment">//插入sku表数据</span><br>           &#125;<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Goods goods)</span></span>&#123;<br>       spuService.add(goods);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-2-品牌与分类关联"><a href="#2-2-2-品牌与分类关联" class="headerlink" title="2.2.2 品牌与分类关联"></a>2.2.2 品牌与分类关联</h4><p>将分类ID与SPU的品牌ID 一起插入到tb_category_brand表中</p><ol><li><p>创建实体类</p><p>注意：</p><ul><li>这个表是联合主键，所以categoryId和brandId都有@Id注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(name=&quot;tb_category_brand&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryBrand</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer categoryId;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer brandId;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCategoryId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> categoryId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCategoryId</span><span class="hljs-params">(Integer categoryId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.categoryId = categoryId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBrandId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brandId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBrandId</span><span class="hljs-params">(Integer brandId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brandId = brandId;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建数据访问接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CategoryBrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">CategoryBrand</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CategoryBrandMapper categoryBrandMapper;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuServiceImpl的saveSkuList方法，添加分类与品牌之间的关联, 修改后代码如下:</p><p>注意：</p><ul><li>在原基础上添加的部分在两个<code>=</code>之间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存sku列表。</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSkuList</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//获取spu对象</span><br>       Spu spu = goods.getSpu();<br>       <span class="hljs-comment">//获取当前日期</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>       <span class="hljs-comment">//获取品牌对象</span><br>       Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());<br>       <span class="hljs-comment">//获取分类对象</span><br>       Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());<br>   <br>       <span class="hljs-comment">// =========================================</span><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 添加分类与品牌之间的关联</span><br><span class="hljs-comment">        */</span><br>       CategoryBrand categoryBrand = <span class="hljs-keyword">new</span> CategoryBrand();<br>       categoryBrand.setBrandId(spu.getBrandId());<br>       categoryBrand.setCategoryId(spu.getCategory3Id());<br>       <span class="hljs-keyword">int</span> count = categoryBrandMapper.selectCount(categoryBrand);<br>       <span class="hljs-comment">//判断是否有这个品牌和分类的关系数据</span><br>       <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<br>           <span class="hljs-comment">//如果没有关系数据则添加品牌和分类关系数据</span><br>           categoryBrandMapper.insert(categoryBrand);<br>       &#125;<br>       <span class="hljs-comment">// =========================================</span><br>       <br>       <span class="hljs-comment">//获取sku集合对象</span><br>       List&lt;Sku&gt; skuList = goods.getSkuList();<br>   <br>       <span class="hljs-keyword">if</span>(skuList != <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-comment">//小技巧： 直接打 iter 可以快速出来下面的遍历代码</span><br>           <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>               <span class="hljs-comment">//设置sku主键ID</span><br>               sku.setId(String.valueOf(idWorker.nextId()));<br>               <span class="hljs-comment">//设置sku规格</span><br>               <span class="hljs-keyword">if</span>(sku.getSpec() == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(sku.getSpec()))&#123;<br>                   sku.setSpec(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>               &#125;<br>               <span class="hljs-comment">//设置sku名称(商品名称 + 规格)</span><br>               String name = spu.getName();<br>               <span class="hljs-comment">//将规格json字符串转换成Map</span><br>               Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);<br>               <span class="hljs-keyword">if</span> (specMap != <span class="hljs-keyword">null</span> &amp;&amp; specMap.size() &gt;<span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-keyword">for</span> (String value : specMap.values()) &#123;<br>                       name += <span class="hljs-string">&quot; &quot;</span>+value;<br>                   &#125;<br>               &#125;<br>   <br>               sku.setName(name);<span class="hljs-comment">//名称</span><br>               sku.setSpuId(spu.getId());<span class="hljs-comment">//设置spu的ID</span><br>               sku.setCreateTime(date);<span class="hljs-comment">//创建日期</span><br>               sku.setUpdateTime(date);<span class="hljs-comment">//修改日期</span><br>               sku.setCategoryId(category.getId());<span class="hljs-comment">//商品分类ID</span><br>               sku.setCategoryName(category.getName());<span class="hljs-comment">//商品分类名称</span><br>               sku.setBrandName(brand.getName());<span class="hljs-comment">//品牌名称</span><br>               skuMapper.insertSelective(sku);<span class="hljs-comment">//插入sku表数据</span><br>           &#125;<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-3-根据ID查询商品"><a href="#2-2-3-根据ID查询商品" class="headerlink" title="2.2.3 根据ID查询商品"></a>2.2.3 根据ID查询商品</h4><p>需求：根据id 查询SPU和SKU列表 , 结果以goods对象返回</p><p>代码实现：</p><ol><li><p>changgou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据ID查询商品</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function">Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//查询SKU 列表</span><br>    Example example = <span class="hljs-keyword">new</span> Example(Sku.class);<br>    Example.Criteria criteria = example.createCriteria();<br>    criteria.andEqualTo(<span class="hljs-string">&quot;spuId&quot;</span>, id);<br>    List&lt;Sku&gt; skuList = skuMapper.selectByExample(example);<br>   <br>    <span class="hljs-comment">//封装，返回</span><br>    Goods goods = <span class="hljs-keyword">new</span> Goods();<br>    goods.setSpu(spu);<br>    goods.setSkuList(skuList);<br>    <span class="hljs-keyword">return</span> goods;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的findById方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    Goods goods = spuService.findGoodsById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,goods);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-4-保存修改"><a href="#2-2-4-保存修改" class="headerlink" title="2.2.4 保存修改"></a>2.2.4 保存修改</h4><ol><li><p>changgou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Goods goods)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//取出spu部分</span><br>       Spu spu = goods.getSpu();<br>       spuMapper.updateByPrimaryKey(spu);<br>   <br>       <span class="hljs-comment">//删除原sku列表</span><br>       Example example = <span class="hljs-keyword">new</span> Example(Sku.class);<br>       Example.Criteria criteria = example.createCriteria();<br>       criteria.andEqualTo(<span class="hljs-string">&quot;spuId&quot;</span>, spu.getId());<br>       skuMapper.deleteByExample(example);<br>   <br>       <span class="hljs-comment">//保存sku列表</span><br>       saveSkuList(goods);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的update方法</p><p>注意：</p><ul><li><code>&#123;id&#125;</code>是把请求路径中对应部分的字符串赋值给id, 并不是要在请求路径中拼接 <code>？id=string</code>这种写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 修改数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping(value=&quot;/&#123;id&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Goods goods,<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>       spuService.update(goods);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;修改成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-商品审核与上下架"><a href="#3-商品审核与上下架" class="headerlink" title="3. 商品审核与上下架"></a>3. 商品审核与上下架</h2><p>需求分析：</p><ul><li>商品新增后，审核状态为0（未审核），默认为下架状态(也为0)</li><li>审核商品，需要校验是否是被删除的商品，如果未删除则修改审核状态为1，并自动上架</li><li>下架商品，需要校验是否是被删除的商品，如果未删除则修改上架状态为0</li><li>上架商品，需要审核状态为1,如果为1,则更改上下架状态为1</li></ul><p>实现思路：</p><ul><li>按照ID查询SPU信息</li><li>判断修改审核、上架下架状态</li><li>保存Spu</li></ul><h3 id="3-1-代码实现"><a href="#3-1-代码实现" class="headerlink" title="3.1 代码实现"></a>3.1 代码实现</h3><h4 id="3-1-1-商品审核"><a href="#3-1-1-商品审核" class="headerlink" title="3.1.1 商品审核"></a>3.1.1 商品审核</h4><p>需要校验是否是被删除的商品，如果未删除则修改审核状态为1，并自动上架</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 审核</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">audit</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现方法</p><p>注意： </p><ul><li>开启<code>@Transactional</code>事务注解(对于要修改数据库的操作，都加上事务注解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">audit</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu对象</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span>(spu == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品不存在&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//判断当前spu是否处于删除状态</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(spu.getIsDelete()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品处于删除状态&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//不处于删除状态,修改审核状态为1,上下架状态为1</span><br>    spu.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>    spu.setIsMarketable(<span class="hljs-string">&quot;1&quot;</span>);<br>   <br>    <span class="hljs-comment">//执行修改操作</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/audit/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">audit</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.audit(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;商品审核成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-1-2-下架商品"><a href="#3-1-2-下架商品" class="headerlink" title="3.1.2 下架商品"></a>3.1.2 下架商品</h4><p>校验是否是被删除的商品，如果未删除则修改上架状态为0</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span> (spu == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品不存在&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//判断当前商品是否处于删除状态</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(spu.getIsDelete()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品处于删除状态&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//商品处于未删除状态的话,则修改上下架状态为已下架(0)</span><br>    spu.setIsMarketable(<span class="hljs-string">&quot;0&quot;</span>);<br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/pull/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.pull(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;商品下架成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-1-3-上架商品"><a href="#3-1-3-上架商品" class="headerlink" title="3.1.3 上架商品"></a>3.1.3 上架商品</h4><p>必须是通过审核的商品才能上架</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl 实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span>(!spu.getStatus().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;未通过审核的商品不能上架！&quot;</span>);<br>    &#125;<br>    spu.setIsMarketable(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//上架状态</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/put/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.put(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-删除与还原商品"><a href="#4-删除与还原商品" class="headerlink" title="4. 删除与还原商品"></a>4. 删除与还原商品</h2><p>需求分析：</p><ul><li>商品列表中的删除商品功能，并非真正的删除(物理删除)，而是采用逻辑删除将删除标记的字段设置为1.</li><li>在回收站中有还原商品的功能，将删除标记的字段设置为0</li><li>在回收站中有删除商品的功能，是真正的物理删除,将数据从数据库中删除掉。</li></ul><p>实现思路：</p><ul><li>商品列表中的删除商品,执行逻辑删除，修改spu表is_delete字段为1</li><li>商品回收站中的还原商品,修改spu表is_delete字段为0</li><li>商品回收站中的删除商品,执行delete操作,进行物理删除</li></ul><h3 id="4-1-代码实现"><a href="#4-1-代码实现" class="headerlink" title="4.1 代码实现"></a>4.1 代码实现</h3><h4 id="4-1-1-逻辑删除商品"><a href="#4-1-1-逻辑删除商品" class="headerlink" title="4.1.1 逻辑删除商品"></a>4.1.1 逻辑删除商品</h4><ol><li><p>修改SpuServiceImpl的delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String id)</span></span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否下架的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsMarketable().equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;必须先下架再删除！&quot;</span>);<br>    &#125;<br>    spu.setIsDelete(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//删除</span><br>    spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未审核</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-1-2-还原被删除的商品"><a href="#4-1-2-还原被删除的商品" class="headerlink" title="4.1.2 还原被删除的商品"></a>4.1.2 还原被删除的商品</h4><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">restore</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">restore</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否删除的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsDelete().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;此商品未删除！&quot;</span>);<br>    &#125;<br>    spu.setIsDelete(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未删除</span><br>    spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未审核</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/restore/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">restore</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.restore(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;还原成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-1-3-物理删除商品"><a href="#4-1-3-物理删除商品" class="headerlink" title="4.1.3 物理删除商品"></a>4.1.3 物理删除商品</h4><p>判断必须逻辑删除商品才能物理删除</p><ol><li><p>SpuService 新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 物理删除</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">realDelete</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl 实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">realDelete</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否删除的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsDelete().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;此商品未删除！&quot;</span>);<br>    &#125;<br>    spuMapper.deleteByPrimaryKey(id);<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 物理删除</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping(&quot;/realDelete/&#123;id&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">realDelete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>       spuService.realDelete(id);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;物理删除成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="Part-05-网站首页高可用nginx-lua"><a href="#Part-05-网站首页高可用nginx-lua" class="headerlink" title="Part-05 网站首页高可用nginx+lua"></a>Part-05 网站首页高可用nginx+lua</h1><h2 id="1-Lua"><a href="#1-Lua" class="headerlink" title="1. Lua"></a>1. Lua</h2><h3 id="1-1-Lua介绍"><a href="#1-1-Lua介绍" class="headerlink" title="1.1 Lua介绍"></a>1.1 Lua介绍</h3><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。（如果想要了解他的详细背景去搜对应资料）</p><p><strong>lua 语言具有以下特性</strong>：（还不是很能理解，慢慢理解）</p><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><p><strong>应用场景</strong></p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。</li></ul><h3 id="1-2-lua的安装"><a href="#1-2-lua的安装" class="headerlink" title="1.2 lua的安装"></a>1.2 lua的安装</h3><p>这里省略，有需要去搜具体博客或者本地笔记查看</p><h3 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3 快速入门"></a>1.3 快速入门</h3><p>开启和关闭(ctrl + c)lua命令行交互</p><p><img src="/images/image-20210729135124466.png" alt="image-20210729135124466"></p><p>创建hello.lua文件，执行语句：</p><p><img src="/images/image-20210729134904915.png" alt="image-20210729134904915"></p><h3 id="1-4-LUA的基本语法"><a href="#1-4-LUA的基本语法" class="headerlink" title="1.4 LUA的基本语法"></a>1.4 LUA的基本语法</h3><ul><li>lua有交互式编程和脚本式编程。一般采用脚本式编程。</li></ul><h4 id="1-4-1-注释"><a href="#1-4-1-注释" class="headerlink" title="1.4.1 注释"></a>1.4.1 注释</h4><p>单行注释：两个减号是单行注释:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment"> 多行注释</span><br><span class="hljs-comment"> 多行注释</span><br><span class="hljs-comment"> --]]</span><br></code></pre></td></tr></table></figure><h4 id="1-4-2-关键字"><a href="#1-4-2-关键字" class="headerlink" title="1.4.2 关键字"></a>1.4.2 关键字</h4><p>lua的关键字如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>break</td><td>do</td><td>else</td></tr><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td></td><td></td><td></td></tr></tbody></table><h4 id="1-4-3-定义变量"><a href="#1-4-3-定义变量" class="headerlink" title="1.4.3 定义变量"></a>1.4.3 定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 全局变量赋值</span><br>a=<span class="hljs-number">1</span><br><span class="hljs-comment">-- 局部变量赋值</span><br><span class="hljs-keyword">local</span> b=<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p>如果变量没有初始化：则 它的值为nil</p><h4 id="1-4-4-Lua中的数据类型"><a href="#1-4-4-Lua中的数据类型" class="headerlink" title="1.4.4 Lua中的数据类型"></a>1.4.4 Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><h4 id="1-4-5-流程控制"><a href="#1-4-5-流程控制" class="headerlink" title="1.4.5 流程控制"></a>1.4.5 流程控制</h4><p>如下：类似于if else </p><p>注意：</p><ul><li>以<code>end</code>结束</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[ 0 为 true ]</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0 为 true&quot;</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0 不为true&quot;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="1-4-6-函数"><a href="#1-4-6-函数" class="headerlink" title="1.4.6 函数"></a>1.4.6 函数</h4><p>lua中也可以定义函数。例如：</p><p>注意：</p><ul><li>函数也是以<code>end</code>结束</li><li>稍微注意下他的字符串拼接方式</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[ 函数返回两个值的最大值 --]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span><span class="hljs-params">(num1, num2)</span></span><br><br>   <span class="hljs-keyword">if</span> (num1 &gt; num2) <span class="hljs-keyword">then</span><br>      result = num1;<br>   <span class="hljs-keyword">else</span><br>      result = num2;<br>   <span class="hljs-keyword">end</span><br><br>   <span class="hljs-keyword">return</span> result; <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 调用函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两值比较最大值为 &quot;</span>,<span class="hljs-built_in">max</span>(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两值比较最大值为 &quot;</span>,<span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>执行之后的结果：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">两值比较最大值为     <span class="hljs-number">10</span><br>两值比较最大值为     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="1-4-7-require-函数"><a href="#1-4-7-require-函数" class="headerlink" title="1.4.7 require 函数"></a>1.4.7 require 函数</h4><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><p>用法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;&lt;模块名&gt;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-nginx-lua-redis实现广告缓存"><a href="#2-nginx-lua-redis实现广告缓存" class="headerlink" title="2. nginx+lua+redis实现广告缓存"></a>2. nginx+lua+redis实现广告缓存</h2><p>需求分析：</p><ul><li>需要在首页页面不同位置处显示相应的广告</li></ul><h3 id="2-1-nginx"><a href="#2-1-nginx" class="headerlink" title="2.1 nginx"></a>2.1 nginx</h3><p>负载均衡功能</p><img src="/images/image-20210729153602339.png" alt="image-20210729153602339" style="zoom: 80%;" /><p>反向代理功能</p><img src="/images/image-20210729153737126.png" alt="image-20210729153737126" style="zoom:80%;" /><p>http服务器功能</p><img src="/images/image-20210729153818568.png" alt="image-20210729153818568" style="zoom:80%;" /><h3 id="2-2-OpenResty"><a href="#2-2-OpenResty" class="headerlink" title="2.2 OpenResty"></a>2.2 OpenResty</h3><h4 id="2-2-1-OpenResty介绍"><a href="#2-2-1-OpenResty介绍" class="headerlink" title="2.2.1 OpenResty介绍"></a>2.2.1 OpenResty介绍</h4><p>OpenResty(又称：ngx_openresty) 是一个基于 NGINX 的可伸缩的 Web 平台，由中国人章亦春发起，提供了很多高质量的第三方模块。</p><p>OpenResty 是一个强大的 Web 应用服务器，Web 开发人员可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块,更主要的是在性能方面，OpenResty可以 快速构造出足以胜任 10K 乃至1000K以上并发连接响应的超高性能 Web 应用系统。</p><p>360，UPYUN，阿里云，新浪，腾讯网，去哪儿网，酷狗音乐等都是 OpenResty 的深度用户。</p><p>OpenResty 简单理解，就相当于封装了nginx,并且集成了LUA脚本，开发人员只需要简单的为其提供模块就可以实现相关的逻辑，而不再像之前，还需要在nginx中自己编写lua的脚本，再进行调用了。</p><h3 id="2-2-2-OpenResty安装"><a href="#2-2-2-OpenResty安装" class="headerlink" title="2.2.2 OpenResty安装"></a>2.2.2 OpenResty安装</h3><p>具体见本地讲义</p><h4 id="2-2-3-安装nginx"><a href="#2-2-3-安装nginx" class="headerlink" title="2.2.3 安装nginx"></a>2.2.3 安装nginx</h4><p>默认已经安装好了nginx,在目录：/usr/local/openresty/nginx 下。</p><p>修改/usr/local/openresty/nginx/conf/nginx.conf ,将配置文件使用的根设置为root,目的就是将来要使用lua脚本的时候 ，直接可以加载在root下的lua脚本。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#user nobody; 配置文件第一行原来为这样, 现改为下面的配置</span><br><span class="hljs-keyword">user</span> <span class="hljs-title">root</span> root;<br></code></pre></td></tr></table></figure><p>测试访问 <a href="http://192.168.200.128/">http://192.168.200.128</a></p><img src="/images/image-20210729154301413.png" alt="image-20210729154301413" style="zoom: 67%;" /><h3 id="2-3-实现思路"><a href="#2-3-实现思路" class="headerlink" title="2.3 实现思路"></a>2.3 实现思路</h3><h4 id="2-3-1-表结构分析"><a href="#2-3-1-表结构分析" class="headerlink" title="2.3.1 表结构分析"></a>2.3.1 表结构分析</h4><p>tb_ad （广告表）</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>ID</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>广告名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>position</td><td>广告位置</td><td>VARCHAR</td><td></td><td>系统定义</td></tr><tr><td>start_time</td><td>开始时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>end_time</td><td>到期时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>status</td><td>状态</td><td>CHAR</td><td></td><td>0：无效 1:有效</td></tr><tr><td>image</td><td>图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>url</td><td>URL</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>remarks</td><td>备注</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>web_index_lb</td><td>首页轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_amusing</td><td>有趣区</td><td></td><td></td><td></td></tr><tr><td>web_index_ea_lb</td><td>家用电器楼层轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_ea</td><td>家用电器楼层广告</td><td></td><td></td><td></td></tr><tr><td>web_index_mobile_lb</td><td>手机通讯楼层轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_mobile</td><td>手机通讯楼层广告</td><td></td><td></td><td></td></tr></tbody></table><h4 id="2-3-2-缓存预热与二级缓存查询"><a href="#2-3-2-缓存预热与二级缓存查询" class="headerlink" title="2.3.2 缓存预热与二级缓存查询"></a>2.3.2 缓存预热与二级缓存查询</h4><ol><li><p>编写lua脚本实现缓存预热（将mysql里的数据查询出来存入redis）</p><img src="/images/image-20210729154726183.png" alt="image-20210729154726183" style="zoom:80%;" /></li><li><p>编写lua脚本实现二级缓存读取</p><img src="/images/image-20210729154821590.png" alt="image-20210729154821590" style="zoom:80%;" /><p>就是说客户端查询的时候先查询本地缓存</p></li></ol><h3 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h3><h4 id="2-4-1-缓存预热"><a href="#2-4-1-缓存预热" class="headerlink" title="2.4.1 缓存预热"></a>2.4.1 缓存预热</h4><p>实现思路：</p><p>定义请求：用于查询数据库中的数据更新到redis中。</p><ol><li>连接mysql ，按照广告分类ID读取广告列表，转换为json字符串</li><li>连接redis，将广告列表json字符串存入redis</li></ol><p>定义请求：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">请求：<br>    /ad_update<br>参数：<br>    position  <span class="hljs-comment">--指定广告位置</span><br>返回值：<br>    <span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><p>在/root/lua目录下创建ad_load.lua ，实现连接mysql 查询数据 并存储到redis中。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span> <span class="hljs-comment">-- 表明内容以json数据进行传递</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cjson&quot;</span>) <span class="hljs-comment">-- 引入第三方模块，表明支持json</span><br><span class="hljs-keyword">local</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.mysql&quot;</span>) <span class="hljs-comment">-- 引入mysql支持</span><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args() <span class="hljs-comment">-- 获取当前请求路径上的参数赋值给uri_args</span><br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>]  <span class="hljs-comment">-- 获取请求参数中的position的值</span><br><br><span class="hljs-keyword">local</span> db = mysql:new() <span class="hljs-comment">-- 设置一个新的mysql连接</span><br>db:set_timeout(<span class="hljs-number">1000</span>)  <span class="hljs-comment">-- 设置数据库连接的超时时间</span><br><span class="hljs-keyword">local</span> props = &#123;    <span class="hljs-comment">-- 设置要连接的数据库服务器的参数信息</span><br>    host = <span class="hljs-string">&quot;192.168.200.128&quot;</span>,  <br>    port = <span class="hljs-number">3306</span>,  <br>    database = <span class="hljs-string">&quot;changgou_business&quot;</span>,  <br>    user = <span class="hljs-string">&quot;root&quot;</span>,  <br>    password = <span class="hljs-string">&quot;root&quot;</span>  <br>&#125;<br><br><span class="hljs-keyword">local</span> res = db:connect(props)  <span class="hljs-comment">-- 基于上面的参数进行真正的连接</span><br><span class="hljs-keyword">local</span> select_sql = <span class="hljs-string">&quot;select url,image from tb_ad where status =&#x27;1&#x27; and position=&#x27;&quot;</span>..position..<span class="hljs-string">&quot;&#x27; and start_time&lt;= NOW() AND end_time&gt;= NOW()&quot;</span>  <span class="hljs-comment">-- 定义sql语句</span><br>res = db:query(select_sql)  <span class="hljs-comment">-- 执行连接到mysql以后要执行的sql语句</span><br>db:<span class="hljs-built_in">close</span>()  <span class="hljs-comment">-- 关闭数据库的连接</span><br><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>) <span class="hljs-comment">-- 引入redis第三方面模块</span><br><span class="hljs-keyword">local</span> red = redis:new() <span class="hljs-comment">-- 设置redis的连接</span><br>red:set_timeout(<span class="hljs-number">2000</span>)  <span class="hljs-comment">-- 设置redis的连接超时时间</span><br><br><span class="hljs-keyword">local</span> ip =<span class="hljs-string">&quot;192.168.200.128&quot;</span>  <span class="hljs-comment">-- 设置redis服务器的ip地址</span><br><span class="hljs-keyword">local</span> port = <span class="hljs-number">6379</span>  <span class="hljs-comment">-- 设置redis服务器的端口号</span><br>red:connect(ip,port) <span class="hljs-comment">-- 开启真正的redis连接</span><br><br>red:set(<span class="hljs-string">&quot;ad_&quot;</span>..position,cjson.encode(res))  <span class="hljs-comment">-- 设置向redis中存放的内容</span><br>red:<span class="hljs-built_in">close</span>() <span class="hljs-comment">-- 关闭连接</span><br><br>ngx.say(<span class="hljs-string">&quot;&#123;flag:true&#125;&quot;</span>)  <span class="hljs-comment">-- 响应给客户端的字符串信息</span><br></code></pre></td></tr></table></figure><p>修改/usr/local/openresty/nginx/conf/nginx.conf文件，代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>        <span class="hljs-comment"># 添加</span><br>        <span class="hljs-attribute">location</span> /ad_update &#123; <span class="hljs-comment"># 这个路径映射到下面这个本地ad_update.lua文件</span><br>            <span class="hljs-attribute">content_by_lua_file</span> /root/lua/ad_update.lua;<br>        &#125;<br>        <br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动nginx   (<code>./nginx -s reload</code>)</p><p>测试：<a href="http://192.168.200.128/ad_update?position=web_index_lb">http://192.168.200.128/ad_update?position=web_index_lb</a>   （我这一步没报错，但是数据没输进去，这个bug先放这儿，后面熟悉了再慢慢解决）</p><h4 id="广告缓存读取"><a href="#广告缓存读取" class="headerlink" title="广告缓存读取"></a>广告缓存读取</h4><p>实现思路：</p><ul><li>通过lua脚本直接从redis中获取数据即可。</li></ul><p>定义请求：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">请求<span class="hljs-symbol">:/ad_read</span><br>参数：position<br>返回值：json<br></code></pre></td></tr></table></figure><p>在/root/lua目录下创建ad_read.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span><br><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args();<br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>];<br><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>);<br><br><span class="hljs-keyword">local</span> red = redis:new()<br><br>red:set_timeout(<span class="hljs-number">2000</span>)<br><br><span class="hljs-keyword">local</span> ok, err = red:connect(<span class="hljs-string">&quot;192.168.200.128&quot;</span>, <span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">local</span> rescontent=red:get(<span class="hljs-string">&quot;ad_&quot;</span>..position)<br><br>ngx.say(rescontent)<br><br>red:<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><p>在/usr/local/openresty/nginx/conf/nginx.conf中server下添加配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /ad_read &#123;<br>  <span class="hljs-attribute">content_by_lua_file</span> /root/lua/ad_read.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试 <a href="http://192.168.200.128/ad_read?position=web_index_lb">http://192.168.200.128/ad_read?position=web_index_lb</a> 输出</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[&#123;<span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;img\/banner1.jpg&quot;</span>,<span class="hljs-attr">&quot;image&quot;</span>:<span class="hljs-string">&quot;img\/banner1.jpg&quot;</span>&#125;,&#123;<span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;img\/banner2.jpg&quot;</span>,<span class="hljs-attr">&quot;image&quot;</span>:<span class="hljs-string">&quot;img\/banner2.jpg&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h4 id="2-4-3-二级缓存-加入openresty本地缓存"><a href="#2-4-3-二级缓存-加入openresty本地缓存" class="headerlink" title="2.4.3 二级缓存-加入openresty本地缓存"></a>2.4.3 二级缓存-加入openresty本地缓存</h4><p>如上的方式没有问题，但是如果请求都到redis，redis压力也很大，所以我们一般采用多级缓存的方式来减少下游系统的服务压力</p><p>先查询openresty本地缓存 如果没有再查询redis中的数据<br>修改/root/lua目录下ad_read文件, 内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--设置响应头类型</span><br>ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span><br><span class="hljs-comment">--获取请求中的参数ID</span><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args();<br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>];<br><br><span class="hljs-comment">--获取本地缓存</span><br><span class="hljs-keyword">local</span> cache_ngx = ngx.shared.dis_cache;<br><span class="hljs-comment">--根据ID 获取本地缓存数据</span><br><span class="hljs-keyword">local</span> adCache = cache_ngx:get(<span class="hljs-string">&#x27;ad_cache_&#x27;</span>..position);<br><br><span class="hljs-keyword">if</span> adCache == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> adCache == <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br><br><span class="hljs-comment">--引入redis库</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>);<br><span class="hljs-comment">--创建redis对象</span><br><span class="hljs-keyword">local</span> red = redis:new()<br><span class="hljs-comment">--设置超时时间</span><br>red:set_timeout(<span class="hljs-number">2000</span>)<br><span class="hljs-comment">--连接</span><br><span class="hljs-keyword">local</span> ok, err = red:connect(<span class="hljs-string">&quot;192.168.200.128&quot;</span>, <span class="hljs-number">6379</span>)<br><span class="hljs-comment">--获取key的值</span><br><span class="hljs-keyword">local</span> rescontent=red:get(<span class="hljs-string">&quot;ad_&quot;</span>..position)<br><span class="hljs-comment">--输出到返回响应中</span><br>ngx.say(rescontent)<br><span class="hljs-comment">--关闭连接</span><br>red:<span class="hljs-built_in">close</span>()<br><span class="hljs-comment">--将redis中获取到的数据存入nginx本地缓存</span><br>cache_ngx:set(<span class="hljs-string">&#x27;ad_cache_&#x27;</span>..position, rescontent, <span class="hljs-number">10</span>*<span class="hljs-number">60</span>);<br><br><span class="hljs-keyword">else</span><br> <span class="hljs-comment">--nginx本地缓存中获取到数据直接输出</span><br> ngx.say(adCache)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>修改nginx配置文件vi /usr/local/openresty/nginx/conf/nginx.conf ，http节点下添加配置:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#包含redis初始化模块</span><br><span class="hljs-attribute">lua_shared_dict</span> dis_cache <span class="hljs-number">5m</span>;  <span class="hljs-comment">#共享内存开启</span><br></code></pre></td></tr></table></figure><h4 id="2-4-4-前端页面实现（了解）"><a href="#2-4-4-前端页面实现（了解）" class="headerlink" title="2.4.4 前端页面实现（了解）"></a>2.4.4 前端页面实现（了解）</h4><p>这里先不学，有需要再说。</p><p>待更改完成后用FileZilla连接服务器（在这里就是那台linux虚拟机）</p><p><img src="/images/image-20210729213014273.png" alt="image-20210729213014273"></p><p>连接成功后，把本地的前端页面以及其样式设置的文件和文件夹全部都拷贝到服务器上nginx目录下的html文件夹中</p><p><img src="/images/image-20210729213222244.png" alt="image-20210729213222244"></p><p>最后更改nginx.conf的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 加载首页</span><br>      <span class="hljs-attribute">location</span> / &#123;<br>          <span class="hljs-attribute">root</span>   html;  <span class="hljs-comment"># 表明页面文件都部署在html文件夹下</span><br>          <span class="hljs-attribute">index</span>  index.html index.htm;  <span class="hljs-comment"># 表明location对应的主页页面</span><br>      &#125;<br></code></pre></td></tr></table></figure><p>配置完成后重启nginx即可</p><p>最后根据首页的<code>location</code>, 在浏览器输入 192.168.200.128 即可完成访问。<code>location</code>的<code>/</code>在地址栏可输也可不输入。看到主页的广告图出现，说明设置成功。</p><h2 id="3-nginx限流"><a href="#3-nginx限流" class="headerlink" title="3 nginx限流"></a>3 nginx限流</h2><p>一般情况下，首页的并发量是比较大的，即使有了多级缓存，如果有大量恶意的请求，也会对系统造成影响。而限流就是保护措施之一。</p><p>nginx提供两种限流的方式：</p><ul><li>一是控制速率</li><li>二是控制并发连接数</li></ul><h3 id="3-1-控制速率"><a href="#3-1-控制速率" class="headerlink" title="3.1 控制速率"></a>3.1 控制速率</h3><p>控制速率的方式之一就是采用漏桶算法</p><h4 id="3-1-1-漏桶算法实现控制速率限流"><a href="#3-1-1-漏桶算法实现控制速率限流" class="headerlink" title="3.1.1 漏桶算法实现控制速率限流"></a>3.1.1 漏桶算法实现控制速率限流</h4><p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率.</p><p>漏桶算法实现 nginx的配置：</p><ul><li><p>修改/usr/local/openresty/nginx/conf/nginx.conf:</p><p>注意：</p><ul><li><p>被<code>#</code>包裹的设置这个算法的地方</p></li><li><p>binary_remote_addr 是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量 </p></li><li><p>zone：定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。</p></li><li><p>rate 用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。我们这里设置成2 方便测试。</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br>    <span class="hljs-comment">##############################</span><br>    <span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=myRateLimit:<span class="hljs-number">10m</span> rate=2r/s;<br><span class="hljs-comment">###############################</span><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-comment">##########################</span><br>            <span class="hljs-attribute">limit_req</span> zone=myRateLimit;<br>            <span class="hljs-comment">##########################</span><br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：重新加载配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openresty/</span>nginx/sbin<br><br>./nginx -s reload<br></code></pre></td></tr></table></figure><p>快速点击，会报错</p><p><img src="/images/image-20210729220115898.png" alt="image-20210729220115898"></p></li></ul><h4 id="3-1-2-处理突发流量"><a href="#3-1-2-处理突发流量" class="headerlink" title="3.1.2 处理突发流量"></a>3.1.2 处理突发流量</h4><p>上面例子限制 2r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量，可以结合 <strong>burst</strong> 参数使用来解决该问题。</p><p>例如，如下配置表示：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst=<span class="hljs-number">5</span>;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>burst 译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数,当 rate=2r/s 时，将1s拆成2份，即每500ms可处理1个请求。</p><p>此处，<strong>burst=5</strong> ，若同时有6个请求到达，Nginx 会处理第一个请求，剩余5个请求将放入队列，然后每隔500ms从队列中获取一个请求进行处理。若请求数大于6，将拒绝处理多余的请求，直接返回503.</p><p>不过，单独使用 burst 参数并不实用。假设 burst=50 ，rate为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待 50 * 100ms即 5s，这么长的处理时间自然难以接受。</p><p>因此，burst 往往结合 nodelay 一起使用。</p><p>例如：如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst=<span class="hljs-number">5</span> nodelay;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上表示：</p><p>处理突发5个请求的时候，没有延迟，等到完成之后，按照正常的速率处理。</p><p>如上两种配置结合就达到了速率稳定，但突然流量也能正常处理的效果。配置代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-comment"># 设置限流配置</span><br>    <span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=myRateLimit:<span class="hljs-number">10m</span> rate=2r/s;<br><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">8081</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst = <span class="hljs-number">5</span> nodelay;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成以后记得重启nginx （改配置文件需要重启，其他时候不用重启）</p><p>测试：在1秒钟之内可以刷新5次，正常处理。</p><p>但超过之后会报错</p><h1 id="Part-06-数据同步解决方案-canal"><a href="#Part-06-数据同步解决方案-canal" class="headerlink" title="Part-06 数据同步解决方案-canal"></a>Part-06 数据同步解决方案-canal</h1><h2 id="1-canal"><a href="#1-canal" class="headerlink" title="1. canal"></a>1. canal</h2><h3 id="1-1-canal简介"><a href="#1-1-canal简介" class="headerlink" title="1.1 canal简介"></a>1.1 canal简介</h3><p>canal可以用来监控数据库数据的变化，从而获得新增数据，或者修改的数据。</p><p>canal是应对阿里巴巴存在杭州和美国的双机房部署，存在跨机房同步的业务需求而提出的。</p><p>阿里系公司开始逐步的尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出了增量订阅&amp;消费的业务。</p><img src="/images/image-20210730122738581.png" alt="image-20210730122738581" style="zoom:80%;" /><p>原理相对比较简单：(这里不是太理解)</p><ol><li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li><li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li><li>canal解析binary log对象(原始为byte流)</li></ol><h3 id="1-2-环境部署"><a href="#1-2-环境部署" class="headerlink" title="1.2 环境部署"></a>1.2 环境部署</h3><h4 id="1-2-1-mysql开启binlog模式"><a href="#1-2-1-mysql开启binlog模式" class="headerlink" title="1.2.1 mysql开启binlog模式"></a>1.2.1 mysql开启binlog模式</h4><p>​    这部分看具体博客或者本地笔记</p><h4 id="1-2-2-canal服务端安装配置"><a href="#1-2-2-canal服务端安装配置" class="headerlink" title="1.2.2 canal服务端安装配置"></a>1.2.2 canal服务端安装配置</h4><p>​    这部分看具体博客或者本地笔记都可</p><h3 id="1-3-数据监控微服务"><a href="#1-3-数据监控微服务" class="headerlink" title="1.3 数据监控微服务"></a>1.3 数据监控微服务</h3><p>当用户执行数据库的操作的时候，binlog 日志会被canal捕获到，并解析出数据。我们就可以将解析出来的数据进行相应的逻辑处理。</p><p>我们这里使用的一个开源的项目，它实现了springboot与canal的集成。比原生的canal更加优雅。springboot 没有这个包，需要自己下载并部署到本地仓库</p><ol><li><p>打开网址 <a href="https://github.com/chenqian56131/spring-boot-starter-canal">https://github.com/chenqian56131/spring-boot-starter-canal</a> 下载 spring-boot-starter-canal。（下载到本地的磁盘位置可随便选）</p></li><li><p>下载完成后解压，并打开文件夹到有pom.xml文件的那一级</p><img src="/images/image-20210730125655100.png" alt="image-20210730125655100" style="zoom:80%;" /></li><li><p>在此处输入mvn命令</p><p>注意：</p><ul><li>DskipTests 表明安装的时候跳过测试</li></ul><p><img src="/images/image-20210730125838140.png" alt="image-20210730125838140"></p></li><li><p>BUILD SUCCESS以后可以在本地的maven仓库看到一个xpand包</p><p><img src="/images/image-20210730130053149.png" alt="image-20210730130053149"></p></li></ol><h4 id="1-3-1-微服务搭建"><a href="#1-3-1-微服务搭建" class="headerlink" title="1.3.1 微服务搭建"></a>1.3.1 微服务搭建</h4><ol><li><p>创建工程模块changgou_canal，pom引入依赖</p><p>注意：</p><ul><li>上面那个包就是刚刚下载到本地的包，不然这里会报红</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xpand<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>starter-canal<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建包com.changgou.canal ，包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCanalClient</span> <span class="hljs-comment">//声明当前的服务是canal的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CanalApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CanalApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">canal.client.instances.example.host</span>=<span class="hljs-string">192.168.200.128</span><br><span class="hljs-meta">canal.client.instances.example.port</span>=<span class="hljs-string">11111</span><br><span class="hljs-meta">canal.client.instances.example.batchSize</span>=<span class="hljs-string">1000  # 这里不知道是什么意思</span><br><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.200.128</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.canal.listener包，包下创建类</p><p>注意：</p><ul><li><code>@CanalEventListener</code>: 声明当前的类是canal的监听类</li><li><code>@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</code>表明监听的是数据库changgou_business中的tb_ad表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span> <span class="hljs-comment">//声明当前的类是canal的监听类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessListener</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adUpdate</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;广告表数据发生改变&quot;</span>);<br>        <span class="hljs-comment">//获取改变之前的数据</span><br>        rowData.getBeforeColumnsList().forEach((c)-&gt; System.out.println(<span class="hljs-string">&quot;改变前的数据:&quot;</span>+c.getName()+<span class="hljs-string">&quot;::&quot;</span>+c.getValue()));<br>        System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>        <span class="hljs-comment">//获取改变之后的数据</span><br>        rowData.getAfterColumnsList().forEach((c) -&gt; System.out.println(<span class="hljs-string">&quot;改变之后的数据:&quot;</span>+c.getName()+<span class="hljs-string">&quot;::&quot;</span>+c.getValue())); <span class="hljs-comment">// 获取改变后的那一行的所有字段名和数据</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：启动数据监控微服务，修改changgou_business的tb_ad表，观察控制台输出</p></li></ol><h2 id="2-首页广告缓存更新"><a href="#2-首页广告缓存更新" class="headerlink" title="2. 首页广告缓存更新"></a>2. 首页广告缓存更新</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>当tb_ad（广告）表的数据发生变化时，更新redis中的广告数据</p><h3 id="2-2-实现思路"><a href="#2-2-实现思路" class="headerlink" title="2.2 实现思路"></a>2.2 实现思路</h3><ol><li><p>修改数据监控微服务，监控tb_ad表，当发生增删改操作时，提取position值（广告位置key），发送到rabbitmq</p></li><li><p>从rabbitmq中提取消息，通过OkHttpClient调用ad_update来实现对广告缓存数据的更新。</p><img src="/images/image-20210730193803227.png" alt="image-20210730193803227" style="zoom:80%;" /></li></ol><p>这个图要理解</p><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><h4 id="2-3-1-发送消息到mq"><a href="#2-3-1-发送消息到mq" class="headerlink" title="2.3.1 发送消息到mq"></a>2.3.1 发送消息到mq</h4><ol><li>在rabbitmq管理后台创建队列 ad_update_queue ，用于接收广告更新通知</li></ol><img src="/images/image-20210730194058801.png" alt="image-20210730194058801" style="zoom:80%;" /><ol start="2"><li><p>引入rabbitmq起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件application.properties 添加内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.200.128</span><br></code></pre></td></tr></table></figure></li><li><p>新增rabbitMQ配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>   <br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改BusinessListener类</p><p>注意：</p><ul><li><code>@CanalEventListener</code>表明当前的类是canal的监听类</li><li><code>@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</code>表明监听是哪一个数据库中的哪张表</li><li>关于<code>CanalEntry</code>具体的实现细节先不深入</li><li>RabbitMQ与springboot结合的用法还不熟</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span> <span class="hljs-comment">//声明当前的类是canal的监听类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessListener</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adUpdate</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;广告表数据发生改变&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (CanalEntry.Column column : rowData.getAfterColumnsList()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;position&quot;</span>.equals(column.getName()))&#123;<br>                System.out.println(<span class="hljs-string">&quot;发送最新的数据到MQ:&quot;</span>+column.getValue());<br><br>                <span class="hljs-comment">//发送消息</span><br>                rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;&quot;</span>, RabbitMQConfig.AD_UPDATE_QUEUE, column.getValue());<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-3-2-从mq中提取消息执行更新"><a href="#2-3-2-从mq中提取消息执行更新" class="headerlink" title="2.3.2 从mq中提取消息执行更新"></a>2.3.2 从mq中提取消息执行更新</h4><ol><li><p>changgou_service_business工程pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--消息队列依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在spring节点下添加rabbitmq配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rabbitmq:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br></code></pre></td></tr></table></figure></li><li><p>com.changgou.business包下创建listener包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;ad_update_queue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息为:&quot;</span>+message);<br><br>        <span class="hljs-comment">//发起远程调用</span><br>        OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient();<br>        String url = <span class="hljs-string">&quot;http://192.168.200.128/ad_update?position=&quot;</span>+message;<br>        Request request = <span class="hljs-keyword">new</span> Request.Builder().url(url).build();<br>        Call call = okHttpClient.newCall(request);<br>        call.enqueue(<span class="hljs-keyword">new</span> Callback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Call call, IOException e)</span> </span>&#123;<br>                <span class="hljs-comment">//请求失败</span><br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(Call call, Response response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//请求成功</span><br>                System.out.println(<span class="hljs-string">&quot;请求成功:&quot;</span>+response.message());<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试，启动business微服务(前面已经启动了eureka, canal的微服务。不然达不成效果)，观察控制台输出和数据同步效果</p></li></ol><h2 id="3-商品上架索引库导入数据"><a href="#3-商品上架索引库导入数据" class="headerlink" title="3. 商品上架索引库导入数据"></a>3. 商品上架索引库导入数据</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>商品上架将商品的sku列表导入或更新索引库。</p><h3 id="3-2-实现思路"><a href="#3-2-实现思路" class="headerlink" title="3.2 实现思路"></a>3.2 实现思路</h3><ol><li><p>在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为1时，表示商品上架，将spu的id发送到rabbitmq。</p></li><li><p>在rabbitmq管理后台创建商品上架交换器（fanout）。使用分列模式的交换器是考虑商品上架会有很多种逻辑需要处理，导入索引库只是其中一项，另外还有商品详细页静态化等操作。这样我们可以创建导入索引库的队列和商品详细页静态化队列并与商品上架交换器进行绑定。</p></li><li><p>搜索微服务从rabbitmq的导入索引库的队列中提取spu的id，通过feign调用商品微服务得到sku的列表，并且通过调用elasticsearch的高级restAPI 将sku列表导入到索引库。</p><p><img src="/images/image-20210803144338107.png" alt="image-20210803144338107"></p></li></ol><h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><h4 id="3-3-1-发送消息到mq"><a href="#3-3-1-发送消息到mq" class="headerlink" title="3.3.1 发送消息到mq"></a>3.3.1 发送消息到mq</h4><ol><li><p>在rabbitmq后台创建交换器goods_up_exchange（类型为fanout），创建队列search_add_queue绑定交换器goods_up_exchange,更新rabbitmq配置类</p><p>注意：</p><ul><li><code>@Bean(SEARCH_ADD_QUEUE)</code>是用来声明这个方法返回的bean的名称，便于后面的绑定zhu入。</li><li><code>@Qualifier(SEARCH_ADD_QUEUE)</code>：qualifier注解是按照名称来注入引用类型的bean的，而autowire是按照bean的类型来注入的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br><br>    <span class="hljs-comment">//大小写转换快捷键：CTRL+SHIFT+U</span><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE = <span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">SEARCH_ADD_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span> Queue queue, <span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据监控微服务新增SpuListener，添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpuListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_goods&quot;, table = &quot;tb_spu&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goodsUp</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        <span class="hljs-comment">//获取改变之前的数据并将这部分数据转换为map</span><br>        Map&lt;String, String&gt; oldData = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        rowData.getBeforeColumnsList().forEach((c)-&gt;oldData.put(c.getName(), c.getValue()));<br><br>        <span class="hljs-comment">//获取改变之后的数据并这部分数据转换为map</span><br>        Map&lt;String,String&gt; newData = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        rowData.getAfterColumnsList().forEach((c)-&gt;newData.put(c.getName(),c.getValue()));<br><br>        <span class="hljs-comment">//获取最新上架的商品 0-&gt;1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;0&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;1&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)))&#123;<br>            <span class="hljs-comment">//将商品的spuid发送到mq</span><br>            rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_UP_EXCHANGE, <span class="hljs-string">&quot;&quot;</span>, newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-2-创建索引结构"><a href="#3-3-2-创建索引结构" class="headerlink" title="3.3.2 创建索引结构"></a>3.3.2 创建索引结构</h4><p>新建changgou_service_search_api模块,并添加索引库实体类</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建实体类</p><p>注意： </p><ul><li><code>@Document</code>标示映射到Elasticsearch文档上的领域对象, <code>indexName = &quot;skuinfo&quot;</code>表明这个索引库的名称是skuinfo，<code>docs</code>表明这个索引库的类型是<code>_doc</code></li><li><code>@Field(index = true, store = true, type = FieldType.Keyword)</code>, 依次表示建立倒排索引，存储文档数据，不需要中文分词的字段设置成@Field(type = FieldType.Keyword)类型，需要中文分词的设置成@Field(analyzer = “ik_max_word”,type = FieldType.Text)类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;skuinfo&quot;, type = &quot;docs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SkuInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">//商品id，同时也是商品编号</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">//SKU名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Text, analyzer = &quot;ik_smart&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//商品价格，单位为：元</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Double)</span><br>    <span class="hljs-keyword">private</span> Long price;<br><br>    <span class="hljs-comment">//库存数量</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer num;<br><br>    <span class="hljs-comment">//商品图片</span><br>    <span class="hljs-meta">@Field(index = false, store = true, type = FieldType.Text)</span><br>    <span class="hljs-keyword">private</span> String image;<br><br>    <span class="hljs-comment">//商品状态，1-正常，2-下架，3-删除</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">//更新时间</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-comment">//是否默认</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String isDefault;<br><br>    <span class="hljs-comment">//SPUID</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Long)</span><br>    <span class="hljs-keyword">private</span> Long spuId;<br><br>    <span class="hljs-comment">//类目ID</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Long)</span><br>    <span class="hljs-keyword">private</span> Long categoryId;<br><br>    <span class="hljs-comment">//类目名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String categoryName;<br><br>    <span class="hljs-comment">//品牌名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String brandName;<br><br>    <span class="hljs-comment">//规格</span><br>    <span class="hljs-keyword">private</span> String spec;<br><br>    <span class="hljs-comment">//规格参数</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; specMap;<br>    <br>    <span class="hljs-comment">//getter &amp; setter略</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-3-搜索微服务搭建"><a href="#3-3-3-搜索微服务搭建" class="headerlink" title="3.3.3 搜索微服务搭建"></a>3.3.3 搜索微服务搭建</h4><ol><li><p>创建changgou_service_search模块，pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_search_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置changgou_service_search的application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9009</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">search</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><span class="hljs-string">:9300</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">600000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">600000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou包，包下创建SearchApplication启动类</p><p>注意：</p><ul><li><code>@EnableFeignClients</code>使用<strong>basePackages</strong>属性字段去指明应用程序在启动的时候需要扫描服务中的标注了@FeignClient注解的接口的包路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &#123;&quot;com.changgou.goods.feign&quot;&#125;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchApplication</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SearchApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将rabbitmq配置类放入该模块下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br><br>    <span class="hljs-comment">//队列与交换机的绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_UP_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-4-商品服务查询商品信息"><a href="#3-3-4-商品服务查询商品信息" class="headerlink" title="3.3.4 商品服务查询商品信息"></a>3.3.4 商品服务查询商品信息</h4><ol><li><p>SkuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String spuId)</span></span>&#123;<br>    Map&lt;String, Object&gt; searchMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;all&quot;</span>.equals(spuId))&#123;<br>        searchMap.put(<span class="hljs-string">&quot;spuId&quot;</span>,spuId);<br>    &#125;<br>    searchMap.put(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>    List&lt;Sku&gt; skuList = skuService.findList(searchMap);<br>   <br>    <span class="hljs-keyword">return</span> skuList;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods_api新增common依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods_api新增feign包并定义skuFegin接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;goods&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SkuFeign</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 多条件搜索品牌数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spuId&quot;)</span> String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-5-搜索微服务批量导入数据逻辑"><a href="#3-3-5-搜索微服务批量导入数据逻辑" class="headerlink" title="3.3.5 搜索微服务批量导入数据逻辑"></a>3.3.5 搜索微服务批量导入数据逻辑</h4><ol><li><p>创建 com.changgou.search.dao包,并新增ESManagerMapper接口（这里是操作es的详细步骤，其实和操作mysql的比较类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ESManagerMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">SkuInfo</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;  <span class="hljs-comment">// 括号里表示的是当前要操作的实体类和当前主键的数据类型</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 com.changgou.search.service包，包下创建接口EsManagerService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ESManagerService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引库结构</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMappingAndIndex</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导入全部数据到ES索引库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">importAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据spuid导入数据到ES索引库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId 商品id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">importDataBySpuId</span><span class="hljs-params">(String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.search.service.impl包，包下创建服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESManagerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ESManagerService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SkuFeign skuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerMapper esManagerMapper;<br><br>    <span class="hljs-comment">//创建索引库结构</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createMappingAndIndex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//创建索引</span><br>        elasticsearchTemplate.createIndex(SkuInfo.class);<br>        <span class="hljs-comment">//创建映射</span><br>        elasticsearchTemplate.putMapping(SkuInfo.class);<br>    &#125;<br><br>    <span class="hljs-comment">//导入全部sku集合进入到索引库</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//查询sku集合</span><br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(<span class="hljs-string">&quot;all&quot;</span>);<br>        <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//skulist转换为json</span><br>        String jsonSkuList = JSON.toJSONString(skuList);<br>        <span class="hljs-comment">//将json转换为skuinfo</span><br>        List&lt;SkuInfo&gt; skuInfoList = JSON.parseArray(jsonSkuList, SkuInfo.class);<br><br>        <span class="hljs-keyword">for</span> (SkuInfo skuInfo : skuInfoList) &#123;<br>            <span class="hljs-comment">//将规格信息转换为map</span><br>            Map specMap = JSON.parseObject(skuInfo.getSpec(), Map.class);<br>            skuInfo.setSpecMap(specMap);<br>        &#125;<br><br>        <span class="hljs-comment">//导入索引库</span><br>        esManagerMapper.saveAll(skuInfoList);<br>    &#125;<br><br>    <span class="hljs-comment">//根据spuid查询skuList,添加到索引库</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importDataBySpuId</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>        <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//将集合转换为json</span><br>        String jsonSkuList = JSON.toJSONString(skuList);<br>        List&lt;SkuInfo&gt; skuInfoList = JSON.parseArray(jsonSkuList, SkuInfo.class);<br><br>        <span class="hljs-keyword">for</span> (SkuInfo skuInfo : skuInfoList) &#123;<br>            <span class="hljs-comment">//将规格信息进行转换</span><br>            Map specMap = JSON.parseObject(skuInfo.getSpec(), Map.class);<br>            skuInfo.setSpecMap(specMap);<br>        &#125;<br><br>        <span class="hljs-comment">//添加索引库</span><br>        esManagerMapper.saveAll(skuInfoList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.search.controller.定义ESManagerController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/manager&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESManagerController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-comment">//创建索引库结构</span><br>    <span class="hljs-meta">@GetMapping(&quot;/create&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        esManagerService.createMappingAndIndex();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;创建索引库结构成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//导入全部数据</span><br>    <span class="hljs-meta">@GetMapping(&quot;/importAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">importAll</span><span class="hljs-params">()</span></span>&#123;<br>        esManagerService.importAll();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;导入全部数据成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-6-接收mq消息执行导入"><a href="#3-3-6-接收mq消息执行导入" class="headerlink" title="3.3.6 接收mq消息执行导入"></a>3.3.6 接收mq消息执行导入</h4><p>changgou_service_search工程创建com.changgou.search.listener包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsUpListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息为:   &quot;</span>+spuId);<br><br>        <span class="hljs-comment">//查询skulist,并导入到索引库</span><br>        esManagerService.importDataBySpuId(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-7-测试"><a href="#3-3-7-测试" class="headerlink" title="3.3.7 测试"></a>3.3.7 测试</h4><ol><li><p>启动环境 eureka 、elasticsearch 、canal服务端、canal数据监控微服务、rabbitmq</p></li><li><p>启动商品微服务、搜索微服务</p></li><li><p>修改tb_spu某记录的is_marketable值为1，观察控制台输出，启动kibana查询记录是否导入成功</p><p>可以看到成功导入3条数据</p><p><img src="/images/image-20210804135358627.png" alt="image-20210804135358627"></p></li></ol><h2 id="4-商品下架索引库删除数据"><a href="#4-商品下架索引库删除数据" class="headerlink" title="4. 商品下架索引库删除数据"></a>4. 商品下架索引库删除数据</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>商品下架后将商品从索引库中移除。</p><h3 id="4-2-实现思路"><a href="#4-2-实现思路" class="headerlink" title="4.2 实现思路"></a>4.2 实现思路</h3><p>思路与商品上架思路非常相似</p><ol><li><p>在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为0时，表示商品下架，将spu的id发送到rabbitmq。</p></li><li><p>在rabbitmq管理后台创建商品下架交换器（fanout）。使用分列模式的交换器是考虑商品下架会有很多种逻辑需要处理，索引库删除数据只是其中一项，另外还有删除商品详细页等操作</p></li><li><p>搜索微服务从rabbitmq的的队列中提取spu的id，通过调用elasticsearch的高级restAPI 将相关的sku列表从索引库删除</p><p><img src="/images/image-20210804135821285.png" alt="image-20210804135821285"></p></li></ol><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><ol><li><p><strong>创建交换器与队列</strong></p><p>完成商品下架交换器的创建，队列的创建与绑定，将spuId发送消息到mq</p><p>商品下架交换器：goods_down_exchange</p><p>队列名称： search_delete_queue</p><p>绑定 search_delete_queue到goods_down_exchange</p><p>完善RabbitMQConfig的代码</p><p><img src="/images/image-20210804140359619.png" alt="image-20210804140359619"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称 (tips: 大小写转换快捷键：CTRL+SHIFT+U)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE = <span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">SEARCH_ADD_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span> Queue queue, <span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>由于搜索微服务也会用到消息队列，因此把已经写好的配置类复制一份给它</p><p><img src="/images/image-20210804140812672.png" alt="image-20210804140812672"></p></li><li><p><strong>canal监听下架</strong></p><p>修改changgou_canal的SpuListener的spuUpdate方法，添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取最新下架的商品 1-&gt;0</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;0&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)))&#123;<br>    <span class="hljs-comment">//将商品的spuid发送到mq</span><br>    rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_DOWN_EXCHANGE,<span class="hljs-string">&quot;&quot;</span>,newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>根据spuId删除索引数据</strong></p><p>编写业务逻辑，实现根据spuId删除索引库数据的方法。</p><ol><li><p>ESManagerService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据souid删除es索引库中相关的sku数据</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delDataBySpuId</span><span class="hljs-params">(String spuId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ESManagerServiceImpl实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delDataBySpuId</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>    List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>    <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>        esManagerMapper.deleteById(Long.parseLong(sku.getId()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>接受mq消息，执行索引库删除</strong></p><p>从rabbitmq中提取消息，调动根据spuId删除索引库数据的方法 changgou_service_search新增监听类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsDelListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除索引库监听类,接收到的spuId:  &quot;</span>+spuId);<br><br>        <span class="hljs-comment">//调用业务层完成索引库数据删除</span><br>        esManagerService.delDataBySpuId(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>畅购商城项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid样式修改</title>
    <link href="/2021/06/28/0.%20fluid%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
    <url>/2021/06/28/0.%20fluid%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="修改fluid主题样式大致流程"><a href="#修改fluid主题样式大致流程" class="headerlink" title="修改fluid主题样式大致流程"></a>修改fluid主题样式大致流程</h1><h2 id="1-定位资源"><a href="#1-定位资源" class="headerlink" title="1. 定位资源"></a>1. 定位资源</h2><ol><li>打开下图文件夹处</li></ol><p><img src="/images/image-20210806152838538.png" alt="image-20210806152838538"></p><ol start="2"><li><p>在此处打开git bash 命令行，并通过<code>code ./</code>打开vscode进行编辑</p><p><img src="/images/image-20210806153104629.png" alt="image-20210806153104629"></p></li></ol><h2 id="2-修改样式"><a href="#2-修改样式" class="headerlink" title="2. 修改样式"></a>2. 修改样式</h2><ol><li><p>在 plugin.js文件中，我去掉了标题的超链接样式，代码如下(注意他的相对位置)</p><p>165行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//下面这个函数注释掉最后一行</span><br>initAnchor: function() &#123;<br>  <span class="hljs-keyword">if</span> (!(<span class="hljs-string">&#x27;anchors&#x27;</span> <span class="hljs-keyword">in</span> window)) &#123; return; &#125;<br>   <br>  window<span class="hljs-selector-class">.anchors</span><span class="hljs-selector-class">.options</span> = &#123;<br>    placement: CONFIG<span class="hljs-selector-class">.anchorjs</span><span class="hljs-selector-class">.placement</span>,<br>    visible  : CONFIG<span class="hljs-selector-class">.anchorjs</span><span class="hljs-selector-class">.visible</span><br>    <br>  &#125;;<br>  <span class="hljs-keyword">if</span> (CONFIG<span class="hljs-selector-class">.anchorjs</span>.<span class="hljs-attribute">icon</span>) &#123;<br>    window<span class="hljs-selector-class">.anchors</span><span class="hljs-selector-class">.options</span><span class="hljs-selector-class">.icon</span> = CONFIG<span class="hljs-selector-class">.anchorjs</span>.<span class="hljs-attribute">icon</span>;<br>  &#125;<br>  <span class="hljs-selector-tag">var</span> el = (CONFIG<span class="hljs-selector-class">.anchorjs</span><span class="hljs-selector-class">.element</span> || <span class="hljs-string">&#x27;h1,h2,h3,h4,h5,h6&#x27;</span>)<span class="hljs-selector-class">.split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>  <span class="hljs-selector-tag">var</span> res = <span class="hljs-selector-attr">[]</span>;<br>  <span class="hljs-keyword">for</span> (const item of el) &#123;<br>    res<span class="hljs-selector-class">.push</span>(<span class="hljs-string">&#x27;.markdown-body &gt; &#x27;</span> + item);<br>  &#125;<br>  <span class="hljs-comment">//window.anchors.add(res.join(&#x27;, &#x27;));</span><br>&#125;, <br></code></pre></td></tr></table></figure></li><li><p>在copy.stl文件中，我去掉了代码框右上角的鼠标悬停显示copy的样式，代码如下(注意他的相对位置)</p><p>第一行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.copy-btn</span><br>  <span class="hljs-comment">//display inline-block</span><br>  <span class="hljs-attribute">display</span> none<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210806153755890.png" alt="image-20210806153755890"></p></li><li><p>在 rewrite.styl文件中，去掉图片的边框阴影</p><p>代码如下 (注释的那一行就是去掉阴影效果)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">img</span>, <span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">img</span><br>  <span class="hljs-attribute">max-width</span> <span class="hljs-number">90%</span><br>  <span class="hljs-attribute">margin</span> <span class="hljs-number">1.5rem</span> auto<br>  <span class="hljs-attribute">display</span> block<br>  <span class="hljs-comment">//box-shadow $img-shadow  // 增加边框阴影效果</span><br>  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">3px</span><br></code></pre></td></tr></table></figure></li><li><p>在 post.styl文件中，去掉图片下方名称和间距</p><p>添加了<code>display: none</code>, 表示不显示image-caption</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.markdown-body</span> <span class="hljs-selector-class">.image-caption</span><br>  <span class="hljs-attribute">display</span>: none<br>  <span class="hljs-attribute">font-size</span> .<span class="hljs-number">8rem</span><br>  <span class="hljs-attribute">color</span> var(--post-text-color)<br>  <span class="hljs-attribute">opacity</span> <span class="hljs-number">0.65</span><br>  <span class="hljs-attribute">line-height</span> <span class="hljs-number">1</span><br>  <span class="hljs-attribute">margin</span> -<span class="hljs-number">0.75rem</span> auto <span class="hljs-number">2rem</span><br>  <span class="hljs-attribute">text-align</span> center<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-完成页面部署"><a href="#3-完成页面部署" class="headerlink" title="3. 完成页面部署"></a>3. 完成页面部署</h2><p>待样式更改完毕后，在blog的下一级目录开启git命令行，输入命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g <span class="hljs-comment"># 生成页面</span><br></code></pre></td></tr></table></figure><p>然后开启hexo本地服务,</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>浏览器输入网址：localhost:4000，访问博客。可以发现，此时样式已经发生变化</p><p>最后部署到远端仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
