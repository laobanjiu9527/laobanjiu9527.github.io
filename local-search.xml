<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2021/08/02/5.%20ElasticSearch/"/>
    <url>/2021/08/02/5.%20ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="1-初识ElasticSearch"><a href="#1-初识ElasticSearch" class="headerlink" title="1. 初识ElasticSearch"></a>1. 初识ElasticSearch</h1><h2 id="1-1-倒排索引"><a href="#1-1-倒排索引" class="headerlink" title="1.1 倒排索引"></a>1.1 倒排索引</h2><p><strong>倒排索引</strong>：将文档进行分词，形成词条和id的对应关系即为反向索引。</p><p>以唐诗为例，所处包含“前”的诗句</p><p>正向索引：由《静夜思》–&gt;床前明月光—&gt;“前”字</p><p>反向索引：“前”字–&gt;床前明月光–&gt;《静夜思》</p><p>反向索引的实现就是对诗句进行分词，分成单个的词，由词推据，即为反向索引</p><p>“床前明月光”–&gt; 分词</p><p>将一段文本按照一定的规则，拆分为不同的词条（term）</p><p><img src="/images/image-20210802232553086.png" alt="image-20210802232553086"></p><h2 id="1-2-ES存储和查询的原理"><a href="#1-2-ES存储和查询的原理" class="headerlink" title="1.2 ES存储和查询的原理"></a>1.2 ES存储和查询的原理</h2><ul><li>index（索引）：相当于mysql的数据库</li><li>映射：相当于mysql 的表结构</li><li>document(文档)：相当于mysql的表中的数据</li></ul><p>数据库查询存在的问题：</p><ol><li>性能低：使用模糊查询，左边有通配符，不会走索引，会全表扫描，性能低</li><li>功能弱：如果以”华为手机“作为条件查询下图索引库，查询不出来数据</li></ol><p>Es使用倒排索引，对title 进行分词</p><p><img src="/images/image-20210802233002078.png" alt="image-20210802233002078"></p><ol><li><p>使用“手机”作为关键字查询</p><p>生成的倒排索引中，词条会排序，形成一颗树形结构，提升词条的查询速度</p></li><li><p>使用“华为手机”作为关键字查询</p><p>华为：1,3</p><p>手机：1,2,3</p></li></ol><p><img src="/images/image-20210802233215711.png" alt="image-20210802233215711"></p><h2 id="1-3-ES概念详解"><a href="#1-3-ES概念详解" class="headerlink" title="1.3 ES概念详解"></a>1.3 ES概念详解</h2><ul><li><p>ElasticSearch是一个基于Lucene的搜索服务器</p><p><img src="/images/image-20210802233322245.png" alt="image-20210802233322245"></p></li><li><p>是一个分布式、高扩展、高实时的搜索与数据分析引擎</p></li><li><p>基于RESTful web接口</p></li><li><p>Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎</p></li></ul><p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p><p>应用场景：</p><ol><li>搜索：海量数据的查询</li><li>日志数据分析</li><li>实时数据分析</li></ol><h1 id="2-安装ElasticSearch"><a href="#2-安装ElasticSearch" class="headerlink" title="2. 安装ElasticSearch"></a>2. 安装ElasticSearch</h1><h2 id="2-1-ES安装"><a href="#2-1-ES安装" class="headerlink" title="2.1 ES安装"></a>2.1 ES安装</h2><ol><li><p>上传ElasticSearch安装包(在官网下载到了宿主机上，也可以直接在虚拟机中用命令下载)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">alt+p # 打开sftp窗口<br><span class="hljs-meta">#</span><span class="bash"> 上传es安装包</span><br>put e:/software/elasticsearch-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>执行解压操作 ，如下图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将elasticsearch-7.4.0-linux-x86_64.tar.gz解压到opt文件夹下. -C 大写</span><br>tar -zxvf elasticsearch-7.4.0-linux-x86_64.tar.gz  -C /opt<br></code></pre></td></tr></table></figure></li><li><p>创建普通用户</p><p>因为安全问题，Elasticsearch 不允许root用户直接运行，所以要创建新用户，在root用户中创建新用户,执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd itheima  # 新增itheima用户<br>passwd  itheima  # 为itheima用户设置密码<br></code></pre></td></tr></table></figure></li><li><p>为新用户授权，如下图</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chown -R itheima:itheima /opt/elasticsearch-7.4.0 #文件夹所有者<br></code></pre></td></tr></table></figure></li><li><p>修改elasticsearch.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/elasticsearch-7.4.0/config/elasticsearch.yml <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ======================== Elasticsearch Configuration =========================</span><br>cluster.name: my-application<br>node.name: node-1<br>network.host: 0.0.0.0  # 配置成这个地址可以让外网访问到，localhost外网访问不到<br>http.port: 9200<br>cluster.initial_master_nodes: [&quot;node-1&quot;]<br></code></pre></td></tr></table></figure><p>cluster.name：配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称</p><p>node.name：节点名，elasticsearch会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</p><p>network.host：设置为0.0.0.0允许外网访问</p><p>http.port：Elasticsearch的http访问端口</p><p>cluster.initial_master_nodes：初始化新的集群时需要此配置来选举master</p></li><li><p>修改配置文件</p><p>新创建的itheima用户最大可创建文件数太小，最大虚拟内存太小，切换到root用户，编辑下列配置文件， 添加类似如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到root用户</span><br>su root <br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">1. ===最大可创建文件数太小=======</span><br>vim /etc/security/limits.conf <br><span class="hljs-meta">#</span><span class="bash"> 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br><span class="hljs-meta">#</span><span class="bash"> =====</span><br>vim /etc/security/limits.d/20-nproc.conf<br><span class="hljs-meta">#</span><span class="bash"> 在文件末尾中增加下面内容</span><br>itheima soft nofile 65536<br>itheima hard nofile 65536<br>*  hard    nproc     4096<br><span class="hljs-meta">#</span><span class="bash"> 注：* 代表Linux所有用户名称</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">2. ===最大虚拟内存太小=======</span><br>vim /etc/sysctl.conf<br><span class="hljs-meta">#</span><span class="bash"> 在文件中增加下面内容</span><br>vm.max_map_count=655360<br><span class="hljs-meta">#</span><span class="bash"> 重新加载，输入下面命令：</span><br>sysctl -p<br></code></pre></td></tr></table></figure></li><li><p>启动elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">su itheima  # 切换到itheima用户启动<br>cd /opt/elasticsearch-7.4.0/bin<br>./elasticsearch #启动<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-访问elasticsearch"><a href="#2-2-访问elasticsearch" class="headerlink" title="2.2 访问elasticsearch"></a>2.2 访问elasticsearch</h2><ol><li><p>在访问elasticsearch前，请确保防火墙是关闭的，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">暂时关闭防火墙</span><br>systemctl  stop  firewalld<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 或者</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">永久设置防火墙状态</span><br>systemctl enable firewalld.service  #打开防火墙永久性生效，重启后不会复原 <br>systemctl disable firewalld.service #关闭防火墙，永久性生效，重启后不会复原 <br></code></pre></td></tr></table></figure></li><li><p>浏览器输入<a href="http://192.168.200.129:9200/">http://192.168.200.129:9200/</a></p><p><img src="/images/image-20210802234919469.png" alt="image-20210802234919469"></p><p>看到上图说明此时elasticsearch已成功启动：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d">重点几个关注下即可:<br>numbe<span class="hljs-string">r&quot; : &quot;</span><span class="hljs-number">7.4</span><span class="hljs-number">.0</span><span class="hljs-string">&quot;   表示elasticsearch版本</span><br><span class="hljs-string">lucene_version&quot;</span> : <span class="hljs-string">&quot;8.2.0&quot;</span>  表示lucene版本<br>name ： 默认启动的时候指定了 ES 实例名称<br>cluster_name ： 默认名为 elasticsearch<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-Elasticsearch辅助插件Kibana安装"><a href="#3-Elasticsearch辅助插件Kibana安装" class="headerlink" title="3. Elasticsearch辅助插件Kibana安装"></a>3. Elasticsearch辅助插件Kibana安装</h1><p>什么是Kibana?</p><ul><li>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。</li><li>Kibana让海量数据更容易理解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查询动态。</li></ul><h2 id="3-1-Kibana安装"><a href="#3-1-Kibana安装" class="headerlink" title="3.1 Kibana安装"></a>3.1 Kibana安装</h2><ol><li><p>上传kibana</p><p>CRT中克隆一个窗口，上传Kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">put ‪E:\software\kibana-7.4.0-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzf kibana-7.4.0-linux-x86_64.tar.gz -C /opt<br></code></pre></td></tr></table></figure></li><li><p>修改kibana.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/kibana-7.4.0-linux-x86_64/config/kibana.yml<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server.port:</span> <span class="hljs-number">5601</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><span class="hljs-attr">server.name:</span> <span class="hljs-string">&quot;kibana-itcast&quot;</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>] <span class="hljs-comment"># 因为他和es是装一个上面了，所以直接用的127.0.0.1本机ip，如果不在一个上面的话，要改成装es的那台服务器的ip</span><br><span class="hljs-attr">elasticsearch.requestTimeout:</span> <span class="hljs-number">99999</span><br></code></pre></td></tr></table></figure><p>server.port：http访问端口</p><p>server.host：ip地址，0.0.0.0表示可远程访问</p><p>server.name：kibana服务名</p><p>elasticsearch.hosts：elasticsearch地址</p><p>elasticsearch.requestTimeout：请求elasticsearch超时时间，默认为30000，此处可根据情况设置</p></li><li><p>启动kibana</p><p>由于kibana不建议使用root用户启动，如果用root启动，需要加–allow-root参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到kibana的bin目录</span><br>cd /opt/kibana-7.4.0-linux-x86_64/bin<br><span class="hljs-meta">#</span><span class="bash"> 启动</span><br>./kibana --allow-root<br></code></pre></td></tr></table></figure></li><li><p>访问kibana</p><p>浏览器输入<a href="http://192.168.200.129:5601/">http://192.168.200.129:5601/</a></p><p><img src="/images/image-20210803000515080.png" alt="image-20210803000515080"></p><p>看到这个界面，说明Kibanan已成功安装。</p><ul><li><code>Discover</code>：可视化查询分析器</li><li><code>Visualize</code>：统计分析图表</li><li><code>Dashboard</code>：自定义主面板（添加图表）</li><li><code>Timelion</code>：Timelion是一个kibana时间序列展示组件（暂时不用）</li><li><code>Dev Tools</code>：Console控制台（同CURL/POSTER，操作ES代码工具，代码提示，很方便）</li><li><code>Management</code>：管理索引库(index)、已保存的搜索和可视化结果(save objects)、设置 kibana 服务器属性。</li></ul></li></ol><h1 id="4-ElasticSearch核心概念"><a href="#4-ElasticSearch核心概念" class="headerlink" title="4. ElasticSearch核心概念"></a>4. ElasticSearch核心概念</h1><p><strong>索引（index）</strong></p><p>ElasticSearch存储数据的地方，可以理解成关系型数据库中的数据库概念。</p><p><strong>映射（mapping）</strong></p><p>mapping定义了每个字段的类型、字段所使用的分词器等。相当于关系型数据库中的表结构。</p><p><strong>文档（document）</strong></p><p>Elasticsearch中的最小数据单元，常以json格式显示。一个document相当于关系型数据库中的一行数据。</p><p><strong>倒排索引</strong></p><p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，对应一个包含它的文档id列表。</p><p><strong>类型（type）</strong></p><p>一种type就像一类表。如用户表、角色表等。在Elasticsearch7.X默认type为_doc</p><h1 id="5-脚本操作ES"><a href="#5-脚本操作ES" class="headerlink" title="5 脚本操作ES"></a>5 脚本操作ES</h1><p>使用脚本操作es一般是由运维人员来进行的</p><h2 id="5-1-RESTful风格介绍"><a href="#5-1-RESTful风格介绍" class="headerlink" title="5.1 RESTful风格介绍"></a>5.1 RESTful风格介绍</h2><ol><li>ST（Representational State Transfer），表述性状态转移，是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful。就是一种定义接口的规范。</li><li>基于HTTP</li><li>参数使用XML格式定义或JSON格式定义</li><li>每一个URI代表1种资源</li><li>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：<ul><li>GET：用来获取资源</li><li>POST：用来新建资源（也可以用于更新资源）</li><li>PUT：用来更新资源</li><li>DELETE：用来删除资源</li></ul></li></ol><h2 id="5-2-操作索引"><a href="#5-2-操作索引" class="headerlink" title="5.2 操作索引"></a>5.2 操作索引</h2><ol><li><p><strong>添加索引</strong></p><p>添加goods_index索引，使用put请求(这里不是post，稍微注意下)，我这里是用postman操作的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">200.129</span>:<span class="hljs-number">9200</span>/goods_index<br></code></pre></td></tr></table></figure><p>操作成功后会看到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;goods_index&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>查询索引</strong></p><p>使用get请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET http:<span class="hljs-regexp">//i</span>p:端口/索引名称  <span class="hljs-comment"># 查询单个索引信息</span><br>GET http:<span class="hljs-regexp">//i</span>p:端口/索引名称<span class="hljs-number">1</span>,索引名称<span class="hljs-number">2</span>  <span class="hljs-comment"># 查询多个索引信息</span><br>GET http:<span class="hljs-regexp">//i</span>p:端口/_all  <span class="hljs-comment"># 查询所有索引信息</span><br></code></pre></td></tr></table></figure></li><li><p><strong>删除索引</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">DELETE http:<span class="hljs-regexp">//i</span>p:端口/索引名称<br></code></pre></td></tr></table></figure></li><li><p><strong>关闭及打开索引</strong></p><p>关闭是为了不想删除索引库，但是同时又不想让别人访问到，所以选择关闭。关闭之后不能往里面添加数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST http:<span class="hljs-regexp">//i</span>p:端口<span class="hljs-regexp">/索引名称/</span>_close  <br>POST http:<span class="hljs-regexp">//i</span>p:端口<span class="hljs-regexp">/索引名称/</span>_open <br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-ES数据类型"><a href="#5-3-ES数据类型" class="headerlink" title="5.3 ES数据类型"></a>5.3 ES数据类型</h2><ol><li><p><strong>简单数据类型</strong></p><ul><li><p>字符串</p><p>text：会分词，不支持聚合（聚合相当于mysql中的求和）</p><p>keyword：不会分词，将全部内容作为一个词条，支持聚合</p></li><li><p>数值</p></li><li><p>布尔</p><p>boolean</p></li><li><p>二进制</p><p>binary</p></li><li><p>范围类型</p><p>integer_range, float_range, long_range, double_range, date_range </p></li></ul></li><li><p><strong>复杂数据类型</strong></p><ul><li>数组：[ ] </li><li>对象：{ } </li></ul></li></ol><h2 id="5-4-操作映射"><a href="#5-4-操作映射" class="headerlink" title="5.4 操作映射"></a>5.4 操作映射</h2><p>下面的操作都是基于kibana的</p><ol><li><p><strong>添加映射</strong></p><p>先创建一个person索引</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">PUT person</span><br></code></pre></td></tr></table></figure><p>给索引添加映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /person/_mapping<br>&#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>:&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>:&#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;age&quot;</span>:&#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>或者用另外一种方法直接在创建索引的同时创建好映射关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">#创建索引并添加映射<br>PUT /person1<br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>查询映射</strong></p><p>注意</p><ul><li>只用在kibana中写上查询方式以及映射名称就行了，不用写ip和端口啥的，比较方便</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> person1/_mapping<br></code></pre></td></tr></table></figure><p>查询的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;person1&quot;</span> : &#123;# 索引名称<br>    <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;# 映射<br>      <span class="hljs-attr">&quot;properties&quot;</span> : &#123;  # 映射的属性<br>        <span class="hljs-attr">&quot;age&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;integer&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;name&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>添加字段</strong></p><p>要是添加的是映射本来就有的，会报错，要是没有就直接添加。注意，对映射关系的修改中是没有直接删除映射的，因为这样容易产生事故</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">#添加字段<br>PUT /person1/_mapping<br>&#123;<br>  <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span><br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-5-操作文档"><a href="#5-5-操作文档" class="headerlink" title="5.5 操作文档"></a>5.5 操作文档</h2><ol><li><p><strong>添加文档以及查询文档</strong></p><p>添加文档，指定id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person1/_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span><br>&#125;<br><br># 添加完毕进行查询<br>GET /person1/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>  <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;found&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>添加文档，不指定id</p><p>注意：</p><ul><li>稍微注意下如果查特定文档时候的语句以及查所有文档语句的区别</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">#添加文档，不指定id<br>POST /person1/_doc/<br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span><br>&#125;<br><br>#查询所有文档<br>GET /person1/_search<br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">778</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,  # 查询到的文档数量<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person1&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;K5KtC3sBCY0ja69ZDmup&quot;</span>,  # 如果自己不指定文档id，系统会自动分配一个<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;李四&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">20</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;武汉&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>修改文档</strong></p></li><li><p><strong>删除文档</strong></p><p>删除指定文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">#删除指定id文档<br>DELETE /person1/_doc/K5KtC3sBCY0ja69ZDmup<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-分词器"><a href="#6-分词器" class="headerlink" title="6. 分词器"></a>6. 分词器</h1><h2 id="6-1-分词器介绍"><a href="#6-1-分词器介绍" class="headerlink" title="6.1 分词器介绍"></a>6.1 分词器介绍</h2><ul><li>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包</li><li>是一个基于Maven构建的项目</li><li>具有60万字/秒的高速处理能力</li><li>支持用户词典扩展定义</li></ul><p>下载地址（注意选择和es匹配的版本）：<a href="https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip">https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip</a> </p><h2 id="6-2-ik分词器安装"><a href="#6-2-ik分词器安装" class="headerlink" title="6.2 ik分词器安装"></a>6.2 ik分词器安装</h2><h3 id="6-2-1-环境准备"><a href="#6-2-1-环境准备" class="headerlink" title="6.2.1 环境准备"></a>6.2.1 环境准备</h3><p>Elasticsearch 要使用 ik，就要先构建 ik 的 jar包，这里要用到 maven 包管理工具，而 maven 需要java 环境，而 Elasticsearch 内置了jdk， 所以可以将JAVA_HOME设置为Elasticsearch 内置的jdk</p><ol><li><p>设置JAVA_HOME</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/profile<br><span class="hljs-meta">#</span><span class="bash"> 在profile文件末尾添加</span><br><span class="hljs-meta">#</span><span class="bash">java environment</span><br>export JAVA_HOME=/opt/elasticsearch-7.4.0/jdk<br>export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 保存退出后，重新加载profile</span><br>source /etc/profile<br></code></pre></td></tr></table></figure></li><li><p>下载maven安装包</p><p>有的镜像可能不好用，如果失败了就换其他镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://mirror.cc.columbia.edu/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz<br>wget http://maven.aliyun.com/pub/software/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>解压maven安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xzf apache-maven-3.1.1-bin.tar.gz <br></code></pre></td></tr></table></figure></li><li><p>设置软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s apache-maven-3.1.1 maven <br></code></pre></td></tr></table></figure></li><li><p>设置path</p><p>打开文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim  /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure><p>将下面的内容复制到文件，保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export MAVEN_HOME=/opt/maven  <br>export PATH=$&#123;MAVEN_HOME&#125;/bin:$&#123;PATH&#125; <br></code></pre></td></tr></table></figure><p>设置好Maven的路径之后，需要运行下面的命令使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure></li><li><p>验证maven是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn -v<br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2-2-安装IK分词器"><a href="#6-2-2-安装IK分词器" class="headerlink" title="6.2.2 安装IK分词器"></a>6.2.2 安装IK分词器</h3><ol><li><p>下载IK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/medcl/elasticsearch-analysis-ik/archive/v7.4.0.zip<br></code></pre></td></tr></table></figure></li><li><p>解压IK</p><p>由于这里是zip包不是gz包，所以我们需要使用unzip命令进行解压，如果本机环境没有安装unzip，请执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install zip <br>yum install unzip<br></code></pre></td></tr></table></figure><p>解压IK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">unzip v7.4.0.zip<br></code></pre></td></tr></table></figure></li><li><p>编译jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 切换到 elasticsearch-analysis-ik-7.4.0目录</span><br>cd elasticsearch-analysis-ik-7.4.0/<br><span class="hljs-meta">#</span><span class="bash">打包</span><br>mvn package  #这里用阿里云的镜像弄，改一下配置就行了<br></code></pre></td></tr></table></figure></li><li><p> jar包移动</p></li></ol><p>   package执行完毕后会在当前目录下生成target/releases目录，将其中的elasticsearch-analysis-ik-7.4.0.zip。拷贝到elasticsearch目录下的新建的目录plugins/analysis-ik，并解压</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">切换目录</span><br>cd /opt/elasticsearch-7.4.0/plugins/<br><span class="hljs-meta">#</span><span class="bash">新建目录</span><br>mkdir analysis-ik<br>cd analysis-ik<br><span class="hljs-meta">#</span><span class="bash">执行拷贝</span><br>cp -R /opt/elasticsearch-analysis-ik-7.4.0/target/releases/elasticsearch-analysis-ik-7.4.0.zip      /opt/elasticsearch-7.4.0/plugins/analysis-ik<br><span class="hljs-meta">#</span><span class="bash">执行解压</span><br>unzip  /opt/elasticsearch-7.4.0/plugins/analysis-ik/elasticsearch-analysis-ik-7.4.0.zip<br></code></pre></td></tr></table></figure><ol start="5"><li><p>拷贝辞典</p><p>将elasticsearch-analysis-ik-7.4.0目录下的config目录中的所有文件 拷贝到elasticsearch的config目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -R /opt/elasticsearch-analysis-ik-7.4.0/config/*   /opt/elasticsearch-7.4.0/config<br></code></pre></td></tr></table></figure></li></ol><p>最后记得重启es才能生效</p><h2 id="6-3-ik分词器使用"><a href="#6-3-ik分词器使用" class="headerlink" title="6.3 ik分词器使用"></a>6.3 ik分词器使用</h2><p>IK分词器有两种分词模式：ik_max_word和ik_smart模式。</p><ol><li><p><strong>ik_max_word</strong></p><p>会将文本做最细粒度的拆分，比如会将“乒乓球明年总冠军”拆分为“乒乓球、乒乓、球、明年、总冠军、冠军。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#方式一ik_max_word<br>GET /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_max_word分词器执行如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_CHAR&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">3</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">4</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">5</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>ik_smart</strong></p><p>会做最粗粒度的拆分，比如会将“乒乓球明年总冠军”拆分为乒乓球、明年、总冠军。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">#方式二ik_smart<br>GET /_analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;乒乓球明年总冠军&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ik_smart分词器执行如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;乒乓球&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;明年&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;总冠军&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-4-使用IK分词器-查询文档"><a href="#6-4-使用IK分词器-查询文档" class="headerlink" title="6.4 使用IK分词器-查询文档"></a>6.4 使用IK分词器-查询文档</h2><ul><li><p>词条查询：term</p><p>词条查询不会分析查询条件，只有当词条和查询字符串完全匹配时才匹配搜索</p></li><li><p>全文查询：match</p><p>全文查询会分析查询条件，先将查询条件进行分词，然后查询，求并集</p></li></ul><p><strong>分词案例</strong></p><ol><li><p>创建索引，添加映射，并指定分词器为ik分词器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT person2<br>&#123;<br>  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">POST /person2/_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京海淀区&quot;</span><br>&#125;<br><br>POST /person2/_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京朝阳区&quot;</span><br>&#125;<br><br>POST /person2/_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;王五&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京昌平区&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查询映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET person2<br></code></pre></td></tr></table></figure><p>查询结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;person2&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;aliases&quot;</span> : &#123; &#125;,<br>    <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;properties&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;address&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-attr">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;ik_max_word&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;age&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;long&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;name&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;settings&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;index&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;creation_date&quot;</span> : <span class="hljs-string">&quot;1627990806608&quot;</span>,<br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;uuid&quot;</span> : <span class="hljs-string">&quot;fVX6890BS1a2WBqeFtVqoA&quot;</span>,<br>        <span class="hljs-attr">&quot;version&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;created&quot;</span> : <span class="hljs-string">&quot;7040099&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;provided_name&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查看分词效果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;北京海淀&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;北京&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;京海&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;海淀&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;CN_WORD&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分词器查询</p><p>5.1 词条查询（term）</p><p>查询person2中匹配到”北京”两字的词条</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person2/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;北京昌平&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询结果</p><p>可以看见并没有查到，因为分词的时候并没有一个叫做“北京昌平”的token, 所以按照term匹配的时候并没有搜索出地址为北京昌平区的那个文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [ ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>5.2 全文查询 (match)</p><p>全文查询会分析查询条件，先将查询条件进行分词，然后查询，求并集</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /person2/_search<br>&#123;<br>  <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京昌平&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">22</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.1505673</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.1505673</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;王五&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京昌平区&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.13786995</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;李四&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京朝阳区&quot;</span><br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;person2&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.12562492</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;张三&quot;</span>,<br>          <span class="hljs-attr">&quot;age&quot;</span> : <span class="hljs-number">18</span>,<br>          <span class="hljs-attr">&quot;address&quot;</span> : <span class="hljs-string">&quot;北京海淀区&quot;</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="7-ElasticSearch-JavaApi"><a href="#7-ElasticSearch-JavaApi" class="headerlink" title="7. ElasticSearch JavaApi"></a>7. ElasticSearch JavaApi</h1><p>开发人员一般使用这部分知识比较多。一般是操作文档，对于索引和映射一般都是通过脚本提前创建好了的</p><h2 id="7-1-SpringBoot整合ES"><a href="#7-1-SpringBoot整合ES" class="headerlink" title="7.1 SpringBoot整合ES"></a>7.1 SpringBoot整合ES</h2><ol><li><p>搭建SpringBoot工程</p></li><li><p>引入ElasticSearch相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入es的坐标--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置es的yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">elasticsearch:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.129</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9200</span><br></code></pre></td></tr></table></figure></li><li><p>配置ES客户端的测试类，用于获得es的客户端对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix=&quot;elasticsearch&quot;)</span> <span class="hljs-comment">//读取配置文件中前缀为elasticsearch的属性值，并在程序启动的时候自动将这些属性注入到这个配置类中对应的成员变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchConfig</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHost</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHost</span><span class="hljs-params">(String host)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> port;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.port = port;<br>    &#125;<br>    <span class="hljs-comment">//创建es客户端对象</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">client</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(<br>                <span class="hljs-keyword">new</span> HttpHost(host,port,<span class="hljs-string">&quot;http&quot;</span>)<br>        ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在测试类中测试是否能注入RestHighLevelClient 对象</p><p>如果能打印出对象的信息说明整个过程是成功的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchApplicationTests</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestHighLevelClient client;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(client);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-2-操作索引"><a href="#7-2-操作索引" class="headerlink" title="7.2 操作索引"></a>7.2 操作索引</h2><h3 id="7-2-1-添加索引"><a href="#7-2-1-添加索引" class="headerlink" title="7.2.1 添加索引"></a>7.2.1 添加索引</h3><ol><li><p>添加索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加索引</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1.使用client获取操作索引对象</span><br>IndicesClient indices = client.indices();<br>   <br><span class="hljs-comment">//2.具体操作获取返回值</span><br><span class="hljs-comment">//2.1 设置索引名称</span><br>CreateIndexRequest createIndexRequest=<span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;itheima1&quot;</span>);<br>CreateIndexResponse createIndexResponse = indices.create(createIndexRequest, RequestOptions.DEFAULT);<br>   <br><span class="hljs-comment">//3.根据返回值判断结果</span><br>System.out.println(createIndexResponse.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加索引，并添加映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加索引，并添加映射</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addIndexAndMapping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">//1.使用client获取操作索引对象</span><br>IndicesClient indices = client.indices();<br><span class="hljs-comment">//2.具体操作获取返回值</span><br><span class="hljs-comment">//2.具体操作，获取返回值</span><br>CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>);<br><span class="hljs-comment">//2.1 设置mappings</span><br>String mapping = <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br><span class="hljs-string">&quot;      \&quot;properties\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;address\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;text\&quot;,\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;analyzer\&quot; : \&quot;ik_max_word\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;age\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;long\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;,\n&quot;</span> +<br><span class="hljs-string">&quot;        \&quot;name\&quot; : &#123;\n&quot;</span> +<br><span class="hljs-string">&quot;          \&quot;type\&quot; : \&quot;keyword\&quot;\n&quot;</span> +<br><span class="hljs-string">&quot;        &#125;\n&quot;</span> +<br><span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br><span class="hljs-string">&quot;    &#125;&quot;</span>;<br>createIndexRequest.mapping(mapping, XContentType.JSON);<br><br>CreateIndexResponse createIndexResponse = indices.create(createIndexRequest, RequestOptions.DEFAULT);<br><span class="hljs-comment">//3.根据返回值判断结果</span><br>System.out.println(createIndexResponse.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-2-2-查询、删除、判断索引"><a href="#7-2-2-查询、删除、判断索引" class="headerlink" title="7.2.2 查询、删除、判断索引"></a>7.2.2 查询、删除、判断索引</h3><p>查询索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br><br>GetIndexRequest getRequest=<span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;itcast&quot;</span>);<br>GetIndexResponse response = indices.get(getRequest, RequestOptions.DEFAULT);<br>Map&lt;String, MappingMetaData&gt; mappings = response.getMappings();<br><span class="hljs-comment">//iter 提示foreach</span><br><span class="hljs-keyword">for</span> (String key : mappings.keySet()) &#123;<br>System.out.println(key+<span class="hljs-string">&quot;===&quot;</span>+mappings.get(key).getSourceAsMap());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除索引</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br>DeleteIndexRequest deleteRequest=<span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;itheima&quot;</span>);<br>AcknowledgedResponse delete = indices.delete(deleteRequest, RequestOptions.DEFAULT);<br>System.out.println(delete.isAcknowledged());<br>&#125;<br></code></pre></td></tr></table></figure><p>判断索引是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 索引是否存在</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">existIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>IndicesClient indices = client.indices();<br><br>GetIndexRequest getIndexRequest=<span class="hljs-keyword">new</span> GetIndexRequest(<span class="hljs-string">&quot;itheima&quot;</span>);<br><span class="hljs-keyword">boolean</span> exists = indices.exists(getIndexRequest, RequestOptions.DEFAULT);<br><br>System.out.println(exists);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-3-操作文档"><a href="#7-3-操作文档" class="headerlink" title="7.3 操作文档"></a>7.3 操作文档</h2><h3 id="7-3-1-添加文档"><a href="#7-3-1-添加文档" class="headerlink" title="7.3.1 添加文档"></a>7.3.1 添加文档</h3><ol><li><p>添加文档,使用map作为数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Map&lt;String, Object&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br>map.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;北京二环&quot;</span>);<br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(<span class="hljs-string">&quot;1&quot;</span>).source(map);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加文档,使用对象作为数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addDoc2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Person person=<span class="hljs-keyword">new</span> Person();<br>person.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>person.setAge(<span class="hljs-number">20</span>);<br>person.setAddress(<span class="hljs-string">&quot;北京三环&quot;</span>);<br>String data = JSON.toJSONString(person);<br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(person.getId()).source(data,XContentType.JSON);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-3-2-修改、查询、删除文档"><a href="#7-3-2-修改、查询、删除文档" class="headerlink" title="7.3.2 修改、查询、删除文档"></a>7.3.2 修改、查询、删除文档</h3><ol><li><p>修改文档：添加文档时，如果id存在则修改，id不存在则添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>Person person=<span class="hljs-keyword">new</span> Person();<br>person.setId(<span class="hljs-string">&quot;2&quot;</span>);<br>person.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>person.setAge(<span class="hljs-number">20</span>);<br>person.setAddress(<span class="hljs-string">&quot;北京三环车王&quot;</span>);<br>   <br>String data = JSON.toJSONString(person);<br>   <br>IndexRequest request=<span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;itcast1&quot;</span>).id(person.getId()).source(data,XContentType.JSON);<br>IndexResponse response = client.index(request, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据id查询文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id查询文档</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>   <br>    <span class="hljs-comment">//设置查询的索引、文档</span><br>    GetRequest indexRequest=<span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;itcast&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br>   <br>    GetResponse response = client.get(indexRequest, RequestOptions.DEFAULT);<br>    System.out.println(response.getSourceAsString());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>根据id删除文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id删除文档</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>   <br><span class="hljs-comment">//设置要删除的索引、文档</span><br>DeleteRequest deleteRequest=<span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;itcast&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>   <br>DeleteResponse response = client.delete(deleteRequest, RequestOptions.DEFAULT);<br>System.out.println(response.getId());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hystrix</title>
    <link href="/2021/08/01/4.%20Hystrix%20%E7%86%94%E6%96%AD%E5%99%A8/"/>
    <url>/2021/08/01/4.%20Hystrix%20%E7%86%94%E6%96%AD%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Hystrix-概述"><a href="#1-Hystrix-概述" class="headerlink" title="1. Hystrix 概述"></a>1. <strong>Hystrix</strong> 概述</h1><ul><li>Hystix 是 Netflix 开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败（雪崩: 一个服务失败，导致整条链路的服务都失败的情形）。</li></ul><p>Hystix 主要功能</p><ol><li>隔离<ol><li>线程池隔离 （对要请求的微服务设置可使用的线程数，这样不会导致一个微服务占用所有线程）</li><li>信号量隔离</li></ol></li><li>降级 （对异常提供降级方案，出现异常了就调用降级方案）</li><li>熔断</li><li>限流</li></ol><h2 id="1-1-Hystrix-降级"><a href="#1-1-Hystrix-降级" class="headerlink" title="1.1 Hystrix 降级"></a>1.1 <strong>Hystrix</strong> <strong>降级</strong></h2><p>Hystix 降级：当服务发生异常或调用超时，返回默认数据</p><p><img src="/images/image-20210801232052828.png" alt="image-20210801232052828"></p><h3 id="1-1-1-服务提供方"><a href="#1-1-1-服务提供方" class="headerlink" title="1.1.1 服务提供方"></a>1.1.1 服务提供方</h3><ol><li><p>在服务提供方，引入hystrix依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- hystrix --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在服务提供方的启动类上开启hystrix功能<code>@EnableCircuitBreaker</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span> <span class="hljs-comment">//该注解 在新版本中可以省略</span><br><span class="hljs-meta">@SpringBootApplication</span><br><br><span class="hljs-meta">@EnableCircuitBreaker</span> <span class="hljs-comment">// 开启Hystrix功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProviderApp</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ProviderApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对要被消费者调用的方法定义降级方法</p><p>注意： </p><ul><li>使用注解<code>@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;)</code>指定降级方法</li><li>定义降级方法注意事项<ul><li>方法的返回值需要和原方法一样</li><li>方法的参数需要和原方法一样</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Goods Controller 服务提供方</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GoodsService goodsService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 降级：</span><br><span class="hljs-comment">     *  1. 出现异常</span><br><span class="hljs-comment">     *  2. 服务调用超时</span><br><span class="hljs-comment">     *      * 默认1s超时</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *  <span class="hljs-doctag">@HystrixCommand</span>(fallbackMethod = &quot;findOne_fallback&quot;)</span><br><span class="hljs-comment">     *      fallbackMethod：指定降级后调用的方法名称</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-meta">@GetMapping(&quot;/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">            //设置Hystrix的超时时间，默认1s</span><br><span class="hljs-meta">            @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    &#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>        <span class="hljs-comment">//1.造个异常</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2. 休眠2秒</span><br>            Thread.sleep(<span class="hljs-number">2000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        Goods goods = goodsService.findOne(id);<br><br>        goods.setTitle(goods.getTitle() + <span class="hljs-string">&quot;:&quot;</span> + port);<span class="hljs-comment">//将端口号，设置到了 商品标题上</span><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义降级方法：</span><br><span class="hljs-comment">     *  1. 方法的返回值需要和原方法一样</span><br><span class="hljs-comment">     *  2. 方法的参数需要和原方法一样</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne_fallback</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        Goods goods = <span class="hljs-keyword">new</span> Goods();<br>        goods.setTitle(<span class="hljs-string">&quot;降级了~~~&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="1-1-2-服务消费方"><a href="#1-1-2-服务消费方" class="headerlink" title="1.1.2 服务消费方"></a>1.1.2 服务消费方</h3><ol><li><p>因为feign组件中已经集成了hystrix组件，所以hytrix的依赖就不用导入了</p></li><li><p>配置yml文件，开启feign对hystrix的支持</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 开启feign对hystrix的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>定义feign 调用接口实现类，复写方法，即 降级方法</p><p>注意：</p><ul><li>降级类要实现<code>GoodsFeignClient</code>接口</li><li>记得将这个降级类放到spring容器中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Feign 客户端的降级处理类</span><br><span class="hljs-comment"> * 1. 定义类 实现 Feign 客户端接口</span><br><span class="hljs-comment"> * 2. 使用<span class="hljs-doctag">@Component</span>注解将该类的Bean加入SpringIOC容器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsFeignClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        Goods goods = <span class="hljs-keyword">new</span> Goods();<br>        goods.setTitle(<span class="hljs-string">&quot;又被降级了~~~&quot;</span>);<br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在 @FeignClient 注解中使用 fallback 属性设置刚编写的降级处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;HYSTRIX-PROVIDER&quot;,fallback = GoodsFeignClientFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-Hystrix熔断"><a href="#1-2-Hystrix熔断" class="headerlink" title="1.2 Hystrix熔断"></a>1.2 Hystrix熔断</h2><p>Hystrix 熔断机制，用于监控微服务调用情况，当失败的情况达到预定的阈值（5秒失败20次），会打开断路器，拒绝所有请求（全都降级），直到服务恢复正常为止。</p><p>断路器状态改变图：</p><p>连续调用服务方的方法出现异常或连接超时导致服务降级时，若达到预定的阈值，断路器打开，此时无论请求是否正常都会提供降级方法给消费方。等到默认开启时间结束，断路器会转变为半开状态，这时会放过来一个请求，如果调用成功，断路器关闭；反之断路器会再次打开。</p><p><img src="/images/image-20210802212254669.png" alt="image-20210802212254669"></p><p>在1.1配置hystrix时，已经有了默认参数的熔断机制，不需要自己额外编写代码。</p><p>在服务提供方的方法上可以改变熔断机制的一些默认参数</p><p>到时候如果要改的话，参照下面<code>@HystrixProperty</code>注解代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findOne/&#123;id&#125;&quot;)</span><br><span class="hljs-meta">@HystrixCommand(fallbackMethod = &quot;findOne_fallback&quot;,commandProperties = &#123;</span><br><span class="hljs-meta">        //设置Hystrix的超时时间，默认1s</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;),</span><br><span class="hljs-meta">        //监控时间 默认5000 毫秒</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;5000&quot;),</span><br><span class="hljs-meta">        //失败次数。默认20次</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;20&quot;),</span><br><span class="hljs-meta">        //失败率 默认50%</span><br><span class="hljs-meta">        @HystrixProperty(name=&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;50&quot;)</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>    <span class="hljs-comment">//如果id == 1 ，则出现异常，id != 1 则正常访问</span><br>    <span class="hljs-keyword">if</span>(id == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-comment">//1.造个异常</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>/<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*try &#123;</span><br><span class="hljs-comment">        //2. 休眠2秒</span><br><span class="hljs-comment">        Thread.sleep(2000);</span><br><span class="hljs-comment">    &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">        e.printStackTrace();</span><br><span class="hljs-comment">    &#125;*/</span><br>    Goods goods = goodsService.findOne(id);<br><br>    goods.setTitle(goods.getTitle() + <span class="hljs-string">&quot;:&quot;</span> + port);<span class="hljs-comment">//将端口号，设置到了 商品标题上</span><br>    <span class="hljs-keyword">return</span> goods;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3-hystrix熔断监控"><a href="#1-3-hystrix熔断监控" class="headerlink" title="1.3 hystrix熔断监控"></a>1.3 hystrix熔断监控</h2><ul><li><p>Hystrix 提供了 Hystrix-dashboard 功能，用于实时监控微服务运行状态。</p></li><li><p>但是Hystrix-dashboard只能监控一个微服务。</p></li><li><p>Netflix 还提供了 Turbine ，进行聚合监控。</p></li></ul><p>这部分不详细展开了，需要用的时候去查对应博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Feign声明式服务调用</title>
    <link href="/2021/08/01/3.%20Feign/"/>
    <url>/2021/08/01/3.%20Feign/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Feign-概述"><a href="#1-Feign-概述" class="headerlink" title="1. Feign 概述"></a>1. Feign 概述</h1><ul><li>Feign 是一个声明式的 REST 客户端，它用了基于接口的注解方式，很方便实现客户端配置。是简化了 RestTemplate+Ribbon 一个组件</li><li>Feign 最初由 Netflix 公司提供，但不支持SpringMVC注解，后由 SpringCloud 对其封装，支持了SpringMVC注解，让使用者更易于接受。</li></ul><h1 id="2-Feign-快速入门"><a href="#2-Feign-快速入门" class="headerlink" title="2. Feign 快速入门"></a>2. <strong>Feign</strong> <strong>快速入门</strong></h1><p>基础的环境搭好了，主要研究feign的部分。如果想要了解完整过程可以查看本地笔记</p><ol><li><p>在消费端引入 open-feign 依赖 (消费端指的是 Service Consumer)</p><p><img src="/images/image-20210801205806595.png" alt="image-20210801205806595"></p><p><img src="/images/image-20210801211807913.png" alt="image-20210801211807913"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--feign--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写Feign接口调用</p><p>创建包feign用于存放GoodsFeignClient接口</p><p><img src="/images/image-20210801212031590.png" alt="image-20210801212031590"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * feign声明式接口。发起远程调用的。</span><br><span class="hljs-comment"> * 代替了 RestTemplate+Ribbon 的下面两行代码</span><br><span class="hljs-comment"> * String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span><br><span class="hljs-comment"> * Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 定义接口</span><br><span class="hljs-comment"> * 2. 接口上添加注解 <span class="hljs-doctag">@FeignClient</span>,设置value属性为 服务提供者的 应用名称</span><br><span class="hljs-comment"> * 3. 编写调用接口，接口的声明规则 和 提供方接口保持一致。</span><br><span class="hljs-comment"> * 4. 注入该接口对象，调用接口方法完成远程调用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@FeignClient(value = &quot;FEIGN-PROVIDER&quot;)</span>  <span class="hljs-comment">//这里的value是provider在注册中心的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsFeignClient</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在controller类中注入刚定义好的接口，在需要使用其他微服务的地方调用接口中相应的方法</p><p>这里就是在order微服务中调用了goods微服务的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> GoodsFeignClient goodsFeignClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/goods/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span><br><span class="hljs-comment">        // 3. 调用方法</span><br><span class="hljs-comment">        Goods goods = restTemplate.getForObject(url, Goods.class);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        return goods;*/</span><br><br>        Goods goods = goodsFeignClient.findGoodsById(id);<br><br>        <span class="hljs-keyword">return</span> goods;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在启动类 添加 @EnableFeignClients 注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">// 激活DiscoveryClient</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//开启Feign的功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerApp</span> </span>&#123;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ConsumerApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试调用</p><p>输入服务消费方的对应url调用服务提供方的方法</p></li></ol><h1 id="3-Feign-其他功能"><a href="#3-Feign-其他功能" class="headerlink" title="3. Feign 其他功能"></a>3. <strong>Feign</strong> <strong>其他功能</strong></h1><h2 id="3-1-超时设置"><a href="#3-1-超时设置" class="headerlink" title="3.1 超时设置"></a>3.1 超时设置</h2><ul><li><p>Feign 底层依赖于 Ribbon 实现负载均衡和远程调用。</p></li><li><p>Ribbon默认1秒超时。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 设置Ribbon的超时时间</span><br><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">1000</span> <span class="hljs-comment"># 连接超时时间 默认1s</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">3000</span> <span class="hljs-comment"># 逻辑处理的超时时间 默认1s</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-2-日志记录"><a href="#3-2-日志记录" class="headerlink" title="3.2 日志记录"></a>3.2 日志记录</h2><ul><li>Feign 只能记录 debug 级别的日志信息</li></ul><p>具体用法先不掌握，需要时去搜相应博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2021/07/30/2.%20RabbitMQ/"/>
    <url>/2021/07/30/2.%20RabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1. 消息中间件概述"></a>1. 消息中间件概述</h1><h2 id="1-1-什么是消息中间件"><a href="#1-1-什么是消息中间件" class="headerlink" title="1.1 什么是消息中间件"></a>1.1 什么是消息中间件</h2><p>MQ全称为Message Queue（消息队列），消息队列在分布式系统开发中应用非常广泛</p><p>消息队列是应用程序和应用程序之间的通信方法</p><ul><li><p>使用MQ的原因</p><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行<strong>异步处理</strong>，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而<strong>提高</strong>了<strong>系统</strong>的<strong>吞吐量</strong></p></li><li><p>开发中消息队列通常有如下应用场景：</p><ol><li><p>任务<strong>异步</strong>处理</p><p>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间</p></li><li><p>应用程序<strong>解耦合</strong></p><p>生产方通过MQ与消费方交互，它将应用程序进行解耦合</p></li><li><p><strong>削峰填谷</strong></p><p>如订单系统，在下单的时候就会往数据库写数据。但是数据库只能支撑每秒1000左右的并发写入，并发量再高就容易宕机。低峰期的时候并发也就100多个，但是在高峰期时候，并发量会突然激增到5000以上，这个时候数据库肯定卡死了。</p><p>如果使用MQ, 消息被MQ保存起来了，然后系统就可以按照自己的消费能力来消费，比如每秒1000个数据，这样慢慢写入数据库，这样就不会卡死数据库了。</p><p><img src="/images/image-20210730231412854.png" alt="image-20210730231412854"></p><p>但是使用了MQ之后，限制消费消息的速度为1000，但是这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了。但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000QPS，直到消费完积压的消息,这就叫做“填谷”</p><img src="/images/image-20210730231500453.png"  style="zoom:80%;" /></li></ol></li></ul><h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2 AMQP 和 JMS"></a>1.2 AMQP 和 JMS</h2><p>实现MQ的大致有两种主流方式：AMQP、JMS</p><ul><li>AMQP（Advanced Message Queue 高级消息队列协议）是一种协议, 直接定义网络交换的数据格式, 不规定实现方式，是跨语言的</li><li>JMS即Java消息服务（JavaMessage Service）是应用程序接口, 必须使用Java语言</li></ul><p>基于这两种方式的消息队列产品</p><ul><li>ActiveMQ：基于JMS</li><li>ZeroMQ：基于C语言开发</li><li><strong>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</strong></li><li>RocketMQ：基于JMS，阿里巴巴产品</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量</li></ul><h2 id="1-3-RabbitMQ"><a href="#1-3-RabbitMQ" class="headerlink" title="1.3 RabbitMQ"></a>1.3 RabbitMQ</h2><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了7种模式：简单模式，work模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式，Publisher Confirms（远程调用，不太算MQ，暂不作介绍, 用到再去查博客；Publisher Confirms也暂不介绍，有需要再查博客）</p><h1 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2. 安装及配置RabbitMQ"></a>2. 安装及配置RabbitMQ</h1><ol><li><p>在线安装依赖环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz<br></code></pre></td></tr></table></figure></li><li><p>安装Erlang</p><p>首先需要下载一个 <code>erlang-18.3-1.el7.centos.x86_64.rpm </code>文件 (版本根据网上的推荐来选，这个可能有点旧了)，然后进行安装 </p><p>注意：</p><ul><li>这个过程可能会报错，到时候根据错误查看本地文档或者上网查找相关博客来解决</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>安装RabbitMQ</p><p>需要提前把<code>socat-1.7.3.2-5.el7.lux.x86_64.rpm</code>, <code>rabbitmq-server-3.6.5-1.noarch.rpm</code>给下载好。（建议这三个rpm文件下载在一个命名为rabbitmq的文件夹。这里的版本根据需要选择）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装</span><br>rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm<br></code></pre></td></tr></table></figure><p>到这里就安装完成了</p></li><li><p>然后开启管理界面及配置</p><p>注意：</p><ul><li>第一步如果想要开启管理界面是必须操作的</li><li>第二步如果信息保持默认的话也可以不改，如果需要改相关信息，去网上搜相关博客</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 开启管理界面</span><br>rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management<br><span class="hljs-comment"># 修改默认配置信息, 比如修改密码、配置等等</span><br>vim /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin/rabbit.app <br></code></pre></td></tr></table></figure></li><li><p>启动和关闭</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">service rabbitmq-server start <span class="hljs-comment"># 启动服务</span><br>service rabbitmq-server stop <span class="hljs-comment"># 停止服务</span><br>service rabbitmq-server restart <span class="hljs-comment"># 重启服务</span><br></code></pre></td></tr></table></figure></li></ol><p>RabbitMQ在配置好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码</p><p><img src="/images/image-20210730234122057.png" alt="image-20210730234122057"></p><p>(关于配置虚拟主机和用户这里的知识就先不介绍，需要的话去网上查询详细博客)</p><h1 id="3-AMQP"><a href="#3-AMQP" class="headerlink" title="3. AMQP"></a>3. AMQP</h1><h2 id="3-1-相关概念介绍"><a href="#3-1-相关概念介绍" class="headerlink" title="3.1. 相关概念介绍"></a>3.1. 相关概念介绍</h2><p>AMQP  一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>连接Connection</td><td>一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td>会话Session</td><td>端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td>信道Channel</td><td>多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td>客户端Client</td><td>AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td>服务节点Broker</td><td>消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td>端点</td><td>AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td>消费者Consumer</td><td>一个从消息队列里请求消息的客户端程序。</td></tr><tr><td>生产者Producer</td><td>一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="3-2-RabbitMQ运转流程"><a href="#3-2-RabbitMQ运转流程" class="headerlink" title="3.2 RabbitMQ运转流程"></a>3.2 RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li><p>生产者发送消息</p><ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li><p>消费者接收消息</p><ol><li><p>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</p></li><li><p>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</p></li><li><p>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</p></li><li><p>确认（ack，自动确认）接收到的消息；</p></li><li><p>RabbitMQ从队列中删除相应已经被确认的消息；</p></li><li><p>关闭信道；</p></li><li><p>关闭连接；</p><p><img src="/images/image-20210731135723102.png" alt="image-20210731135723102"></p></li></ol></li></ul><h1 id="4-RabbitMQ入门"><a href="#4-RabbitMQ入门" class="headerlink" title="4. RabbitMQ入门"></a>4. RabbitMQ入门</h1><h2 id="4-1-HelloWorld简单模式"><a href="#4-1-HelloWorld简单模式" class="headerlink" title="4.1 HelloWorld简单模式"></a>4.1 HelloWorld简单模式</h2><p>这个入门工程就是一个<strong>简单模式 HelloWorld</strong></p><ol><li><p>创建工程</p></li><li><p>向pom.xml文件中添加依赖</p><p>注意：</p><ul><li><p>有可能报这个错，如果报了的话再加第二个包</p><p><img src="/images/image-20210730235828100-1627661205170.png" alt="image-20210730235828100"></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-nop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>   <br></code></pre></td></tr></table></figure></li><li><p>编写生产者Producer</p><p>注意：</p><ul><li><p>这里的虚拟主机名称不能乱设置，不然可能会报错，rabbitmq默认的是<code>\</code></p><p><img src="/images/image-20210731000917757.png" alt="image-20210731000917757"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;simple_queue&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//主机地址;默认为 localhost</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.200.128&quot;</span>);<br>        <span class="hljs-comment">//连接端口;默认为 5672</span><br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//虚拟主机名称;默认为 /</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//连接用户名；默认为guest</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-comment">//连接密码；默认为guest</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = connectionFactory.newConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">// 要发送的信息</span><br>        String message = <span class="hljs-string">&quot;你好；小兔子！&quot;</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息</p></li></ol><p><img src="/images/image-20210731001205411.png" alt="image-20210731001205411"></p><ol start="4"><li><p>编写消费者</p><p>由于连接部分都是相同的操作，我们把它抽取成工具类ConnectionUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionUtil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        <span class="hljs-comment">//创建连接工厂</span><br>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();<br>        <span class="hljs-comment">//主机地址;默认为 localhost</span><br>        connectionFactory.setHost(<span class="hljs-string">&quot;192.168.200.128&quot;</span>);<br>        <span class="hljs-comment">//连接端口;默认为 5672</span><br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);<br>        <span class="hljs-comment">//虚拟主机名称;默认为 /</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//连接用户名；默认为guest</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);<br>        <span class="hljs-comment">//连接密码；默认为guest</span><br>        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> connectionFactory.newConnection();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写消息的消费者Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, consumer);<br><br>        <span class="hljs-comment">//不关闭资源，应该一直监听消息</span><br>        <span class="hljs-comment">//channel.close();</span><br>        <span class="hljs-comment">//connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>小结</strong>  </p><p>上述的入门案例中中其实使用的是如下的简单模式：</p><p><img src="/images/image-20210731002649177.png" alt="image-20210731002649177"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h2 id="4-2-Work-queues工作队列模式"><a href="#4-2-Work-queues工作队列模式" class="headerlink" title="4.2 Work queues工作队列模式"></a>4.2 Work queues工作队列模式</h2><p>模式说明</p><p><img src="/images/image-20210731133440033.png" alt="image-20210731133440033"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><strong>应用场景</strong>：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。(多安排几个消费者去消费生产者的消息)</p><p>代码和简单模式几乎一样，除了要多一个或几个消费者（基础环境和简单模式相同，这里就不赘叙了）：</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_NAME = <span class="hljs-string">&quot;work_queue&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span> ; i++) &#123;<br>            <span class="hljs-comment">//发送信息</span><br>            String message = <span class="hljs-string">&quot;你好；小兔子！work模式--&quot;</span> + i;<br><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">             * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">             * 参数3：消息其它属性</span><br><span class="hljs-comment">             * 参数4：消息内容</span><br><span class="hljs-comment">             */</span><br>            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-keyword">null</span>, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br>        <span class="hljs-comment">// 创建频道</span><br>       <span class="hljs-keyword">final</span> Channel channel = connection.createChannel();<br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//一次只能接收并处理一个消息</span><br>        channel.basicQos(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//路由key</span><br>                    System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                    <span class="hljs-comment">//交换机</span><br>                    System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                    <span class="hljs-comment">//消息id</span><br>                    System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                    <span class="hljs-comment">//收到的消息</span><br>                    System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br><br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>                    <span class="hljs-comment">//确认消息, 这里确认是因为下面没有设置消息自动确认</span><br>                    channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">false</span>, consumer);<br><br>        <span class="hljs-comment">//不关闭资源，应该一直监听消息</span><br>        <span class="hljs-comment">//channel.close();</span><br>        <span class="hljs-comment">//connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        <span class="hljs-keyword">final</span> Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.QUEUE_NAME, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//一次只能接收并处理一个消息</span><br>        channel.basicQos(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//路由key</span><br>                    System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                    <span class="hljs-comment">//交换机</span><br>                    System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                    <span class="hljs-comment">//消息id</span><br>                    System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                    <span class="hljs-comment">//收到的消息</span><br>                    System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br><br>                    <span class="hljs-comment">//确认消息</span><br>                    channel.basicAck(envelope.getDeliveryTag(), <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.QUEUE_NAME, <span class="hljs-keyword">false</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息</p><p><img src="/images/image-20210731225717102.png" alt="image-20210731225717102"></p><p><img src="/images/image-20210731225747964.png" alt="image-20210731225747964"></p></li></ol><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<strong>竞争</strong>的关系</p><h2 id="4-3-Publish-Subscribe发布与订阅模式"><a href="#4-3-Publish-Subscribe发布与订阅模式" class="headerlink" title="4.3 Publish/Subscribe发布与订阅模式"></a>4.3 Publish/Subscribe发布与订阅模式</h2><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列</li></ul><p>而在Publish/Subscribe模型中，多了一个exchange角色，而且过程略有变化：</p><p><img src="/images/image-20210731230311829-1627743833934.png" alt="image-20210731230311829"></p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><p>Publish/Subscribe模式：</p><ol><li>每个消费者监听自己的队列。</li><li>生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</li></ol><p>代码：</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发布与订阅使用的交换机类型为：fanout</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_EXCHAGE = <span class="hljs-string">&quot;fanout_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_QUEUE_1 = <span class="hljs-string">&quot;fanout_queue_1&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_QUEUE_2 = <span class="hljs-string">&quot;fanout_queue_2&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.queueDeclare(FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(FANOUT_QUEUE_1, FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br>        channel.queueBind(FANOUT_QUEUE_2, FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-comment">// 发送信息</span><br>            String message = <span class="hljs-string">&quot;你好；小兔子！发布订阅模式--&quot;</span> + i;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">             * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">             * 参数3：消息其它属性</span><br><span class="hljs-comment">             * 参数4：消息内容</span><br><span class="hljs-comment">             */</span><br>            channel.basicPublish(FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>            System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br>        &#125;<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.FANOUT_QUEUE_1, Producer.FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.FANOUT_QUEUE_1, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.FANOUT_EXCHAGE, BuiltinExchangeType.FANOUT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.FANOUT_QUEUE_2, Producer.FANOUT_EXCHAGE, <span class="hljs-string">&quot;&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.FANOUT_QUEUE_2, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<strong>广播</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="/images/image-20210731232129945.png" alt="image-20210731232129945"></p></li></ol><p>小结：交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><h2 id="4-4-Routing路由模式"><a href="#4-4-Routing路由模式" class="headerlink" title="4.4. Routing路由模式"></a>4.4. Routing路由模式</h2><p><strong>模式说明</strong></p><p>路由模式特点：</p><ul><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</p><p><img src="/images/image-20210731232559366.png" alt="image-20210731232559366"></p></li></ul><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><p><strong>代码演示</strong></p><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 路由模式的交换机类型为：direct</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_EXCHAGE = <span class="hljs-string">&quot;direct_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_QUEUE_INSERT = <span class="hljs-string">&quot;direct_queue_insert&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DIRECT_QUEUE_UPDATE = <span class="hljs-string">&quot;direct_queue_update&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、direct、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br>        channel.queueDeclare(DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(DIRECT_QUEUE_INSERT, DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>);<br>        channel.queueBind(DIRECT_QUEUE_UPDATE, DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        String message = <span class="hljs-string">&quot;新增了商品。路由模式；routing key 为 insert &quot;</span> ;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;修改了商品。路由模式；routing key 为 update&quot;</span> ;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：交换机名称，如果没有指定则使用默认Default Exchage</span><br><span class="hljs-comment">         * 参数2：路由key,简单模式可以传递队列名称</span><br><span class="hljs-comment">         * 参数3：消息其它属性</span><br><span class="hljs-comment">         * 参数4：消息内容</span><br><span class="hljs-comment">         */</span><br>        channel.basicPublish(DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.DIRECT_QUEUE_INSERT, Producer.DIRECT_EXCHAGE, <span class="hljs-string">&quot;insert&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.DIRECT_QUEUE_INSERT, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.DIRECT_EXCHAGE, BuiltinExchangeType.DIRECT);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.DIRECT_QUEUE_UPDATE, Producer.DIRECT_EXCHAGE, <span class="hljs-string">&quot;update&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.DIRECT_QUEUE_UPDATE, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="/images/image-20210731233707317.png" alt="image-20210731233707317"></p></li></ol><p>小结：Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列</p><h2 id="4-5-Topics通配符模式"><a href="#4-5-Topics通配符模式" class="headerlink" title="4.5 Topics通配符模式"></a>4.5 Topics通配符模式</h2><p><strong>模式说明</strong></p><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<strong>使用通配符</strong>。</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><ul><li><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></li><li><code>item.*</code>：只能匹配<code>item.insert</code></li></ul><p><img src="/images/image-20210731234158546.png" alt="image-20210731234158546"></p><p><strong>代码</strong> </p><ol><li> 生产者</li></ol><p>   本例使用topic类型的Exchange，发送消息的routing key有3种： <code>item.insert</code>、<code>item.update</code>、<code>item.delete</code></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通配符Topic的交换机类型为：topic</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> </span>&#123;<br><br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_EXCHAGE = <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_1 = <span class="hljs-string">&quot;topic_queue_1&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE_2 = <span class="hljs-string">&quot;topic_queue_2&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">//创建连接</span><br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 声明交换机</span><br><span class="hljs-comment">         * 参数1：交换机名称</span><br><span class="hljs-comment">         * 参数2：交换机类型，fanout、topic、topic、headers</span><br><span class="hljs-comment">         */</span><br>        channel.exchangeDeclare(TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br><br>        <span class="hljs-comment">// 发送信息</span><br>        String message = <span class="hljs-string">&quot;新增了商品。Topic模式；routing key 为 item.insert &quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.insert&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;修改了商品。Topic模式；routing key 为 item.update&quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.update&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 发送信息</span><br>        message = <span class="hljs-string">&quot;删除了商品。Topic模式；routing key 为 item.delete&quot;</span> ;<br>        channel.basicPublish(TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.delete&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());<br>        System.out.println(<span class="hljs-string">&quot;已发送消息：&quot;</span> + message);<br><br>        <span class="hljs-comment">// 关闭资源</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>消费者1</p><p>接收两种类型的消息：更新商品和删除商品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.update&quot;</span>);<br>        channel.queueBind(Producer.TOPIC_QUEUE_1, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.delete&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者1-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.TOPIC_QUEUE_1, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Connection connection = ConnectionUtil.getConnection();<br><br>        <span class="hljs-comment">// 创建频道</span><br>        Channel channel = connection.createChannel();<br><br>        <span class="hljs-comment">//声明交换机</span><br>        channel.exchangeDeclare(Producer.TOPIC_EXCHAGE, BuiltinExchangeType.TOPIC);<br><br>        <span class="hljs-comment">// 声明（创建）队列</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否定义持久化队列</span><br><span class="hljs-comment">         * 参数3：是否独占本次连接</span><br><span class="hljs-comment">         * 参数4：是否在不使用的时候自动删除队列</span><br><span class="hljs-comment">         * 参数5：队列其它参数</span><br><span class="hljs-comment">         */</span><br>        channel.queueDeclare(Producer.TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//队列绑定交换机</span><br>        channel.queueBind(Producer.TOPIC_QUEUE_2, Producer.TOPIC_EXCHAGE, <span class="hljs-string">&quot;item.*&quot;</span>);<br><br>        <span class="hljs-comment">//创建消费者；并设置消息处理</span><br>        DefaultConsumer consumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel)&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * consumerTag 消息者标签，在channel.basicConsume时候可以指定</span><br><span class="hljs-comment">             * envelope 消息包的内容，可从中获取消息id，消息routingkey，交换机，消息和重传标志(收到消息失败后是否需要重新发送)</span><br><span class="hljs-comment">             * properties 属性信息</span><br><span class="hljs-comment">             * body 消息</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//路由key</span><br>                System.out.println(<span class="hljs-string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());<br>                <span class="hljs-comment">//交换机</span><br>                System.out.println(<span class="hljs-string">&quot;交换机为：&quot;</span> + envelope.getExchange());<br>                <span class="hljs-comment">//消息id</span><br>                System.out.println(<span class="hljs-string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());<br>                <span class="hljs-comment">//收到的消息</span><br>                System.out.println(<span class="hljs-string">&quot;消费者2-接收到的消息为：&quot;</span> + <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>));<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">//监听消息</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：队列名称</span><br><span class="hljs-comment">         * 参数2：是否自动确认，设置为true为表示消息接收到自动向mq回复接收到了，mq接收到回复会删除消息，设置为false则需要手动确认</span><br><span class="hljs-comment">         * 参数3：消息接收到后回调</span><br><span class="hljs-comment">         */</span><br>        channel.basicConsume(Producer.TOPIC_QUEUE_2, <span class="hljs-keyword">true</span>, consumer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<strong>按照需要接收</strong>的效果；并且这些routing key可以使用通配符。</p></li></ol><p>小结：</p><ul><li>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code> Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</li></ul><h2 id="4-6-模式总结"><a href="#4-6-模式总结" class="headerlink" title="4.6. 模式总结"></a>4.6. 模式总结</h2><p>RabbitMQ工作模式：<br><strong>1、简单模式 HelloWorld</strong><br>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue</strong><br>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe</strong><br>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><strong>4、路由模式 Routing</strong><br>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic</strong><br>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="5-Spring-Boot整合RabbitMQ"><a href="#5-Spring-Boot整合RabbitMQ" class="headerlink" title="5. Spring Boot整合RabbitMQ"></a>5. Spring Boot整合RabbitMQ</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><p>在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p>一般在开发过程中：</p><ul><li><strong>生产者工程：</strong><ol><li>application.yml文件配置RabbitMQ相关信息；</li><li>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</li><li>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</li></ol></li><li><strong>消费者工程：</strong><ol><li>application.yml文件配置RabbitMQ相关信息</li><li>创建消息处理类，用于接收队列中的消息并进行处理</li></ol></li></ul><h2 id="5-2-搭建生产者工程"><a href="#5-2-搭建生产者工程" class="headerlink" title="5.2 搭建生产者工程"></a>5.2 搭建生产者工程</h2><h3 id="5-2-1-搭建生产者工程"><a href="#5-2-1-搭建生产者工程" class="headerlink" title="5.2.1 搭建生产者工程"></a>5.2.1 搭建生产者工程</h3><p>创建生产者工程springboot-rabbitmq-producer</p><h3 id="5-2-2-添加依赖"><a href="#5-2-2-添加依赖" class="headerlink" title="5.2.2 添加依赖"></a>5.2.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-rabbitmq-producer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--主要就是这个包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-3-启动类"><a href="#5-2-3-启动类" class="headerlink" title="5.2.3. 启动类"></a>5.2.3. 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProducerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ProducerApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-4-配置RabbitMQ"><a href="#5-2-4-配置RabbitMQ" class="headerlink" title="5.2.4. 配置RabbitMQ"></a>5.2.4. 配置RabbitMQ</h3><ol><li><p>配置文件</p><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure></li><li><p>绑定交换机和队列</p><p>创建RabbitMQ队列与交换机绑定的配置类com.itheima.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="hljs-string">&quot;item_topic_exchange&quot;</span>;<br>    <span class="hljs-comment">//队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ITEM_QUEUE = <span class="hljs-string">&quot;item_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(&quot;itemTopicExchange&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">topicExchange</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(&quot;itemQueue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">itemQueue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();<br>    &#125;<br><br>    <span class="hljs-comment">//绑定队列和交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">itemQueueExchange</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     <span class="hljs-meta">@Qualifier(&quot;itemTopicExchange&quot;)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;item.#&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-3-搭建消费者工程"><a href="#5-3-搭建消费者工程" class="headerlink" title="5.3. 搭建消费者工程"></a>5.3. 搭建消费者工程</h2><h3 id="5-3-1-创建工程"><a href="#5-3-1-创建工程" class="headerlink" title="5.3.1. 创建工程"></a>5.3.1. 创建工程</h3><p>创建消费者工程springboot-rabbitmq-consumer</p><h3 id="5-3-2-添加依赖"><a href="#5-3-2-添加依赖" class="headerlink" title="5.3.2. 添加依赖"></a>5.3.2. 添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.itheima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-rabbitmq-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--只用添加这个和消息中间件RabbitMQ有关的包--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-3-配置RabbitMQ"><a href="#5-3-3-配置RabbitMQ" class="headerlink" title="5.3.3 配置RabbitMQ"></a>5.3.3 配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><p>注意：</p><ul><li>消费者和生产者的配置文件是一样的</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span><br></code></pre></td></tr></table></figure><h3 id="5-3-4-启动类"><a href="#5-3-4-启动类" class="headerlink" title="5.3.4 启动类"></a>5.3.4 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConsumerApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(ConsumerApplication.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-5-消息监听处理类"><a href="#5-3-5-消息监听处理类" class="headerlink" title="5.3.5 消息监听处理类"></a>5.3.5 消息监听处理类</h3><p>编写消息监听器com.itheima.rabbitmq.listener.MyListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyListener</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 监听某个队列的消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 接收到的消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;item_queue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myListener1</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;消费者接收到的消息为：&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后进行测试</p><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.insert&quot;</span>, <span class="hljs-string">&quot;商品新增，routing key 为item.insert&quot;</span>);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.update&quot;</span>, <span class="hljs-string">&quot;商品修改，routing key 为item.update&quot;</span>);<br>        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE, <span class="hljs-string">&quot;item.delete&quot;</span>, <span class="hljs-string">&quot;商品删除，routing key 为item.delete&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>1.3</title>
    <link href="/2021/07/28/1.3%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/28/1.3%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第二部分</title>
    <link href="/2021/07/27/1.2%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/27/1.2%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part07-商品搜索"><a href="#Part07-商品搜索" class="headerlink" title="Part07 商品搜索"></a>Part07 商品搜索</h1><h2 id="1-根据关键字查询"><a href="#1-根据关键字查询" class="headerlink" title="1. 根据关键字查询"></a>1. 根据关键字查询</h2><ol><li><p>changgou_service_search项目创建SearchService接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SearchService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全文检索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> searchMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//他的实现类会抛异常，所以接口里也需要抛出异常</span><br>    <span class="hljs-function">Map <span class="hljs-title">search</span><span class="hljs-params">(Map&lt;String, String&gt; searchMap)</span> <span class="hljs-keyword">throws</span> Exception</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_search项目创建SearchService接口实现类SearchServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SearchService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate esTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">search</span><span class="hljs-params">(Map&lt;String, String&gt; searchMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Map&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-comment">//有条件才查询Es</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != searchMap) &#123;<br>            <span class="hljs-comment">//组合条件对象</span><br>            BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();<br>            <span class="hljs-comment">//0:关键词</span><br>            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(searchMap.get(<span class="hljs-string">&quot;keywords&quot;</span>))) &#123;<br>                boolQuery.must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, searchMap.get(<span class="hljs-string">&quot;keywords&quot;</span>)).operator(Operator.AND));<br><br>            &#125;<br><br>            <span class="hljs-comment">//4. 原生搜索实现类</span><br>            NativeSearchQueryBuilder nativeSearchQueryBuilder = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder();<br>            nativeSearchQueryBuilder.withQuery(boolQuery);<br><br>            <span class="hljs-comment">//10: 执行查询, 返回结果对象</span><br>            AggregatedPage&lt;SkuInfo&gt; aggregatedPage = esTemplate.queryForPage(nativeSearchQueryBuilder.build(), SkuInfo.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse searchResponse, Class&lt;T&gt; aClass, Pageable pageable)</span> </span>&#123;<br><br>                    List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>                    SearchHits hits = searchResponse.getHits();<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != hits) &#123;<br>                        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                            SkuInfo skuInfo = JSON.parseObject(hit.getSourceAsString(), SkuInfo.class);<br><br>                            list.add((T) skuInfo);<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;T&gt;(list, pageable, hits.getTotalHits(), searchResponse.getAggregations());<br>                &#125;<br>            &#125;);<br><br>            <span class="hljs-comment">//11. 总条数</span><br>            resultMap.put(<span class="hljs-string">&quot;total&quot;</span>, aggregatedPage.getTotalElements());<br>            <span class="hljs-comment">//12. 总页数</span><br>            resultMap.put(<span class="hljs-string">&quot;totalPages&quot;</span>, aggregatedPage.getTotalPages());<br>            <span class="hljs-comment">//13. 查询结果集合</span><br>            resultMap.put(<span class="hljs-string">&quot;rows&quot;</span>, aggregatedPage.getContent());<br><br>            <span class="hljs-keyword">return</span> resultMap;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_search项目创建SearchController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku_search&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SearchService searchService;<br><br>    <span class="hljs-comment">//对搜索入参带有特殊符号进行处理</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handlerSearchMap</span><span class="hljs-params">(Map&lt;String,String&gt; searchMap)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> != searchMap)&#123;<br>            Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = searchMap.entrySet();<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;<br>                <span class="hljs-keyword">if</span>(entry.getKey().startsWith(<span class="hljs-string">&quot;spec_&quot;</span>))&#123;<br>                    searchMap.put(entry.getKey(),entry.getValue().replace(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;%2B&quot;</span>));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 全文检索</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; paramMap)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//特殊符号处理</span><br>        handlerSearchMap(paramMap);<br>        Map resultMap = searchService.search(paramMap);<br>        <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>使用postmain访问 <a href="http://localhost:9009/sku_search?keywords=%E6%89%8B%E6%9C%BA">http://localhost:9009/sku_search?keywords=手机</a></p><p>虽然查询出9000多条结果，但是默认只显示10条数据</p><p><img src="/images/image-20210804195339008.png" alt="image-20210804195339008"></p></li></ol><h2 id="2-条件筛选"><a href="#2-条件筛选" class="headerlink" title="2 条件筛选"></a>2 条件筛选</h2><p><img src="/images/image-20210804195611466.png" alt="image-20210804195611466"></p><p>用户有可能会根据分类搜索、品牌搜索，还有可能根据规格搜索，以及价格搜索和排序操作。根据分类和品牌搜索的时候，可以直接根据指定域搜索，而规格搜索的域数据是不确定的，价格是一个区间搜索，所以我们可以分为三段实现，先实现分类、品牌搜素，再实现规格搜索，然后实现价格区间搜索。</p><h3 id="2-1-品牌筛选"><a href="#2-1-品牌筛选" class="headerlink" title="2.1 品牌筛选"></a>2.1 品牌筛选</h3><h4 id="2-1-1-需求分析"><a href="#2-1-1-需求分析" class="headerlink" title="2.1.1 需求分析"></a>2.1.1 需求分析</h4><p>页面每次向后台传入对应的分类和品牌，后台据分类和品牌进行条件过滤即可。</p><h4 id="2-1-2-代码实现"><a href="#2-1-2-代码实现" class="headerlink" title="2.1.2 代码实现"></a>2.1.2 代码实现</h4><p>修改搜索微服务com.changgou.service.SearchServiceImpl的搜索方法，添加品牌过滤</p><p>增加品牌筛选部分 (后面增加部分也都用序号来表示先后顺序) 的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1:条件 品牌</span><br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(searchMap.get(<span class="hljs-string">&quot;brand&quot;</span>))) &#123;<br>    <span class="hljs-comment">//按照品牌进行过滤查询。这里的brandName是索引库中的一个域值，不是随便写的名字</span><br>    boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;brandName&quot;</span>, searchMap.get(<span class="hljs-string">&quot;brand&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-3-测试"><a href="#2-1-3-测试" class="headerlink" title="2.1.3 测试"></a>2.1.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA">http://localhost:9009/sku_search?keywords=手机&amp;brand=华为</a></p><p>结果如下：</p><p>可以看到比第一次的数据少了几千条</p><p><img src="/images/image-20210804201208277.png" alt="image-20210804201208277"></p><h3 id="2-2-规格过滤"><a href="#2-2-规格过滤" class="headerlink" title="2.2 规格过滤"></a>2.2 规格过滤</h3><h4 id="2-2-1-需求分析"><a href="#2-2-1-需求分析" class="headerlink" title="2.2.1 需求分析"></a>2.2.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628079276433.png" alt="image-20210804195611466"></p><p>规格这一部分，需要向后台发送规格名字以及规格值，我们可以按照一定要求来发送数据，例如规格名字以特殊前缀提交到后台：<code>spec_网络制式：电信4G、spec_显示屏尺寸：4.0-4.9英寸</code></p><p>后台接到数据后，可以根据前缀spec_来区分是否是规格，如果以<code>spec_xxx</code>开始的数据则为规格数据，需要根据指定规格找信息。</p><p><img src="/images/image-20210804201759706.png" alt="image-20210804201759706"></p><p>上图是规格的索引存储格式，真实数据在spechMap.规格名字.keyword（这个是规格的域）中，所以找数据也是按照如下格式去找：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">spechMap.规格名字.<span class="hljs-keyword">keyword</span><br></code></pre></td></tr></table></figure><h4 id="2-2-2-代码实现"><a href="#2-2-2-代码实现" class="headerlink" title="2.2.2 代码实现"></a>2.2.2 代码实现</h4><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加规格查询操作</p><p>增加部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2:条件 规格</span><br><span class="hljs-keyword">for</span> (String key : searchMap.keySet()) &#123;<br>    <span class="hljs-keyword">if</span> (key.startsWith(<span class="hljs-string">&quot;spec_&quot;</span>)) &#123;<br>        <span class="hljs-comment">//发送请求的路径会涉及到编码和解码，如果不设置下面这一步，传递过来的路径就是错误的</span><br>        String value = searchMap.get(key).replace(<span class="hljs-string">&quot;%2B&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>);<br>        boolQuery.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;specMap.&quot;</span> + key.substring(<span class="hljs-number">5</span>) + <span class="hljs-string">&quot;.keyword&quot;</span>,value));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-测试"><a href="#2-2-3-测试" class="headerlink" title="2.2.3 测试"></a>2.2.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E7%94%B5%E8%A7%86&amp;spec_%E5%B0%BA%E5%AF%B8=%E9%87%91%E8%89%B2">http://localhost:9009/sku_search?keywords=电视&amp;spec_尺寸=金色</a></p><p><img src="/images/image-20210804211201850.png" alt="image-20210804211201850"></p><h3 id="2-3-聚合（分组）查询"><a href="#2-3-聚合（分组）查询" class="headerlink" title="2.3 聚合（分组）查询"></a>2.3 聚合（分组）查询</h3><h4 id="2-3-1-需求分析"><a href="#2-3-1-需求分析" class="headerlink" title="2.3.1 需求分析"></a>2.3.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628083462378.png" alt="image-20210804195611466"></p><p>根据查询的结果返回一个brandList给前端，用于更新品牌展示和规格展示</p><h4 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h4><p>1）品牌聚合</p><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加品牌聚合操作</p><p>增加的代码部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//6. 品牌聚合(分组)查询</span><br>String skuBrand = <span class="hljs-string">&quot;skuBrand&quot;</span>;<br><span class="hljs-comment">// terms(skuBrand)设置分组查询之后的列名为skuBrand， field(&quot;brandName&quot;)当前要来操作的分组域</span><br>nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms(skuBrand).field(<span class="hljs-string">&quot;brandName&quot;</span>));<br><br><span class="hljs-comment">//14. 获取品牌聚合结果</span><br>StringTerms brandTerms = (StringTerms) aggregatedPage.getAggregation(skuBrand);<br><span class="hljs-comment">//流运算，比原始for循环效率高很多</span><br>List&lt;String&gt; brandList = brandTerms.getBuckets().stream().map(bucket -&gt; bucket.getKeyAsString()).collect(Collectors.toList());<br>resultMap.put(<span class="hljs-string">&quot;brandList&quot;</span>, brandList);<br></code></pre></td></tr></table></figure><p>2）规格聚合</p><p>修改com.changgou.service.SearchServiceImpl的搜索方法，增加规格聚合操作</p><p>增加的代码部分如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7. 规格聚合(分组)查询</span><br>String skuSpec = <span class="hljs-string">&quot;skuSpec&quot;</span>;<br>nativeSearchQueryBuilder.addAggregation(AggregationBuilders.terms(skuSpec).field(<span class="hljs-string">&quot;spec.keyword&quot;</span>));<br><br><span class="hljs-comment">//15. 获取规格聚合结果</span><br>StringTerms specTerms = (StringTerms) aggregatedPage.getAggregation(skuSpec);<br>List&lt;String&gt; specList = specTerms.getBuckets().stream().map(bucket -&gt; bucket.getKeyAsString()).collect(Collectors.toList());<br>resultMap.put(<span class="hljs-string">&quot;specList&quot;</span>, specList);<br><br><span class="hljs-keyword">return</span> resultMap;<br></code></pre></td></tr></table></figure><h4 id="2-3-3-测试"><a href="#2-3-3-测试" class="headerlink" title="2.3.3 测试"></a>2.3.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?keywords=%E7%94%B5%E8%A7%86">http://localhost:9009/sku_search?keywords=电视</a></p><p>可以看到结果多出来一个brandList</p><p><img src="/images/image-20210804212744912.png" alt="image-20210804212744912"></p><p>访问地址：<a href="http://localhost:9009/sku_search?spec_%E5%B0%BA%E5%AF%B8=%E9%87%91%E8%89%B2">http://localhost:9009/sku_search?spec_尺寸=金色</a></p><p>可以看到结果多出来一个specList</p><p><img src="/images/image-20210804213513056.png" alt="image-20210804213513056"></p><h3 id="2-4-价格区间查询"><a href="#2-4-价格区间查询" class="headerlink" title="2.4 价格区间查询"></a>2.4 价格区间查询</h3><h4 id="2-4-1-需求分析"><a href="#2-4-1-需求分析" class="headerlink" title="2.4.1 需求分析"></a>2.4.1 需求分析</h4><p><img src="/images/image-20210804195611466-1628083462378.png" alt="image-20210804195611466"></p><p>价格区间查询，每次需要将价格传入到后台，前端传入后台的价格大概是<code>price=0-500</code>或者<code>price=500-1000</code>依次类推，最后一个是<code>price=3000</code>,后台可以根据-分割，如果分割得到的结果最多有2个，第1个表示<code>x&lt;price</code>，第2个表示<code>price&lt;=y</code>。</p><h4 id="2-4-2-代码实现"><a href="#2-4-2-代码实现" class="headerlink" title="2.4.2 代码实现"></a>2.4.2 代码实现</h4><p>修改com.changgou.service.impl.SearchServiceImpl的搜索方法，增加价格区间查询操作</p><p>增加的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3:条件 价格</span><br><span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(searchMap.get(<span class="hljs-string">&quot;price&quot;</span>))) &#123;<br>    String[] p = searchMap.get(<span class="hljs-string">&quot;price&quot;</span>).split(<span class="hljs-string">&quot;-&quot;</span>);<br>    <span class="hljs-keyword">if</span> (p.length == <span class="hljs-number">2</span>) &#123;<br>        boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(p[<span class="hljs-number">1</span>]));<br>    &#125;  boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(p[<span class="hljs-number">0</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-3-测试"><a href="#2-4-3-测试" class="headerlink" title="2.4.3 测试"></a>2.4.3 测试</h4><p>访问地址：<a href="http://localhost:9009/sku_search?price=0-500">http://localhost:9009/sku_search?price=0-500</a></p><p>可以看到价格均在这个区间</p><p><img src="/images/image-20210804220238483.png" alt="image-20210804220238483"></p><h2 id="3-搜索分页"><a href="#3-搜索分页" class="headerlink" title="3. 搜索分页"></a>3. 搜索分页</h2><h3 id="3-1-分页分析"><a href="#3-1-分页分析" class="headerlink" title="3.1 分页分析"></a>3.1 分页分析</h3><p><img src="/images/image-20210804230948101.png" alt="image-20210804230948101"></p><p>页面需要实现分页搜索，所以我们后台每次查询的时候，需要实现分页。用户页面每次会传入当前页和每页查询多少条数据，当然如果不传入每页显示多少条数据，默认查询30条即可。</p><p>前端需要传递过来两个参数，分别是当前页数和每页传递多少条数据</p><h3 id="3-2-分页实现"><a href="#3-2-分页实现" class="headerlink" title="3.2 分页实现"></a>3.2 分页实现</h3><p>分页使用PageRequest.of( pageNo- 1, pageSize);实现，第1个参数表示第N页，从0开始，第2个参数表示每页显示多少条</p><p>增加的部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//9: 分页</span><br>String pageNum = searchMap.get(<span class="hljs-string">&quot;pageNum&quot;</span>); <span class="hljs-comment">//当前页</span><br>String pageSize = searchMap.get(<span class="hljs-string">&quot;pageSize&quot;</span>); <span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-comment">//如果前端没有传递，进行默认值设置</span><br><span class="hljs-keyword">if</span> (StringUtils.isEmpty(pageNum)) &#123;<br>    pageNum = <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(StringUtils.isEmpty(pageSize))&#123;<br>    pageSize = <span class="hljs-string">&quot;30&quot;</span>;<br>&#125;<br>nativeSearchQueryBuilder.withPageable(PageRequest.of(Integer.parseInt(pageNum) - <span class="hljs-number">1</span>, Integer.parseInt(pageSize)));<br><br><span class="hljs-comment">//16. 返回当前页</span><br>resultMap.put(<span class="hljs-string">&quot;pageNum&quot;</span>, pageNum);<br></code></pre></td></tr></table></figure><p>测试地址：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=20">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=20</a></p><p>可以看到总页数不再是1了，其实翻到最下面可以看到当前页为1，但是图片中就不放出来了</p><p><img src="/images/image-20210804232503168.png" alt="image-20210804232503168"></p><h2 id="4-搜索排序"><a href="#4-搜索排序" class="headerlink" title="4. 搜索排序"></a>4. 搜索排序</h2><h3 id="4-1-排序分析"><a href="#4-1-排序分析" class="headerlink" title="4.1 排序分析"></a>4.1 排序分析</h3><p><img src="/images/image-20210804232701584.png" alt="image-20210804232701584"></p><p>排序这里总共有根据价格排序、根据评价排序、根据新品排序、根据销量排序，排序要想实现非常简单，只需要告知排序的域以及排序方式即可实现。</p><p>价格排序：只需要根据价格高低排序即可，降序价格高-&gt;低，升序价格低-&gt;高</p><p>评价排序：评价分为好评、中评、差评，可以在数据库中设计3个列，用来记录好评、中评、差评的量，每次排序的时候，好评的比例来排序，当然还要有条数限制，评价条数需要超过N条。</p><p>新品排序：直接根据商品的发布时间或者更新时间排序。</p><p>销量排序：销量排序除了销售数量外，还应该要有时间段限制。</p><h3 id="4-2-排序实现"><a href="#4-2-排序实现" class="headerlink" title="4.2 排序实现"></a>4.2 排序实现</h3><p>这里我们不单独针对某个功能实现排序，我们只需要在后台接收2个参数，分别是排序域名字和排序方式</p><p>增加部分的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//8: 排序</span><br><span class="hljs-keyword">if</span> (!StringUtils.isEmpty(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>))) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ASC&quot;</span>.equals(searchMap.get(<span class="hljs-string">&quot;sortRule&quot;</span>))) &#123;<br>        nativeSearchQueryBuilder.withSort(SortBuilders.fieldSort(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>)).order(SortOrder.ASC));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        nativeSearchQueryBuilder.withSort(SortBuilders.fieldSort(searchMap.get(<span class="hljs-string">&quot;sortField&quot;</span>)).order(SortOrder.DESC));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC</a></p><p>按照价格降序排序，每页显示1000条数据</p><h2 id="5-高亮显示"><a href="#5-高亮显示" class="headerlink" title="5. 高亮显示"></a>5. 高亮显示</h2><h3 id="5-1-高亮分析"><a href="#5-1-高亮分析" class="headerlink" title="5.1 高亮分析"></a>5.1 高亮分析</h3><p><img src="/images/image-20210804233916692.png" alt="image-20210804233916692"></p><p>高亮显示是指根据商品关键字搜索商品的时候，显示的页面对关键字给定了特殊样式，让它显示更加突出，如上图商品搜索中，关键字编程了红色，其实就是给定了红色样式。</p><h3 id="5-2-高亮搜索实现步骤解析"><a href="#5-2-高亮搜索实现步骤解析" class="headerlink" title="5.2 高亮搜索实现步骤解析"></a>5.2 高亮搜索实现步骤解析</h3><p>将之前的搜索换掉，换成高亮搜索，我们需要做3个步骤：</p><ol><li>指定高亮域，也就是设置哪个域需要高亮显示。设置高亮域的时候，需要指定前缀和后缀，也就是关键词用什么html标签包裹，再给该标签</li><li>高亮搜索实现</li><li>将非高亮数据替换成高亮数据</li></ol><p>第1点，例如在百度中搜索数据的时候，会有2个地方高亮显示，分别是标题和描述，商城搜索的时候，只是商品名称高亮显示了。而高亮显示其实就是添加了样式，例如<code>&lt;span style=&quot;color:red;&quot;&gt;笔记本&lt;/span&gt;</code>,而其中span开始标签可以称为前缀，span结束标签可以称为后缀。</p><p>第2点，高亮搜索使用ElasticsearchTemplate实现。</p><p>第3点，高亮搜索后，会搜出非高亮数据和高亮数据，高亮数据会加上第1点中的高亮样式，此时我们需要将非高亮数据换成高亮数据即可。例如非高亮:<code>华为笔记本性能超强悍</code> 高亮数据：<code>华为&lt;span style=&quot;color:red;&quot;笔记本&lt;/span&gt;性能超强悍</code>,将非高亮的换成高亮的，到页面就能显示样式了。</p><h3 id="5-3-高亮代码实现"><a href="#5-3-高亮代码实现" class="headerlink" title="5.3 高亮代码实现"></a>5.3 高亮代码实现</h3><p>删掉之前com.changgou.service.impl.SearchServiceImpl的搜索方法搜索代码，用下面高亮搜索代码替换：</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//5:高亮</span><br>HighlightBuilder.Field field = <span class="hljs-keyword">new</span> HighlightBuilder<br>        .Field(<span class="hljs-string">&quot;name&quot;</span>)<br>        .preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>)<br>        .postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);<br>nativeSearchQueryBuilder.withHighlightFields(field);<br><br><br><span class="hljs-comment">//10: 执行查询, 返回结果对象</span><br>AggregatedPage&lt;SkuInfo&gt; aggregatedPage = esTemplate.queryForPage(nativeSearchQueryBuilder.build(), SkuInfo.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse searchResponse, Class&lt;T&gt; aClass, Pageable pageable)</span> </span>&#123;<br><br>        List&lt;T&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        SearchHits hits = searchResponse.getHits();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != hits) &#123;<br>            <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;<br>                SkuInfo skuInfo = JSON.parseObject(hit.getSourceAsString(), SkuInfo.class);<br>                <span class="hljs-comment">//========设置高亮域==========</span><br>                Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> != highlightFields &amp;&amp; highlightFields.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                    skuInfo.setName(highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>).getFragments()[<span class="hljs-number">0</span>].toString());<br>                &#125;<br>                <span class="hljs-comment">//===========================</span><br>                list.add((T) skuInfo);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;T&gt;(list, pageable, hits.getTotalHits(), searchResponse.getAggregations());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC&amp;keywords=%E7%94%B5%E8%84%91">http://localhost:9009/sku_search?pageNum=1&amp;pageSize=1000&amp;sortField=price&amp;sortOrder=DESC&amp;keywords=电脑</a></p><p>会发现返回结果关键字电脑前后加上了标签，如果是在浏览器上，将会高亮</p><p><img src="/images/image-20210804235641430.png" alt="image-20210804235641430"></p><h1 id="Part08-Thymeleaf"><a href="#Part08-Thymeleaf" class="headerlink" title="Part08 Thymeleaf"></a>Part08 Thymeleaf</h1><h2 id="1-Thymeleaf介绍"><a href="#1-Thymeleaf介绍" class="headerlink" title="1. Thymeleaf介绍"></a>1. Thymeleaf介绍</h2><p>thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。相对于编写逻辑或代码，开发者只需将标签属性添加到模板中即可。接下来，这些标签属性就会在DOM（文档对象模型）上执行预先制定好的逻辑。</p><p>它的特点便是：开箱即用，Thymeleaf允许您处理六种模板，每种模板称为模板模式：</p><ul><li>XML</li><li>有效的XML</li><li>XHTML</li><li>有效的XHTML</li><li>HTML5</li><li>旧版HTML5</li></ul><p>所有这些模式都指的是格式良好的XML文件，但<em>Legacy HTML5</em>模式除外，它允许您处理HTML5文件，其中包含独立（非关闭）标记，没有值的标记属性或不在引号之间写入的标记属性。为了在这种特定模式下处理文件，Thymeleaf将首先执行转换，将您的文件转换为格式良好的XML文件，这些文件仍然是完全有效的HTML5（实际上是创建HTML5代码的推荐方法）<a href="https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html#fn1">1</a>。</p><p>另请注意，验证仅适用于XML和XHTML模板。</p><p>然而，这些并不是Thymeleaf可以处理的唯一模板类型，并且用户始终能够通过指定在此模式下<em>解析</em>模板的方法和<em>编写</em>结果的方式来定义他/她自己的模式。这样，任何可以建模为DOM树（无论是否为XML）的东西都可以被Thymeleaf有效地作为模板处理。</p><h2 id="2-Springboot整合thymeleaf"><a href="#2-Springboot整合thymeleaf" class="headerlink" title="2. Springboot整合thymeleaf"></a>2. Springboot整合thymeleaf</h2><p>使用springboot 来集成使用Thymeleaf可以大大减少单纯使用thymleaf的代码量，所以我们接下来使用springboot集成使用thymeleaf.</p><p>实现的步骤为：</p><ul><li>创建一个sprinboot项目</li><li>添加thymeleaf的起步依赖</li><li>添加spring web的起步依赖</li><li>编写html 使用thymleaf的语法获取变量对应后台传递的值</li><li>编写controller 设置变量的值到model中</li></ul><p>具体代码如下</p><ol><li><p>创建工程，添加pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--web起步依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <br>    <span class="hljs-comment">&lt;!--thymeleaf配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建启动类(我这里的名字起的比较随意)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(TestApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 设置thymeleaf的缓存为false</span><br></code></pre></td></tr></table></figure></li><li><p>创建controller用于测试后台 设置数据到model中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>  <span class="hljs-comment">// 这里是需要跳转到demo.html页面，不是返回数据，所以用的是@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建demo.html到resources.templates包下 （注意templates这个包名是固定的，不能乱写）</p><p>注意：</p><ul><li><code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>这句声明使用thymeleaf标签, 不能忘了</li><li><code>th:text=&quot;$&#123;hello&#125;</code>使用了EL表达式，通过“hello”这个键获取他的值，controller中已经设置了他的值为“hello thymeleaf”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Thymeleaf快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p>访问请求路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805124816251.png" alt="image-20210805124816251"></p></li></ol><h2 id="3-Thymeleaf基本语法"><a href="#3-Thymeleaf基本语法" class="headerlink" title="3. Thymeleaf基本语法"></a>3. Thymeleaf基本语法</h2><h3 id="3-1-提交表单（th-action）"><a href="#3-1-提交表单（th-action）" class="headerlink" title="3.1 提交表单（th:action）"></a>3.1 提交表单（th:action）</h3><p>编写标签</p><p>注意：</p><ul><li><code>@&#123;/test/hello&#125;</code>定义了表单提交路径</li><li><code>th:type=&quot;text&quot;</code>表明这是一个文本框输入标签</li><li><code>th:name=&quot;id&quot;</code>表明文本框的键的名称为id, 记得传递到控制器方法的形参也要定义为id</li><li><code>&lt;button&gt;提交&lt;/button&gt;</code>定义按钮，名称叫提交</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test/hello&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写相应的控制类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model, String id)</span></span>&#123;<br>    System.out.println(id);<br>    model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h3 id="3-2-对象遍历（th-each）"><a href="#3-2-对象遍历（th-each）" class="headerlink" title="3.2 对象遍历（th:each）"></a>3.2 对象遍历（th:each）</h3><p>创建包pojo，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller中添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model, String id)</span></span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;hello thymeleaf&quot;</span>);<br><br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;();<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>));<br>        model.addAttribute(<span class="hljs-string">&quot;users&quot;</span>,users);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写页面标签</p><p>注意：</p><ul><li><code>th:each=&quot;user, userStat:$&#123;users&#125;</code>, th:each表示开启遍历， user表示这个集合中的每一个对象，${users}表示从Model里面拿到的从控制器传递过来的集合，users表示给这个集合取一个集合变量名</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>下标<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>住址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user, users:$&#123;users&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            下标：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h3 id="3-3-遍历Map集合"><a href="#3-3-遍历Map集合" class="headerlink" title="3.3 遍历Map集合"></a>3.3 遍历Map集合</h3><p>Controller中添加map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Object&gt; dataMap = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>dataMap.put(<span class="hljs-string">&quot;No&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>dataMap.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;深圳&quot;</span>);<br>model.addAttribute(<span class="hljs-string">&quot;dataMap&quot;</span>,dataMap);<br></code></pre></td></tr></table></figure><p>编写标签语言</p><p>注意： </p><ul><li><code>th:text=&quot;$&#123;map&#125;&quot;</code>会将键值对以 key=value 的形式呈现在浏览器上</li><li><code>$&#123;mapStat.current.key&#125;</code>获取键和值的时候，中间都带了个current</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;map,mapStat:$&#123;dataMap&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;map&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    key:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;mapStat.current.key&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    value:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;mapStat.current.value&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    ==============================================<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805133846850.png" alt="image-20210805133846850"></p><h3 id="3-4-遍历数组"><a href="#3-4-遍历数组" class="headerlink" title="3.4 遍历数组"></a>3.4 遍历数组</h3><p>Controller中添加数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//存储一个数组</span><br>String[] names = &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;;<br>model.addAttribute(<span class="hljs-string">&quot;names&quot;</span>,names);<br></code></pre></td></tr></table></figure><p>编写标签</p><p>注意：</p><ul><li><code>nmStat.count</code>中的count是从1开始计数的，如果换成<code>nmStat.index</code>则是从0开始计数的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;nm,nmStat:$&#123;names&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;nmStat.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;nm&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    ==============================================<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805134433640.png" alt="image-20210805134433640"></p><h3 id="3-5-Date输出"><a href="#3-5-Date输出" class="headerlink" title="3.5 Date输出"></a>3.5 Date输出</h3><p>后台添加日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期</span><br>model.addAttribute(<span class="hljs-string">&quot;now&quot;</span>,<span class="hljs-keyword">new</span> Date());<br></code></pre></td></tr></table></figure><p>编写标签</p><p>注意：</p><ul><li><code>#dates.format</code>表示调用thymeleaf中的方法</li><li><code>now</code>是从控制器返回过来的键值对中的键</li><li><code>&#39;yyyy-MM-dd hh:ss:mm&#39;</code>设置要显示的日期格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(now,&#x27;yyyy-MM-dd hh:ss:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805135336701.png" alt="image-20210805135336701"></p><h3 id="3-6-条件判断（th-if）"><a href="#3-6-条件判断（th-if）" class="headerlink" title="3.6 条件判断（th:if）"></a>3.6 条件判断（th:if）</h3><p>Controller添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if条件</span><br>model.addAttribute(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><p>编写标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;(age&gt;=18)&#125;&quot;</span>&gt;</span>终于长大了！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><p><img src="/images/image-20210805135716174.png" alt="image-20210805135716174"></p><h3 id="3-7-模块申明与页面包含"><a href="#3-7-模块申明与页面包含" class="headerlink" title="3.7 模块申明与页面包含"></a>3.7 模块申明与页面包含</h3><p>创建一个footer.html代码如下</p><p>注意：</p><ul><li><code>th:fragment=&quot;copy&quot;</code>定义一个copy模块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>fragment<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;C&quot;</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span> &gt;</span><br>    关于我们<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在demo.html中引入模块</p><p>注意：</p><ul><li><code>th:include=&quot;footer::copy&quot;</code>, 表示的是引入footer.html中的被定义为copy的模块</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;A&quot;</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;footer::copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h2 id="4-搜索页面渲染"><a href="#4-搜索页面渲染" class="headerlink" title="4 搜索页面渲染"></a>4 搜索页面渲染</h2><h3 id="4-1-搜索分析"><a href="#4-1-搜索分析" class="headerlink" title="4.1 搜索分析"></a>4.1 搜索分析</h3><p><img src="/images/image-20210805162300670.png" alt="image-20210805162300670"></p><p>搜索页面要显示的内容主要分为3块:</p><ol><li>搜索的数据结果</li><li>筛选出的数据搜索条件</li><li>用户已经勾选的数据条件</li></ol><h3 id="4-2-搜索实现"><a href="#4-2-搜索实现" class="headerlink" title="4.2 搜索实现"></a>4.2 搜索实现</h3><p><img src="/images/image-20210805162446418.png" alt="image-20210805162446418"></p><p>搜索的业务流程如上图，用户每次搜索的时候，先经过搜索业务工程，搜索业务工程调用搜索微服务工程，然后由thymeleaf渲染出静态化页面后返回给客户端</p><h4 id="4-2-1-搜索工程搭建"><a href="#4-2-1-搜索工程搭建" class="headerlink" title="4.2.1 搜索工程搭建"></a>4.2.1 搜索工程搭建</h4><ol><li><p>在changgou-service_search工程中的pom.xml中引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>静态资源导入</p><p>将本地笔记中的html页面复制到工程的resources.templates包下</p><p><img src="/images/image-20210805165043549.png" alt="image-20210805165043549"></p><p>将本地笔记中的资源复制到resources.static包下。（这两个包的名字固定）</p><p><img src="/images/image-20210805165243525.png" alt="image-20210805165243525"></p></li><li><p>更改配置文件,在spring下添加内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 不开启缓存</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="4-2-2-基础数据渲染"><a href="#4-2-2-基础数据渲染" class="headerlink" title="4.2.2 基础数据渲染"></a>4.2.2 基础数据渲染</h4><ol><li><p>更新SearchController,定义跳转搜索结果页面方法</p><p>代码如下</p><p>注意：</p><ul><li>由于这里要返回到页面，必须把类上的@RestController给换成@Controller，并把其他需要返回给前端json串的方法上添加@ResponseBody的注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//搜索页面   http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为&amp;spec_网络制式=移动4G</span><br><span class="hljs-comment">//入参：Map</span><br><span class="hljs-comment">//返回值 Map</span><br><span class="hljs-comment">//由于页面是thymeleaf 完成的 属于服务器内页面渲染 跳转页面</span><br><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Map&lt;String, String&gt; searchMap, Model model)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>   <br>    <span class="hljs-comment">//特殊符号处理，这个方法被单独抽出来了</span><br>    handlerSearchMap(searchMap);<br>   <br>    <span class="hljs-comment">//执行查询返回值</span><br>    Map&lt;String, Object&gt; resultMap = searchService.search(searchMap);<br>   <br>    <span class="hljs-comment">//把药传递的数据以键值对的形式存储在model中</span><br>    model.addAttribute(<span class="hljs-string">&quot;searchMap&quot;</span>, searchMap);<br>    model.addAttribute(<span class="hljs-string">&quot;result&quot;</span>, resultMap);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;search&quot;</span>;  <span class="hljs-comment">//跳转到search.html页面</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发送请求：<a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA&amp;spec_%E7%BD%91%E7%BB%9C%E5%88%B6%E5%BC%8F=%E7%A7%BB%E5%8A%A84G">http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为&amp;spec_网络制式=移动4G</a></p><p><img src="/images/image-20210805170254574.png" alt="image-20210805170254574"></p></li><li><p>搜索结果页面渲染, 根据用户选择条件回显</p><p>(从search.html的465行开始)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bread&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-breadcrumb&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>全部结果<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.keywords&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-tag&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 品牌--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;brand&#x27;)&#125;&quot;</span>&gt;</span><br>            品牌:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.brand&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 价格--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;price&#x27;)&#125;&quot;</span>&gt;</span><br>            价格:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;searchMap.price&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 规格--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;with-x&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;sm:$&#123;searchMap&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;#strings.startsWith(sm.key,&#x27;spec_&#x27;)&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#strings.replace(sm.key,&#x27;spec_&#x27;,&#x27;&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#strings.replace(sm.value,&#x27;%2B&#x27;,&#x27;+&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl sui-form form-dark&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-control control-right&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-icon icon-touch-magnifier&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>根据规格参数是否携带品牌决定是否返回品牌列表</p><p>代码从500行开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- th:unless和 th:<span class="hljs-keyword">if</span> 的逻辑刚好相反，如果这个map里面有brand的话，返回<span class="hljs-keyword">false</span>--&gt;<br>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;type-wrap logo&quot;</span> th:unless=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;brand&#x27;)&#125;&quot;</span>&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;fl key brand&quot;</span>&gt;品牌&lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;value logos&quot;</span>&gt;<br>        &lt;ul <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;logo-list&quot;</span>&gt;<br>            &lt;li th:each=<span class="hljs-string">&quot;brand,brandSate:$&#123;result.brandList&#125;&quot;</span>&gt;<br>                &lt;a th:text=<span class="hljs-string">&quot;$&#123;brand&#125;&quot;</span> th:href=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(brand=$&#123;brand&#125;)&#125;&quot;</span>&gt;&lt;/a&gt;<br>            &lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/div&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;ext&quot;</span>&gt;<br>        &lt;a href=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;sui-btn&quot;</span>&gt;多选&lt;/a&gt;<br>        &lt;a href=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;更多&lt;/a&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>请求路径：<a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA&amp;brand=%E5%8D%8E%E4%B8%BA">http://localhost:9009//sku_search/list?keywords=手机&amp;brand=华为</a></p><p>可以发现，品牌列表在传递的参数有品牌的时候不见了</p><p><img src="/images/image-20210805191635785.png" alt="image-20210805191635785"></p></li><li><p>规格数据格式转换及规格、价格显示</p><p>更新搜索业务层实现，将json字符串集合，转换成需要的map形式</p><p>记得在规格结果聚合那里调用下面这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将json字符串集合，转换成需要的map形式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> specList</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Map&lt;String, Set&lt;String&gt;&gt; formartSpec(List&lt;String&gt; specList)&#123;<br>    Map&lt;String,Set&lt;String&gt;&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (specList!=<span class="hljs-keyword">null</span> &amp;&amp; specList.size()&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">for</span> (String specJsonString : specList) &#123;  <span class="hljs-comment">//&quot;&#123;&#x27;颜色&#x27;: &#x27;黑色&#x27;, &#x27;尺码&#x27;: &#x27;250度&#x27;&#125;&quot;</span><br>            <span class="hljs-comment">//将获取到的json转换为map</span><br>            Map&lt;String,String&gt; specMap = JSON.parseObject(specJsonString, Map.class);<br>            <span class="hljs-keyword">for</span> (String specKey : specMap.keySet()) &#123;<br>                Set&lt;String&gt; specSet = resultMap.get(specKey);<br>                <span class="hljs-keyword">if</span> (specSet == <span class="hljs-keyword">null</span>)&#123;<br>                    specSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br>                &#125;<br>                <span class="hljs-comment">//将规格信息存入set中</span><br>                specSet.add(specMap.get(specKey));<br>                <span class="hljs-comment">//将set存入map</span><br>                resultMap.put(specKey,specSet);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultMap;<br>&#125;<br></code></pre></td></tr></table></figure><p>更新页面与规格相关部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--规格部分--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-wrap&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;spec,specStat:$&#123;result.specList&#125;&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;spec_&#x27;+spec.key)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl key&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;spec.key&#125;&quot;</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl value&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;op,opstat:$&#123;spec.value&#125;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;op&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(&#x27;spec_&#x27;+$&#123;spec.key&#125;=$&#123;op&#125;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl ext&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更新价格相关代码</p><p>531行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--价格部分--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-wrap&quot;</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;#maps.containsKey(searchMap,&#x27;price&#x27;)&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl key&quot;</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl value&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;type-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;0-500元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;0-500&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;500-1000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;500-1000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;1000-1500元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;1000-1500&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;1500-2000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;1500-2000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;2000-3000元&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;2000-3000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;3000元以上&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(price=&#x27;3000&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fl ext&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求路径： <a href="http://localhost:9009//sku_search/list?keywords=%E6%89%8B%E6%9C%BA">http://localhost:9009//sku_search/list?keywords=手机</a></p><p>可以看到品牌，规格，价格都有改动</p><p><img src="/images/image-20210805193700666.png" alt="image-20210805193700666"></p></li><li><p>商品列表</p><p>609行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--商品列表--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;goods-list&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yui3-g&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yui3-u-1-5&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;sku,skuStat:$&#123;result.rows&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-wrap&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p-img&quot;</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--&lt;a th:href=&quot;&#x27;http://192.168.200.128:8081/&#x27;+$&#123;sku.spuId&#125;+&#x27;.html&#x27;&quot;  target=&quot;_blank&quot;&gt;&lt;img th:src=&quot;$&#123;sku.image&#125;&quot; /&gt;&lt;/a&gt;--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://192.168.200.128:8081/10000000616300.html&#x27;&quot;</span>  <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;$&#123;sku.image&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>¥<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;sku.price&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;attr&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://192.168.200.128:8081/10000000616300.html&#x27;&quot;</span> <span class="hljs-attr">th:title</span>=<span class="hljs-string">&quot;$&#123;sku.spec&#125;&quot;</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;sku.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;commit&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;command&quot;</span>&gt;</span>已有<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2000<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人评价<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;operate&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;success-cart.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-bordered btn-danger&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-bordered&quot;</span>&gt;</span>收藏<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>请求路径：<a href="http://localhost:9009//sku_search/list?keywords=%E7%94%B5%E8%A7%86">http://localhost:9009//sku_search/list?keywords=电视</a></p><p><img src="/images/image-20210805194727321.png" alt="image-20210805194727321"></p></li></ol><h3 id="4-3-关键字搜索"><a href="#4-3-关键字搜索" class="headerlink" title="4.3 关键字搜索"></a>4.3 关键字搜索</h3><p>修改search.html，54行开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>  <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/search/list&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-form form-inline&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-append&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;autocomplete&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span>  <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;searchMap.keywords&#125;&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-error input-xxlarge&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-btn btn-xlarge btn-danger&quot;</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试路径：<a href="http://localhost:9009/sku_search/list?keywords=%E5%8D%8E%E4%B8%BA">http://localhost:9009/sku_search/list?keywords=华为</a></p><p><img src="/images/image-20210805200047392.png" alt="image-20210805200047392"></p><h3 id="4-4-条件搜索实现"><a href="#4-4-条件搜索实现" class="headerlink" title="4.4 条件搜索实现"></a>4.4 条件搜索实现</h3><p><img src="/images/image-20210805200258542.png" alt="image-20210805200258542"></p><p>用户每次点击搜索的时候，其实在上次搜索的基础之上加上了新的搜索条件，也就是在上一次请求的URL后面追加了新的搜索条件，我们可以在后台每次拼接组装出上次搜索的URL，然后每次将URL存入到Model中，页面每次点击不同条件的时候，从Model中取出上次请求的URL，然后再加上新点击的条件参数实现跳转即可。</p><ol><li><p>后台记录搜索URL</p><p>修改SkuController，添加组装URL的方法，并将组装好的URL存储起来,代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拼装url</span><br>StringBuilder url = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;/search/list&quot;</span>);<br><span class="hljs-keyword">if</span> (searchMap != <span class="hljs-keyword">null</span> &amp;&amp; searchMap.size()&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-comment">//是由查询条件</span><br>    url.append(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String paramKey : searchMap.keySet()) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;sortRule&quot;</span>.equals(paramKey) &amp;&amp; !<span class="hljs-string">&quot;sortField&quot;</span>.equals(paramKey) &amp;&amp; !<span class="hljs-string">&quot;pageNum&quot;</span>.equals(paramKey))&#123;<br>            url.append(paramKey).append(<span class="hljs-string">&quot;=&quot;</span>).append(searchMap.get(paramKey)).append(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//http://localhost:9009/search/list?keywords=手机&amp;spec_网络制式=4G&amp;</span><br>    String urlString = url.toString();<br>    <span class="hljs-comment">//去除路径上的最后一个&amp;</span><br>    urlString=urlString.substring(<span class="hljs-number">0</span>,urlString.length()-<span class="hljs-number">1</span>);<br>    model.addAttribute(<span class="hljs-string">&quot;url&quot;</span>,urlString);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;url&quot;</span>,url);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>页面搜索对接</p><p>修改品牌部份</p><p><img src="/images/image-20210805201634600.png" alt="image-20210805201634600"></p><p>修改规格部分</p><p><img src="/images/image-20210805202354898.png" alt="image-20210805202354898"></p><p>修改价格部分</p><p><img src="/images/image-20210805202524337.png" alt="image-20210805202524337"></p><p>测试，点击品牌，规格，价格参数后都会自动拼接到url字符串上</p><p><img src="/images/image-20210805203120830.png" alt="image-20210805203120830"></p></li></ol><h3 id="4-5-移除搜索条件"><a href="#4-5-移除搜索条件" class="headerlink" title="4.5 移除搜索条件"></a>4.5 移除搜索条件</h3><p><img src="/images/image-20210805203243750.png" alt="image-20210805203243750"></p><p>如上图，用户点击条件搜索后，要将选中的条件显示出来，并提供移除条件的<code>x</code>按钮,显示条件我们可以从searchMap中获取，移除其实就是将之前的请求地址中的指定条件删除即可。</p><p>修改search.html，移除分类、品牌、价格、规格搜索条件，代码如下：</p><p>只要修改方框里的内容，其实就是把字符串用空串代替</p><p><img src="/images/image-20210805204605803.png" alt="image-20210805204605803"></p><h3 id="4-6-排序"><a href="#4-6-排序" class="headerlink" title="4.6 排序"></a>4.6 排序</h3><p>修改search.html，实现排序，代码如下：</p><p>603行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(sortRule=&#x27;ASC&#x27;,sortField=&#x27;price&#x27;)&#125;&quot;</span>&gt;</span>价格↑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(sortRule=&#x27;DESC&#x27;,sortField=&#x27;price&#x27;)&#125;&quot;</span>&gt;</span>价格↓<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试: 点击价格，看是否进行排序</p><p><img src="/images/image-20210805205025043.png" alt="image-20210805205025043"></p><h3 id="4-7-分页"><a href="#4-7-分页" class="headerlink" title="4.7 分页"></a>4.7 分页</h3><ol><li><p>分页工具类定义</p><p>在common工程中添加Page分页对象，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span> &lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br><span class="hljs-comment">//当前默认为第一页</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer pageNum = <span class="hljs-number">1</span>;<br><span class="hljs-comment">//默认每页显示条件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer pageSize = <span class="hljs-number">20</span>;<br><br><br><span class="hljs-comment">//判断当前页是否为空或是小于1</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">cpn</span><span class="hljs-params">(Integer pageNum)</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">null</span> == pageNum || pageNum &lt; <span class="hljs-number">1</span>)&#123;<br>pageNum = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pageNum;<br>&#125;<br><br><br><span class="hljs-comment">// 页数（第几页）</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> currentpage;<br><br><span class="hljs-comment">// 查询数据库里面对应的数据有多少条</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> total;<span class="hljs-comment">// 从数据库查处的总记录数</span><br><br><span class="hljs-comment">// 每页显示多少分页标签</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br><span class="hljs-comment">// 下页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> next;<br><br><span class="hljs-keyword">private</span> List&lt;T&gt; list;<br><br><span class="hljs-comment">// 最后一页</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> last;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> lpage;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rpage;<br><br><span class="hljs-comment">//从哪条开始查</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> start;<br><br><span class="hljs-comment">//全局偏移量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> offsize = <span class="hljs-number">2</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br>&#125;<br><br><span class="hljs-comment">/****</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage 当前页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total 总记录数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize 每页显示多少条</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentpage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> currentpage,<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">long</span> pagesize)</span> </span>&#123;<br><br><span class="hljs-comment">//如果整除表示正好分N页，如果不能整除在N页的基础上+1页</span><br><span class="hljs-keyword">int</span> totalPages = (<span class="hljs-keyword">int</span>) (total%pagesize==<span class="hljs-number">0</span>? total/pagesize : (total/pagesize)+<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//总页数</span><br><span class="hljs-keyword">this</span>.last = totalPages;<br><br><span class="hljs-comment">//判断当前页是否越界,如果越界，我们就查最后一页</span><br><span class="hljs-keyword">if</span>(currentpage&gt;totalPages)&#123;<br><span class="hljs-keyword">this</span>.currentpage = totalPages;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">this</span>.currentpage=currentpage;<br>&#125;<br><br><span class="hljs-comment">//计算起始页</span><br><span class="hljs-keyword">this</span>.start = (<span class="hljs-keyword">this</span>.currentpage-<span class="hljs-number">1</span>)*pagesize;<br>&#125;<br>  <br>  <span class="hljs-comment">/****</span><br><span class="hljs-comment"> * 初始化分页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initPage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize)</span></span>&#123;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-keyword">this</span>.total = total;<br><span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-keyword">this</span>.size=pagesize;<br><br><span class="hljs-comment">//计算当前页和数据库查询起始值以及总页数</span><br>setCurrentpage(currentpage, total, pagesize);<br><br><span class="hljs-comment">//分页计算</span><br><span class="hljs-keyword">int</span> leftcount =<span class="hljs-keyword">this</span>.offsize,<span class="hljs-comment">//需要向上一页执行多少次</span><br>rightcount =<span class="hljs-keyword">this</span>.offsize;<br><br><span class="hljs-comment">//起点页</span><br><span class="hljs-keyword">this</span>.lpage =currentpage;<br><span class="hljs-comment">//结束页</span><br><span class="hljs-keyword">this</span>.rpage =currentpage;<br><br><span class="hljs-comment">//2点判断</span><br><span class="hljs-keyword">this</span>.lpage = currentpage-leftcount;<span class="hljs-comment">//正常情况下的起点</span><br><span class="hljs-keyword">this</span>.rpage = currentpage+rightcount;<span class="hljs-comment">//正常情况下的终点</span><br><br><span class="hljs-comment">//页差=总页数和结束页的差</span><br><span class="hljs-keyword">int</span> topdiv = <span class="hljs-keyword">this</span>.last-rpage;<span class="hljs-comment">//判断是否大于最大页数</span><br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 起点页</span><br><span class="hljs-comment"> * 1、页差&lt;0  起点页=起点页+页差值</span><br><span class="hljs-comment"> * 2、页差&gt;=0 起点和终点判断</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.lpage=topdiv&lt;<span class="hljs-number">0</span>? <span class="hljs-keyword">this</span>.lpage+topdiv:<span class="hljs-keyword">this</span>.lpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 结束页</span><br><span class="hljs-comment"> * 1、起点页&lt;=0   结束页=|起点页|+1</span><br><span class="hljs-comment"> * 2、起点页&gt;0    结束页</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.rpage=<span class="hljs-keyword">this</span>.lpage&lt;=<span class="hljs-number">0</span>? <span class="hljs-keyword">this</span>.rpage+(<span class="hljs-keyword">this</span>.lpage*-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>: <span class="hljs-keyword">this</span>.rpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 当起点页&lt;=0  让起点页为第一页</span><br><span class="hljs-comment"> * 否则不管</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.lpage=<span class="hljs-keyword">this</span>.lpage&lt;=<span class="hljs-number">0</span>? <span class="hljs-number">1</span>:<span class="hljs-keyword">this</span>.lpage;<br><br><span class="hljs-comment">/***</span><br><span class="hljs-comment"> * 如果结束页&gt;总页数   结束页=总页数</span><br><span class="hljs-comment"> * 否则不管</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">this</span>.rpage=<span class="hljs-keyword">this</span>.rpage&gt;last? <span class="hljs-keyword">this</span>.last:<span class="hljs-keyword">this</span>.rpage;<br>&#125;<br>  <br>  <span class="hljs-comment">/****</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total   总记录数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage当前页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize每页显示多少条</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize)</span> </span>&#123;<br>initPage(total,currentpage,pagesize);<br>&#125;<br><br><span class="hljs-comment">//上一页</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getUpper</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> currentpage&gt;<span class="hljs-number">1</span>? currentpage-<span class="hljs-number">1</span>: currentpage;<br>&#125;<br><br><span class="hljs-comment">//总共有多少页，即末页</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLast</span><span class="hljs-params">(<span class="hljs-keyword">int</span> last)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.last = (<span class="hljs-keyword">int</span>) (total%size==<span class="hljs-number">0</span>? total/size : (total/size)+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/****</span><br><span class="hljs-comment"> * 带有偏移量设置的分页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> total</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> currentpage</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pagesize</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> offsize</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Page</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total,<span class="hljs-keyword">int</span> currentpage,<span class="hljs-keyword">int</span> pagesize,<span class="hljs-keyword">int</span> offsize)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.offsize = offsize;<br>initPage(total, currentpage, pagesize);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span>  currentpage&lt;last? currentpage+<span class="hljs-number">1</span>: last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span> next)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.next = next;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getCurrentpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> currentpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> total;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotal</span><span class="hljs-params">(<span class="hljs-keyword">long</span> total)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.total = total;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.size = size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getLast</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> last;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getLpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> lpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLpage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> lpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.lpage = lpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getRpage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> rpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRpage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.rpage = rpage;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getStart</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> start;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStart</span><span class="hljs-params">(<span class="hljs-keyword">long</span> start)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.start = start;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCurrentpage</span><span class="hljs-params">(<span class="hljs-keyword">long</span> currentpage)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.currentpage = currentpage;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the list</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list the list to set</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setList</span><span class="hljs-params">(List&lt;T&gt; list)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.list = list;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//总记录数</span><br><span class="hljs-comment">//当前页</span><br><span class="hljs-comment">//每页显示多少条</span><br><span class="hljs-keyword">int</span> cpage =<span class="hljs-number">17</span>;<br>Page page = <span class="hljs-keyword">new</span> Page(<span class="hljs-number">1001</span>,cpage,<span class="hljs-number">50</span>,<span class="hljs-number">7</span>);<br>System.out.println(<span class="hljs-string">&quot;开始页:&quot;</span>+page.getLpage()+<span class="hljs-string">&quot;__当前页：&quot;</span>+page.getCurrentpage()+<span class="hljs-string">&quot;__结束页&quot;</span>+page.getRpage()+<span class="hljs-string">&quot;____总页数：&quot;</span>+page.getLast());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>分页实现</p><p>修改SkuController,实现分页信息封装，代码如下：</p><p>添加到拼接url的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//封装分页数据并返回</span><br><span class="hljs-comment">//1.总记录数</span><br><span class="hljs-comment">//2.当前页</span><br><span class="hljs-comment">//3.每页显示多少条</span><br>Page&lt;SkuInfo&gt; page = <span class="hljs-keyword">new</span> Page&lt;SkuInfo&gt;(<br>        Long.parseLong(String.valueOf( resultMap.get(<span class="hljs-string">&quot;total&quot;</span>))),<br>        Integer.parseInt(String.valueOf(resultMap.get(<span class="hljs-string">&quot;pageNum&quot;</span>))),<br>        Page.pageSize<br>);<br>model.addAttribute(<span class="hljs-string">&quot;page&quot;</span>,page);<br></code></pre></td></tr></table></figure></li><li><p>页面分页实现</p><p>修改search.html，实现分页查询，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fr page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sui-pagination pagination-large&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;prev disabled&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;page.upper&#125;)&#125;&quot;</span>&gt;</span>«上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;i:$&#123;#numbers.sequence(page.lpage,page.rpage)&#125;&quot;</span> <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;i&#125;==$&#123;page.currentpage&#125;?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;i&#125;)&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;i&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;next&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;$&#123;url&#125;(pageNum=$&#123;page.next&#125;)&#125;&quot;</span>&gt;</span>下一页»<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;page.last&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>页<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>共<span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;page.total&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>个商品<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="5-畅购商品详情页"><a href="#5-畅购商品详情页" class="headerlink" title="5. 畅购商品详情页"></a>5. 畅购商品详情页</h2><h3 id="5-1-需求分析"><a href="#5-1-需求分析" class="headerlink" title="5.1 需求分析"></a>5.1 需求分析</h3><p>当系统审核完成商品，需要将商品详情页进行展示，那么采用静态页面生成的方式生成，并部署到高性能的web服务器中进行访问是比较合适的。所以，开发流程如下图所示：</p><p><img src="/images/image-20210805232618788.png" alt="image-20210805232618788"></p><p>此处MQ我们使用Rabbitmq即可。</p><p>执行步骤解释：</p><ul><li>系统管理员（商家运维人员）修改或者审核商品的时候, 会更改数据库中商品上架状态并发送商品id给rabbitMq中的上架交换器</li><li>上架交换器会将商品id发给静态页生成队列</li><li>静态页微服务设置监听器, 监听静态页生成队列, 根据商品id获取商品详细数据并使用thymeleaf的模板技术生成静态页</li></ul><h3 id="5-2-商品静态化微服务创建"><a href="#5-2-商品静态化微服务创建" class="headerlink" title="5.2 商品静态化微服务创建"></a>5.2 商品静态化微服务创建</h3><h4 id="5-2-1-需求分析"><a href="#5-2-1-需求分析" class="headerlink" title="5.2.1 需求分析"></a>5.2.1 需求分析</h4><p>该微服务只用于生成商品静态页，不做其他事情。</p><h4 id="5-2-2-搭建项目"><a href="#5-2-2-搭建项目" class="headerlink" title="5.2.2 搭建项目"></a>5.2.2 搭建项目</h4><ol><li><p>在changgou-service下创建一个名称为changgou_service_page的项目,作为静态化页面生成微服务</p></li><li><p>changgou-service-page中添加起步依赖，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改application.yml的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9011</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">page</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">600000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">600000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br><span class="hljs-comment"># 生成静态页的位置</span><br><span class="hljs-attr">pagepath:</span> <span class="hljs-string">D:\items</span><br></code></pre></td></tr></table></figure></li><li><p>创建系统启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.changgou.goods.feign&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(PageApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-3-生成静态页"><a href="#5-3-生成静态页" class="headerlink" title="5.3 生成静态页"></a>5.3 生成静态页</h3><h4 id="5-3-1-需求分析"><a href="#5-3-1-需求分析" class="headerlink" title="5.3.1 需求分析"></a>5.3.1 需求分析</h4><p>页面发送请求，传递要生成的静态页的商品的SpuID.后台controller 接收请求，调用thyemleaf的原生API生成商品静态页。</p><p><img src="/images/image-20210805233422423.png" alt="image-20210805233422423"></p><p>上图是要生成的商品详情页，从图片上可以看出需要查询SPU的3个分类作为面包屑显示，同时还需要查询SKU和SPU信息。</p><h4 id="5-3-2-Feign创建"><a href="#5-3-2-Feign创建" class="headerlink" title="5.3.2 Feign创建"></a>5.3.2 Feign创建</h4><p>一会儿需要查询SPU和SKU以及Category，所以我们需要先创建Feign，修改changgou-service-goods-api,添加CategoryFeign，并在CategoryFeign中添加根据ID查询分类数据，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CategoryFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/category/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在changgou-service-goods-api,添加SkuFeign,并添加根据SpuID查询Sku集合，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;goods&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku&quot;)</span>  <span class="hljs-comment">//这个路径拼接到下面方法上也可以</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SkuFeign</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 多条件搜索品牌数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spuId&quot;)</span> String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在changgou-service-goods-api,添加SpuFeign,并添加根据SpuID查询Spu信息，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name = &quot;goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SpuFeign</span> </span>&#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/findSpuById/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findSpuById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-3-静态页生成代码"><a href="#5-3-3-静态页生成代码" class="headerlink" title="5.3.3 静态页生成代码"></a>5.3.3 静态页生成代码</h4><ol><li><p>创建PageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PageService</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成静态化页面</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">generateItemPage</span><span class="hljs-params">(String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建PageServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">PageService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SpuFeign spuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CategoryFeign categoryFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SkuFeign skuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TemplateEngine templateEngine;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;pagepath&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String pagepath;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generateItemPage</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>        <span class="hljs-comment">//获取context对象,用于存放商品详情数据</span><br>        Context context = <span class="hljs-keyword">new</span> Context();<br>        Map&lt;String, Object&gt; itemData = <span class="hljs-keyword">this</span>.findItemData(spuId);<br>        context.setVariables(itemData);<br>        <span class="hljs-comment">//获取商品详情页生成的指定位置</span><br>        File dir = <span class="hljs-keyword">new</span> File(pagepath);<br>        <span class="hljs-comment">//判断商品详情页文件夹是否存在,不存在则创建</span><br>        <span class="hljs-keyword">if</span> (!dir.exists())&#123;<br>            dir.mkdirs();<br>        &#125;<br>        <span class="hljs-comment">//定义输出流,进行文件生成</span><br>        File file = <span class="hljs-keyword">new</span> File(dir+<span class="hljs-string">&quot;/&quot;</span>+spuId+<span class="hljs-string">&quot;.html&quot;</span>);<br>        Writer out = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            out = <span class="hljs-keyword">new</span> PrintWriter(file);<br>            <span class="hljs-comment">//生成文件</span><br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * 1.模板名称</span><br><span class="hljs-comment">             * 2.context对象,包含了模板需要的数据</span><br><span class="hljs-comment">             * 3.输出流,指定文件输出位置</span><br><span class="hljs-comment">             */</span><br>            templateEngine.process(<span class="hljs-string">&quot;item&quot;</span>,context,out);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭流</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                out.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//获取静态化页面数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Map&lt;String, Object&gt; <span class="hljs-title">findItemData</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br><br>        Map&lt;String,Object&gt; resultMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-comment">//获取spu信息</span><br>        Result&lt;Spu&gt; spuResult = spuFeign.findSpuById(spuId);<br>        Spu spu = spuResult.getData();<br>        resultMap.put(<span class="hljs-string">&quot;spu&quot;</span>,spu);<br><br>        <span class="hljs-comment">//获取图片信息</span><br>        <span class="hljs-keyword">if</span> (spu != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(spu.getImages()))&#123;<br>                resultMap.put(<span class="hljs-string">&quot;imageList&quot;</span>,spu.getImages().split(<span class="hljs-string">&quot;,&quot;</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//获取分类信息</span><br>        Category category1 = (Category) categoryFeign.findById(spu.getCategory1Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category1&quot;</span>,category1);<br>        Category category2 = (Category) categoryFeign.findById(spu.getCategory2Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category2&quot;</span>,category2);<br>        Category category3 = (Category) categoryFeign.findById(spu.getCategory3Id()).getData();<br>        resultMap.put(<span class="hljs-string">&quot;category3&quot;</span>,category3);<br>        <span class="hljs-comment">//获取sku集合信息</span><br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>        resultMap.put(<span class="hljs-string">&quot;skuList&quot;</span>,skuList);<br><br>        resultMap.put(<span class="hljs-string">&quot;specificationList&quot;</span>, JSON.parseObject(spu.getSpecItems(), Map.class));<br>        <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>声明page_create_queue队列,并绑定到商品上架交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PAGE_CREATE_QUEUE=<span class="hljs-string">&quot;page_create_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(PAGE_CREATE_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">PAGE_CREATE_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(PAGE_CREATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br><br>    <span class="hljs-comment">//队列与交换机的绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_UP_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">PAGE_CREATE_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(PAGE_CREATE_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建PageListener监听类,监听page_create_queue队列,获取消息,并生成静态化页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PageService pageService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.PAGE_CREATE_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;生成商品详情页面,商品id为: &quot;</span>+spuId);<br>        <span class="hljs-comment">//生成静态化页面</span><br>        pageService.generateItemPage(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>更新canal中消息队列配置类与Page服务一致</p></li><li><p>更新canal中对于spu表的监听类,当商品审核状态从0变1,则将当前spuId发送到消息队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取最新审核商品</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;status&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;1&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;status&quot;</span>)))&#123;<br>  <span class="hljs-comment">//发送商品spuId</span><br>  rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_UP_EXCHANGE,<span class="hljs-string">&quot;&quot;</span>,newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>最后记得把list.html拷贝到templates包下</p><h4 id="5-3-4-启动测试"><a href="#5-3-4-启动测试" class="headerlink" title="5.3.4 启动测试"></a>5.3.4 启动测试</h4><p>启动eurekea服务端,数据监控服务,商品服务,静态页生成服务. 将spu表中status字段从0更新为1。在生成的items目录下会看到新增的页面，把css, img等那些静态资源放到与items同级的包下，可以看到，点开页面可以看到下图</p><p><img src="/images/image-20210806141505171.png" alt="image-20210806141505171"></p><h4 id="5-3-5-基于nginx完成静态页访问"><a href="#5-3-5-基于nginx完成静态页访问" class="headerlink" title="5.3.5 基于nginx完成静态页访问"></a>5.3.5 基于nginx完成静态页访问</h4><p>用FileZilla连接到服务器（这里就是我们的虚拟机）</p><p><img src="/images/image-20210806142622109.png" alt="image-20210806142622109"></p><p>把生成的html页面复制到服务器端的html包下</p><p><img src="/images/image-20210806142913422.png" alt="image-20210806142913422"></p><p>然后重启服务器端的nginx</p><p>输入请求路径（端口改为http协议默认端口80了）：<a href="http://192.168.200.128/10000001516600.html">http://192.168.200.128/10000001516600.html</a></p><p>可以发现，通过访问远端服务器也可以访问到图片了</p><p><img src="/images/image-20210806143130888.png" alt="image-20210806143130888"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>畅购商城项目第一部分</title>
    <link href="/2021/07/26/1.1%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/"/>
    <url>/2021/07/26/1.1%20%E7%95%85%E8%B4%AD%E5%95%86%E5%9F%8E%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Part-01-框架搭建"><a href="#Part-01-框架搭建" class="headerlink" title="Part-01 框架搭建"></a>Part-01 框架搭建</h1><h2 id="1-框架搭建"><a href="#1-框架搭建" class="headerlink" title="1. 框架搭建"></a>1. 框架搭建</h2><h3 id="1-1-项目结构说明"><a href="#1-1-项目结构说明" class="headerlink" title="1.1 项目结构说明"></a>1.1 项目结构说明</h3><p><img src="/images/image-20210726205356384.png" alt="image-20210726205356384"></p><p>各个包的用途</p><ul><li><p>changgou_auth:  （目前还不是太理解这一部分的作用）</p></li><li><p>changgou_common: 用来放返回给前端的result</p></li></ul><p><img src="/images/image-20210726205734286.png" alt="image-20210726205734286"></p><ul><li>changgou_common_db:  （目前还不是太理解这一部分的作用）</li><li>changgou_eureka: 微服务的注册中心，获取不同微服务的地址，便于通信</li><li>changgou_gateway : 网关模块，根据网站的规模和需要，可以将综合逻辑相关的服务用网关路由组合到一起。在这里还可以做鉴权和限流相关操作。</li><li>changgou_reverser: (目前还不是太理解这一部分的作用)</li><li>changgou_service: 微服务模块，该模块用于存放所有独立的微服务工程。</li></ul><p><img src="/images/image-20210726210519758.png" alt="image-20210726210519758"></p><ul><li><p>changgou_service_api: 这里面放了各个微服务对应工程的JavaBean、Feign、以及Hystrix配置，该工程主要对外提供依赖。</p></li><li><p>changgou_transaction_fescar: 分布式事务模块，将分布式事务抽取到该工程中，任何工程如需要使用分布式事务，只需依赖该工程即可。 (目前还不是太理解这一部分的作用)</p></li><li><p>changgou_web: web服务工程，对应功能模块如需要调用多个微服务，可以将他们写入到该模块中，例如网站后台、网站前台等。 (目前还不是太理解这一部分的作用)</p></li></ul><h3 id="1-2-父工程搭建"><a href="#1-2-父工程搭建" class="headerlink" title="1.2 父工程搭建"></a>1.2 父工程搭建</h3><p>首先，创建空项目changgou。下面的所有模块都是用的无模板maven创建的，没有用Spring Initializr。</p><h4 id="1-2-1-一级父工程搭建"><a href="#1-2-1-一级父工程搭建" class="headerlink" title="1.2.1  一级父工程搭建"></a>1.2.1  一级父工程搭建</h4><p>在项目下面创建父工程 changgou_parent</p><p>配置好pom.xml文件，将src文件夹给删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--spring boot项目跳过测试，但是测试类会生成.class文件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--依赖包--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--测试包--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--这下面的几个包是因为我没加时出异常：“java.lang.TypeNotPresentException: Type javax.xml.bind.JAXBContext not present”   应该和jdk的版本有关系--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-runtime<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Greenwich.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-二级父工程模块搭建"><a href="#1-2-2-二级父工程模块搭建" class="headerlink" title="1.2.2 二级父工程模块搭建"></a>1.2.2 二级父工程模块搭建</h4><p>创建changgou_gateway、changgou_service、changgou_service_api、 </p><p>changgou_web工程，工程全部为pom工程，并将所有工程的src文件删除。</p><h3 id="1-3-Eureka微服务搭建"><a href="#1-3-Eureka微服务搭建" class="headerlink" title="1.3 Eureka微服务搭建"></a>1.3 <strong>Eureka</strong>微服务搭建</h3><ol><li><p>在一级父工程下创建模块changgou_eureka。这个模块是用来当做注册中心服务方的（eureka-server）</p></li><li><p>pom.xml文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--eureka-server依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 appliation.yml 配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6868</span> <span class="hljs-comment"># 表明这个服务的端口号是6868，启动以后在网页端输入（localhost:6868）即可访问图形界面</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#由于他是注册中心，所以不用注册到eureka中</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#他是给client提供信息的，所以不用从eureka中获取信息</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment"># 表明这是一个注册中心，但是要注意在网页端输入 localhost:6868 才能看到图形界面，而不是下面这个带/eureka/的url</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p><code>$&#123;server.port&#125;</code>也是一种语言，用来获取配置文件键值对中的值的字符串，在这里就是 6868。            </p></li><li><p>在 java 目录下创建包 com.changgou.eureka，并在 eureka 包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//表明这是一个服务的启动类</span><br><span class="hljs-meta">@EnableEurekaServer</span>     <span class="hljs-comment">//表明这是eureka-server</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>上述步骤完成以后，启动启动类。在浏览器输入<code>localhost:6868</code>, 看是否能顺利打开图形界面。</p><h3 id="1-4-公共模块服务搭建"><a href="#1-4-公共模块服务搭建" class="headerlink" title="1.4 公共模块服务搭建"></a>1.4 公共模块服务搭建</h3><h4 id="1-4-1-全局公共模块"><a href="#1-4-1-全局公共模块" class="headerlink" title="1.4.1 全局公共模块"></a>1.4.1 全局公共模块</h4><ol><li><p>在一级父工程下创建子模块 changgou_common</p></li><li><p>引入 pom.xml 文件依赖（redis, operfeign这俩依赖目前还不知道其用途）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--web起步依赖。这里导入他，是因为这个包的目的就是创建实体类并将结果封装返回给前端--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- redis 使用--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--这里的响应结果和前端请求的格式都是json格式，所以需要这个包--&gt;</span>    <br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.51<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 com.changgou.entity 包，包下封装相关公共实体类。（这里的entity实体类就按照模板来就行了，因为它是用来和前端交互信息的，写法比较固定）</p><p><img src="/images/image-20210726220028054.png" alt="image-20210726220028054"></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回结果实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag;<span class="hljs-comment">//是否成功</span><br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//返回码</span><br>    <span class="hljs-keyword">private</span> String message;<span class="hljs-comment">//返回消息</span><br><br>    <span class="hljs-keyword">private</span> T data;<span class="hljs-comment">//返回数据</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, Integer code, String message, Object data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>        <span class="hljs-keyword">this</span>.data = (T)data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag, Integer code, String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Result</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">this</span>.code = StatusCode.OK;<br>        <span class="hljs-keyword">this</span>.message = <span class="hljs-string">&quot;执行成功&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFlag</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlag</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.flag = flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(Integer code)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMessage</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(T data)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页结果类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageResult</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long total;<span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; rows;<span class="hljs-comment">//记录</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageResult</span><span class="hljs-params">(Long total, List&lt;T&gt; rows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.total = total;<br>        <span class="hljs-keyword">this</span>.rows = rows;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageResult</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotal</span><span class="hljs-params">(Long total)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.total = total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getRows</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> rows;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRows</span><span class="hljs-params">(List&lt;T&gt; rows)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.rows = rows;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回码实体类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatusCode</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> OK=<span class="hljs-number">20000</span>;<span class="hljs-comment">//成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ERROR =<span class="hljs-number">20001</span>;<span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> LOGINERROR =<span class="hljs-number">20002</span>;<span class="hljs-comment">//用户名或密码错误</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> ACCESSERROR =<span class="hljs-number">20003</span>;<span class="hljs-comment">//权限不足</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REMOTEERROR =<span class="hljs-number">20004</span>;<span class="hljs-comment">//远程调用失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> REPERROR =<span class="hljs-number">20005</span>;<span class="hljs-comment">//重复操作</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-数据访问公共模块搭建"><a href="#1-4-2-数据访问公共模块搭建" class="headerlink" title="1.4.2 数据访问公共模块搭建"></a>1.4.2 数据访问公共模块搭建</h4><p>这个公共模块是连接mysql数据库的公共微服务模块，所以需要连接mysql的微服务都继承自此工程。 </p><ol><li><p>创建数据访问公共模块changgou_common_db</p></li><li><p>给 pom.xml 文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--通用mapper起步依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--MySQL数据库驱动--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--mybatis分页插件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-5-商品微服务搭建"><a href="#1-5-商品微服务搭建" class="headerlink" title="1.5 商品微服务搭建"></a>1.5 商品微服务搭建</h3><h4 id="1-5-1-商品微服务API工程搭建"><a href="#1-5-1-商品微服务API工程搭建" class="headerlink" title="1.5.1 商品微服务API工程搭建"></a>1.5.1 商品微服务<strong>API</strong>工程搭建</h4><ol><li><p>二级父工程 changgou_service_api 的 pom.xml 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--这个包的作用是持久化，具体的说就是在实体类中进行元数据标签的作用，是ORM框架中用到的--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.persistence<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>persistence-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ORM框架可以通过这个元数据标签，使得实体类与数据库中的表建立映射关系。<br>例如javax.persistence.Column标识实体类中的这个属性对应于数据库中的一个字段等等。</p></li><li><p>changgou_service_api 下创建 changgou_service_goods_api 子模块</p></li></ol><h4 id="1-5-2-微服务工程搭建"><a href="#1-5-2-微服务工程搭建" class="headerlink" title="1.5.2 微服务工程搭建"></a>1.5.2 微服务工程搭建</h4><ol><li><p>二级父工程 changgou_service 下创建 changgou_service_goods 子模块 ，pom.xml 文件引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--这个包需要和数据库打交道，所以导入了changgou_common_db依赖，因为在changgou_common_db这个包中导入了数据库的一些依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common_db<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--导入changgou_service_goods_api包，是因为这个包里面定义了商品的pojo--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建并配置文件application.yml </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span>      <span class="hljs-comment"># 配置这个商品微服务的端口为 9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">goods</span>   <span class="hljs-comment"># 配置这个微服务的名称为 goods</span><br>  <span class="hljs-attr">datasource:</span>     <span class="hljs-comment"># 配置mysql数据库的连接，注意他比spring低一级，注意要连接的数据库的 url 和表名称</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.200.128:3306/changgou_goods?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><span class="hljs-comment"># register-with-eureka，fetch-registry这俩不写的话默认为true，表示他是eureka-client</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span> <span class="hljs-comment"># 声明注册中心</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 声明这个实例可以通过ip访问到，而不只是域名</span><br><span class="hljs-attr">feign:</span>   <span class="hljs-comment"># 这里还不熟，后面单独加强</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 开启熔断机制</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">60000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">20000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><span class="hljs-comment"># 这里还不熟，后面单独加强</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br>          <span class="hljs-attr">thread:</span><br>            <span class="hljs-comment"># 熔断器超时时间，默认：1000/毫秒</span><br>            <span class="hljs-attr">timeoutInMilliseconds:</span> <span class="hljs-number">20000</span><br></code></pre></td></tr></table></figure></li><li><p>创建包com.changgou.goods，并在goods下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">// 表明他是这个服务的启动类</span><br><span class="hljs-meta">@EnableEurekaClient</span>     <span class="hljs-comment">// 表明这个微服务是一个eureka-client</span><br><span class="hljs-meta">@MapperScan(basePackages = &#123;&quot;com.changgou.goods.dao&quot;&#125;)</span>  <span class="hljs-comment">//@MapperScan是tk.mybatis.spring.annotation包下的，用于扫描dao包下的Mapper接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run( GoodsApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-商品微服务-品牌增删改查"><a href="#2-商品微服务-品牌增删改查" class="headerlink" title="2. 商品微服务-品牌增删改查"></a>2. 商品微服务-品牌增删改查</h2><p>先实现他的基本需求</p><ol><li>查询全部列表数据 </li><li>根据ID查询实体数据 </li><li>增加 </li><li>修改</li><li>删除</li><li>条件查询</li><li>分页查询</li><li>分页+条件查询 </li></ol><p>再观察他的表结构   (<em>tips: ctrl+enter 是在表格内换行, 直接按 enter会退出表格</em>)</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>品牌id</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>品牌名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>image</td><td>品牌图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>letter</td><td>品牌的首字母</td><td>CHAR</td><td></td><td></td></tr><tr><td>seq</td><td>排序</td><td>INT</td><td></td><td></td></tr></tbody></table><h3 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h3><p>商品类的整体包结构还是三层架构</p><p><img src="/images/image-20210727122004680.png" alt="image-20210727122004680"></p><h4 id="2-1-1-品牌列表"><a href="#2-1-1-品牌列表" class="headerlink" title="2.1.1 品牌列表"></a>2.1.1 品牌列表</h4><ol><li>在changgou_service_goods_api创建com.changgou.goods.pojo包，pojo包下创建 Brand实体类</li></ol><p><img src="/images/image-20210727120159612.png" alt="image-20210727120159612"></p><p>​    <img src="/images/image-20210727120235587.png" alt="image-20210727120235587"></p><p>​    注意实体类中的<code>@Table(name=&quot;tb_brand&quot;)</code>和<code>@Id</code>这俩注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changgou.goods.pojo;<br><br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> javax.persistence.Table;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * brand实体类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Table(name=&quot;tb_brand&quot;)</span>  <span class="hljs-comment">//表明这个类和mysql数据库中的 tb_brand 相对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br><span class="hljs-meta">@Id</span>  <span class="hljs-comment">//表明id是表的主键</span><br><span class="hljs-keyword">private</span> Integer id;<span class="hljs-comment">//品牌id</span><br><br><br><br><span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//品牌名称</span><br><span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//品牌图片地址</span><br><span class="hljs-keyword">private</span> String letter;<span class="hljs-comment">//品牌的首字母</span><br><span class="hljs-keyword">private</span> Integer seq;<span class="hljs-comment">//排序</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getImage</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> image;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setImage</span><span class="hljs-params">(String image)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.image = image;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLetter</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> letter;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLetter</span><span class="hljs-params">(String letter)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.letter = letter;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getSeq</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> seq;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSeq</span><span class="hljs-params">(Integer seq)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.seq = seq;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>Dao创建 </p><p>在changgou_service_goods微服务下创建com.changgou.goods.dao.BrandMapper接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Mapper&lt;T&gt;是一个接口, 继承它以后可以用一些基本的对数据库单表的操作方法,如果查询比较复杂, 则可以自己在BrandMapper中定义方法在注解上完成sql语句的编写</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">Brand</span>&gt; </span>&#123; <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务层 (service层)</p><p>创建com.changgou.goods.service.BrandService接口，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BrandService</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>创建 com.changgou.goods.service.impl 包，包下创建服务实现类 BrandServiceImpl， 代码如下：</p><p>注意: </p><ul><li>业务层实现类上的 bean 定义<code>@Service</code>不能忘了</li><li>要记得用<code>@Autowired</code>注入BrandMapper这个接口,是通过这个接口去操控数据库的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BrandService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BrandMapper brandMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brandMapper.selectAll();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>控制层 </p><p>控制层 com.changgou.goods包下创建controller包 ，包下创建类</p><p>注意:</p><ul><li><code>@RestController</code> = <code>@ResponseBody</code>+<code>@Controller</code>, <code>@ResponseBody</code>表明这个方法的返回值不是去跳转页面,而是响应给客户端浏览器的响应体. <code>@Controller</code>则是把这个类创建成bean放入spring容器</li><li>由于项目一般前后端分离, 前端项目和后端项目会部署在不同的服务器上, 所以客户端浏览器的请求是跨域的, 会存在请求通过前端到达不了后端的情况,  <code>@CrossOrigin</code>则表明允许跨域, 会解决掉上述问题</li><li><code>@RequestMapping</code>限制了这个控制器的访问路径</li><li><code>@Autowired</code>则是注入<code>BrandService</code>接口, 使用其接口实现类的方法</li><li><code>@GetMapping</code>则是使用了Restful风格, Get 表明这次请求是一次查询</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@RequestMapping(&quot;/brand&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BrandService brandService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Brand&gt; brandList = brandService.findAll();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,brandList) ;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>以上是查询全部商品的一个流程, 其他的基本需求流程是一样的, 若需要仔细研究请查看本机上的changgou项目.</p><h2 id="3-公共异常处理"><a href="#3-公共异常处理" class="headerlink" title="3. 公共异常处理"></a>3. 公共异常处理</h2><p>为了代码更容易维护，创建一个类集中处理异常 </p><p>在com.changgou.goods.handler包下创建公共异常处理类BaseExceptionHandler (也可在controller包下直接创建,看自己喜好)</p><p>注意: </p><ul><li><code>@ControllerAdvice</code>表明这是一个增强的<code>@Controller</code>, 是对整个controller进行操作的一个类</li><li><code>@ExceptionHandler(value = Exception.class)</code>表明这个方法是用来处理为<code>Exception</code>的异常</li><li><code>@ResponseBody</code>则是把结果<code>new Result(false, StatusCode.ERROR, &quot;执行出错&quot;)</code>返回给前端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">error</span><span class="hljs-params">(Exception e)</span></span>&#123;<br>        e.printStackTrace();        <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.ERROR, <span class="hljs-string">&quot;执行出错&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Part-02-分布式文件存储"><a href="#Part-02-分布式文件存储" class="headerlink" title="Part-02 分布式文件存储"></a>Part-02 分布式文件存储</h1><h2 id="1-跨域解决方案CORS"><a href="#1-跨域解决方案CORS" class="headerlink" title="1. 跨域解决方案CORS"></a>1. 跨域解决方案CORS</h2><p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port） </p><p>跨域调用，会出现如下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">No</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="hljs-keyword">header</span> <span class="hljs-keyword">is</span> present <span class="hljs-keyword">on</span> the requested resource. <br>Origin <span class="hljs-string">&#x27;http://localhost:9100&#x27;</span> <span class="hljs-keyword">is</span> therefore <span class="hljs-keyword">not</span> allowed <span class="hljs-keyword">access</span>. The response had HTTP status code <span class="hljs-number">400.</span><br></code></pre></td></tr></table></figure><h2 id="2-通用mapper自定义方法"><a href="#2-通用mapper自定义方法" class="headerlink" title="2. 通用mapper自定义方法"></a>2. 通用<strong>mapper</strong>自定义方法</h2><h3 id="2-1-根据商品分类名称查询品牌列表"><a href="#2-1-根据商品分类名称查询品牌列表" class="headerlink" title="2.1 根据商品分类名称查询品牌列表"></a>2.1 根据商品分类名称查询品牌列表</h3><h4 id="2-1-1-表结构分析"><a href="#2-1-1-表结构分析" class="headerlink" title="2.1.1 表结构分析"></a>2.1.1 表结构分析</h4><p>已知分类与品牌之间的关系属于多对多关系, 通过中间表建立关系</p><p><img src="/images/image-20210727132544864.png" alt="image-20210727132544864"></p><p>​    <img src="/images/image-20210727132633929.png" alt="image-20210727132633929"></p><p><img src="/images/image-20210727132720929.png" alt="image-20210727132720929"></p><p><img src="/images/image-20210727132809184.png" alt="image-20210727132809184"></p><h4 id="2-1-2-代码实现"><a href="#2-1-2-代码实现" class="headerlink" title="2.1.2 代码实现"></a>2.1.2 代码实现</h4><p>由于这是一个复杂查询, Mapper<T>接口中的方法无法直接实现, 所以需要自己定义</p><ol><li><p>修改dao包中的BrandMapper，BrandMapper中新增方法定义 </p><p>注意: </p><ul><li>由于name不能直接写在sql语句里面, 所以需要用变量<code>#&#123;name&#125;</code>代替, 这个参数通过<code>@Param(&quot;name&quot;) String categoryName</code>传过来.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;SELECT NAME, image FROM tb_brand WHERE id IN (SELECT brand_id FROM tb_category_brand WHERE category_id IN (SELECT id FROM tb_category WHERE NAME=#&#123;name&#125; ORDER BY seq));&quot;)</span><br>   <span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">findBrandListByCategoryName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String categoryName)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>service层, controller层的流程不变</p></li></ol><h2 id="3-分布式文件存储-FastDFS"><a href="#3-分布式文件存储-FastDFS" class="headerlink" title="3. 分布式文件存储-FastDFS"></a>3. 分布式文件存储-FastDFS</h2><h3 id="3-1-FastDFS简介"><a href="#3-1-FastDFS简介" class="headerlink" title="3.1 FastDFS简介"></a>3.1 FastDFS简介</h3><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS 架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文件上传、下载，通过Tracker server 调度最终由 Storage server 完成文件上传和下载。</p><p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Stora-geserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。 可以将storage称为存储服务器。 </p><img src="/images/image-20210727134921556.png" alt="image-20210727134921556" style="zoom: 67%;" /><h3 id="3-2-上传流程"><a href="#3-2-上传流程" class="headerlink" title="3.2 上传流程"></a>3.2 上传流程</h3><img src="/images/image-20210727135143849.png" alt="image-20210727135143849" style="zoom:67%;" /><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。 </p><p><img src="/images/image-20210727135358878.png" alt="image-20210727135358878"></p><p><strong>组名</strong>：文件上传后所在的 storage 组名称，在文件上传成功后有storage 服务器返回，需要客户端自行保存。</p><p><strong>虚拟磁盘路径</strong>：storage 配置的虚拟路径，与磁盘选项store_path对应。如果配置了store_path0 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p><p><strong>数据两级目录</strong>：storage 服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。</p><p><strong>文件名</strong>：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p><h3 id="3-3-文件存储微服务搭建"><a href="#3-3-文件存储微服务搭建" class="headerlink" title="3.3 文件存储微服务搭建"></a>3.3 文件存储微服务搭建</h3><ol><li><p>在二级父工程changgou_service下创建文件管理微服务changgou_service_file，该工程主要用于实现文件上传以及文件删除等功能。修改pom.xml，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastdfs-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.27.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在resources文件夹下创建fasfDFS的配置文件<code>fdfs_client.conf</code>, 这个名字要和代码中的对应  (<em>这里的配置端口还不太懂, 没搞清楚这俩端口的区别</em>)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">connect_timeout</span> = <span class="hljs-number">60</span><br><span class="hljs-attr">network_timeout</span> = <span class="hljs-number">60</span><br><span class="hljs-attr">charset</span> = UTF-<span class="hljs-number">8</span><br><span class="hljs-attr">http.tracker_http_port</span> = <span class="hljs-number">8080</span><br><span class="hljs-attr">tracker_server</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">200.128</span>:<span class="hljs-number">22122</span><br></code></pre></td></tr></table></figure></li><li><p>在resources文件夹下创建application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span>  <span class="hljs-comment">#限制单个上传的文件最大为10MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">10MB</span> <span class="hljs-comment">#限制的总上传数据最大为10MB</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9008</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.file包，创建启动类FileApplication </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(FileApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-4-文件上传"><a href="#3-4-文件上传" class="headerlink" title="3.4 文件上传"></a>3.4 文件上传</h3><p>这里的步骤是固定的, 以后需要用到的话直接把这里的工具类给复制过去</p><ol><li><p>文件信息封装</p><p>文件上传一般都有文件的名字、文件的内容、文件的扩展名、文件的md5值、文件的作者等相关属性，我们可以创建一个对象封装这些属性，代码如下:</p><p>创建com.changgou.file.pojo.FastDFSFile </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastDFSFile</span> </span>&#123;<br>    <span class="hljs-comment">//文件名字</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-comment">//文件内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] content;<br>    <span class="hljs-comment">//文件扩展名</span><br>    <span class="hljs-keyword">private</span> String ext;<br>    <span class="hljs-comment">//文件MD5摘要值</span><br>    <span class="hljs-keyword">private</span> String md5;<br>    <span class="hljs-comment">//文件创建作者</span><br>    <span class="hljs-keyword">private</span> String author;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FastDFSFile</span><span class="hljs-params">(String name, <span class="hljs-keyword">byte</span>[] content, String ext, String height,</span></span><br><span class="hljs-params"><span class="hljs-function">                       String width, String author)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.content = content;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FastDFSFile</span><span class="hljs-params">(String name, <span class="hljs-keyword">byte</span>[] content, String ext)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.content = content;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getContent() &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getExt</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setExt</span><span class="hljs-params">(String ext)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ext = ext;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMd5</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> md5;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMd5</span><span class="hljs-params">(String md5)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.md5 = md5;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAuthor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthor</span><span class="hljs-params">(String author)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.author = author;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文件操作</p><p>创建FastDFSClient类,放在com.changgou.file.util下在该类中实现FastDFS信息获取以及文件的相关操作，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.changgou.file.util;<br><br><span class="hljs-keyword">import</span> org.csource.common.NameValuePair;<br><span class="hljs-keyword">import</span> org.csource.fastdfs.*;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FastDFSClient</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> org.slf4j.Logger logger = LoggerFactory.getLogger(FastDFSClient.class);<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 初始化加载FastDFS的TrackerServer配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String filePath = <span class="hljs-keyword">new</span> ClassPathResource(<span class="hljs-string">&quot;fdfs_client.conf&quot;</span>).getFile().getAbsolutePath();<br>            ClientGlobal.init(filePath);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;FastDFS Client Init Fail!&quot;</span>,e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 1.文件的组名  2.文件的路径信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] upload(FastDFSFile file) &#123;<br>        <span class="hljs-comment">//获取文件的作者</span><br>        NameValuePair[] meta_list = <span class="hljs-keyword">new</span> NameValuePair[<span class="hljs-number">1</span>];<br>        meta_list[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> NameValuePair(<span class="hljs-string">&quot;author&quot;</span>, file.getAuthor());<br><br>        <span class="hljs-comment">//接收返回数据</span><br>        String[] uploadResults = <span class="hljs-keyword">null</span>;<br>        StorageClient storageClient=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建StorageClient客户端对象</span><br>            storageClient = getTrackerClient();<br><br>            <span class="hljs-comment">/***</span><br><span class="hljs-comment">             * 文件上传</span><br><span class="hljs-comment">             * 1)文件字节数组</span><br><span class="hljs-comment">             * 2)文件扩展名</span><br><span class="hljs-comment">             * 3)文件作者</span><br><span class="hljs-comment">             */</span><br>            uploadResults = storageClient.upload_file(file.getContent(), file.getExt(), meta_list);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception when uploadind the file:&quot;</span> + file.getName(), e);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (uploadResults == <span class="hljs-keyword">null</span> &amp;&amp; storageClient!=<span class="hljs-keyword">null</span>) &#123;<br>            logger.error(<span class="hljs-string">&quot;upload file fail, error code:&quot;</span> + storageClient.getErrorCode());<br>        &#125;<br>        <span class="hljs-comment">//获取组名</span><br>        String groupName = uploadResults[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">//获取文件存储路径</span><br>        String remoteFileName = uploadResults[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">return</span> uploadResults;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取文件信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName:组名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName：文件存储完整名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> FileInfo <span class="hljs-title">getFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            StorageClient storageClient = getTrackerClient();<br>            <span class="hljs-keyword">return</span> storageClient.get_file_info(groupName, remoteFileName);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception: Get File from Fast DFS failed&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件下载</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title">downFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建StorageClient</span><br>            StorageClient storageClient = getTrackerClient();<br><br>            <span class="hljs-comment">//下载文件</span><br>            <span class="hljs-keyword">byte</span>[] fileByte = storageClient.download_file(groupName, remoteFileName);<br>            InputStream ins = <span class="hljs-keyword">new</span> ByteArrayInputStream(fileByte);<br>            <span class="hljs-keyword">return</span> ins;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(<span class="hljs-string">&quot;Exception: Get File from Fast DFS failed&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 文件删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteFile</span><span class="hljs-params">(String groupName, String remoteFileName)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//创建StorageClient</span><br>        StorageClient storageClient = getTrackerClient();<br><br>        <span class="hljs-comment">//删除文件</span><br>        <span class="hljs-keyword">int</span> i = storageClient.delete_file(groupName, remoteFileName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> StorageServer[] getStoreStorages(String groupName)<br>            <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建TrackerClient</span><br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        <span class="hljs-comment">//获取TrackerServer</span><br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-comment">//获取Storage组</span><br>        <span class="hljs-keyword">return</span> trackerClient.getStoreStorages(trackerServer, groupName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage信息,IP和端口</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> groupName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> remoteFileName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ServerInfo[] getFetchStorages(String groupName,<br>                                                String remoteFileName) <span class="hljs-keyword">throws</span> IOException &#123;<br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-keyword">return</span> trackerClient.getFetchStorages(trackerServer, groupName, remoteFileName);<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Tracker服务地址</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getTrackerUrl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;http://&quot;</span>+getTrackerServer().getInetSocketAddress().getHostString()+<span class="hljs-string">&quot;:&quot;</span>+ClientGlobal.getG_tracker_http_port()+<span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Storage客户端</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> StorageClient <span class="hljs-title">getTrackerClient</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        TrackerServer trackerServer = getTrackerServer();<br>        StorageClient storageClient = <span class="hljs-keyword">new</span> StorageClient(trackerServer, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">return</span>  storageClient;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 获取Tracker</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TrackerServer <span class="hljs-title">getTrackerServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        TrackerClient trackerClient = <span class="hljs-keyword">new</span> TrackerClient();<br>        TrackerServer trackerServer = trackerClient.getConnection();<br>        <span class="hljs-keyword">return</span>  trackerServer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>文件上传 </p><p>创建一个FileController，在该控制器中实现文件上传操作，代码如下</p><p>注意:</p><ul><li>Post表示数据提交</li><li>controller方法里的参数一定是从前端传递过来的, 注意参数的名称要和前端取名对应</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">uploadFile</span><span class="hljs-params">(MultipartFile file)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(file == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>            &#125;<br><br>            String originalFilename = file.getOriginalFilename();<br>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(originalFilename))&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br>            &#125;<br><br>            String extName = originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">byte</span>[] content = file.getBytes();<br><br>            FastDFSFile fastDFSFile = <span class="hljs-keyword">new</span> FastDFSFile(originalFilename, content, extName);<br><br>            String[] uploadResults = FastDFSClient.upload(fastDFSFile);<br><br>            String url = FastDFSClient.getTrackerUrl() + uploadResults[<span class="hljs-number">0</span>] + uploadResults[<span class="hljs-number">1</span>];<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;文件上传成功&quot;</span>, url);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.ERROR, <span class="hljs-string">&quot;文件上传失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>Postman</strong>测试文件上传 </p><p>测试的时候记得文件名称也取成file, 不然请求参数传到controller那里由于参数和方法里的形参对不上会报错</p></li></ol><h1 id="Part-03-微服务网关鉴权JWT"><a href="#Part-03-微服务网关鉴权JWT" class="headerlink" title="Part-03 微服务网关鉴权JWT"></a>Part-03 微服务网关鉴权JWT</h1><h2 id="1-BCrypt密码加密"><a href="#1-BCrypt密码加密" class="headerlink" title="1. BCrypt密码加密"></a>1. BCrypt密码加密</h2><h3 id="1-1-Bcypt快速入门"><a href="#1-1-Bcypt快速入门" class="headerlink" title="1.1 Bcypt快速入门"></a>1.1 Bcypt快速入门</h3><p>在用户模块，对于用户密码的保护，通常都会进行加密。我们通常对密码进行加密，然后存放在数据库中，在用户进行登录的时候，将其输入的密码进行加密然后与数据库中存放的密文进行比较，以验证用户密码是否正确。目前，MD5和BCrypt比较流行。相对来说, BCrypt比MD5更安全。因为其内部引入的加盐机制. (加盐实际上是随机生成一个29位字符的字符串) </p><p>官网: <a href="http://www.mindrot.org/projects/jBCrypt/">http://www.mindrot.org/projects/jBCrypt/</a></p><p>测试用例</p><p>注意: </p><ul><li>每次程序执行时生成盐值的密文是会变的</li><li>BCrypt不支持反运算(即通过密文得到明文), 只支持密码校验</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCrypt; <span class="hljs-comment">//注意这里的包别导错了</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestBCrypt</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.生成盐</span><br>        String gensalt = BCrypt.gensalt();<br>        System.out.println(<span class="hljs-string">&quot;salt:&quot;</span> + gensalt);<br><br>        <span class="hljs-comment">// 2.生成密码</span><br>        String saltPassword = BCrypt.hashpw(<span class="hljs-string">&quot;123456&quot;</span>, gensalt);<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + saltPassword);<br>        <br>        <span class="hljs-comment">// 3.对密码进行校验</span><br>        <span class="hljs-keyword">boolean</span> checkpw = BCrypt.checkpw(<span class="hljs-string">&quot;123456&quot;</span>, saltPassword);<br>        System.out.println(checkpw);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-商城新增管理员密码加密"><a href="#1-2-商城新增管理员密码加密" class="headerlink" title="1.2 商城新增管理员密码加密"></a>1.2 商城新增管理员密码加密</h3><p>代码实现</p><p>注意:</p><ul><li>大致的框架都已经完成了,这里只是实现让密码加密这一部分过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 增加</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Admin admin)</span></span>&#123;<br>      <span class="hljs-comment">//获取盐</span><br>      String gensalt = BCrypt.gensalt();<br>      <span class="hljs-comment">//对用户的密码进行加密</span><br>      String hashpw = BCrypt.hashpw(admin.getPassword(), gensalt);<br>      admin.setPassword(hashpw);<br>      adminMapper.insert(admin);<br>  &#125;<br></code></pre></td></tr></table></figure><p>cotroller层代码讲解</p><p>注意：</p><ul><li><code>@RequestBody</code>: 对前端传过来的json串自动赋值给这里的admin新参对象</li><li>数据库表的登录字段名称是<code>login_name</code>, 但是Admin类里是<code>loginName</code>, 不知道为啥这样也可以对应</li><li>启动服务的时候先启动注册中心的，在启动相应的微服务的类，不然会报错 <code>com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       adminService.add(admin);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-管理员登录密码验证"><a href="#1-3-管理员登录密码验证" class="headerlink" title="1.3 管理员登录密码验证"></a>1.3 管理员登录密码验证</h3><p>需求分析:</p><p>用户发送请求，输入用户名和密码。后台管理微服务controller接收参数，验证用户名和密码是否正确，如果正确则返回用户登录成功结果, 如果错误则返回登陆失败信息。 </p><p>代码实现</p><ol><li><p>AdminService新增方法定义 login()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 用户登录</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> admin</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Admin admin)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>AdminServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(Admin admin)</span> </span>&#123;<br>       <span class="hljs-comment">// 根据登录名查询管理员</span><br>       Admin admin1 = <span class="hljs-keyword">new</span> Admin();<br>       admin1.setLoginName(admin.getLoginName());<br>       admin1.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>       Admin admin2 = adminMapper.selectOne(admin1);<br>       <br>       <span class="hljs-comment">//比对数据库查询出的对象是否存在，存在则返回真，不存在则返回假</span><br>       <span class="hljs-keyword">if</span>(admin2 == <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> BCrypt.checkpw(admin.getPassword(), admin2.getPassword());<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>AdminController新增方法</p><p>注意：</p><ul><li><code>@RequestBody</code>不能少，不然前端传过来的json串无法赋值给admin对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <span class="hljs-comment">//post 表示会传递json串过来</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       <span class="hljs-keyword">boolean</span> login = adminService.login(admin);<br>       <span class="hljs-keyword">if</span> (login)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;登录成功&quot;</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.LOGINERROR, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-JWT-实现微服务鉴权"><a href="#2-JWT-实现微服务鉴权" class="headerlink" title="2. JWT 实现微服务鉴权"></a>2. <strong>JWT</strong> 实现微服务鉴权</h2><h3 id="2-1-什么是微服务鉴权"><a href="#2-1-什么是微服务鉴权" class="headerlink" title="2.1 什么是微服务鉴权"></a>2.1 什么是微服务鉴权</h3><img src="/images/image-20210727205423816.png" alt="image-20210727205423816"  /><p>我们可以采用JWT的方式来实现鉴权校验。</p><h3 id="2-2-JWT"><a href="#2-2-JWT" class="headerlink" title="2.2 JWT"></a>2.2 <strong>JWT</strong></h3><p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。</p><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p><ul><li><p><strong>头部</strong>（<strong>Header</strong>） </p><p>头部用于描述关于该JWT的最基本的信息，例如其类型以及签名所用的算法等。这也可以被表示成一个JSON对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;typ&quot;</span>:<span class="hljs-string">&quot;JWT&quot;</span>,<span class="hljs-attr">&quot;alg&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>在头部指明了签名算法是HS256算法。 我们进行BASE64编码，编码后的字符串如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJ<span class="hljs-number">0</span>eXAiOiJKV<span class="hljs-number">1</span>QiLCJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span><br></code></pre></td></tr></table></figure></li><li><p><strong>载荷</strong>（<strong>payload</strong>）</p><p>载荷就是存放有效信息的地方。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;sub&quot;</span>:<span class="hljs-string">&quot;1234567890&quot;</span>,<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;John Doe&quot;</span>,<span class="hljs-attr">&quot;admin&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p>然后将其进行base64编码，得到Jwt的第二部分</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJzdWIiOiIxMj<span class="hljs-name">M0</span><span class="hljs-symbol">NTY3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>Ikpva<span class="hljs-name">G4</span>gR<span class="hljs-name">G9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iO<span class="hljs-symbol">nRydWV9</span><br></code></pre></td></tr></table></figure></li><li><p><strong>签证</strong>（<strong>signature</strong>）</p><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">header</span></span> (base<span class="hljs-number">64</span>后的)<br><span class="hljs-attribute">payload</span> (base<span class="hljs-number">64</span>后的)<br><span class="hljs-attribute">secret</span> <br></code></pre></td></tr></table></figure><p>然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分（第三部分就包括了一二部分）</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">TJVA<span class="hljs-number">95</span><span class="hljs-keyword">Or</span><span class="hljs-name">M7</span>E<span class="hljs-number">2</span>cBab<span class="hljs-number">30</span>RMHrHDcEfxjoYZgeFO<span class="hljs-symbol">NFh7</span>HgQ<br></code></pre></td></tr></table></figure></li></ul><p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt: </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span>.eyJzdWIiOiIxMjM<span class="hljs-number">0</span>NTY<span class="hljs-number">3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>IkpvaG<span class="hljs-number">4</span>gRG<span class="hljs-number">9</span>lIiwiYWRtaW<span class="hljs-number">4</span>iOnRydWV<span class="hljs-number">9</span>.TJVA<span class="hljs-number">95</span>OrM<span class="hljs-number">7</span>E<span class="hljs-number">2</span>cBab<span class="hljs-number">30</span>RMHrHDcEfxjoYZgeFONFh<span class="hljs-number">7</span>HQ<br></code></pre></td></tr></table></figure><h3 id="2-3-JJWT签发与验证token"><a href="#2-3-JJWT签发与验证token" class="headerlink" title="2.3 JJWT签发与验证token"></a>2.3 <strong>JJWT</strong>签发与验证<strong>token</strong></h3><p>JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License，版本2.0)，JJWT很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。 </p><p>官方文档： <a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a> </p><h4 id="2-3-1-创建token"><a href="#2-3-1-创建token" class="headerlink" title="2.3.1 创建token"></a>2.3.1 创建<strong>token</strong></h4><ol><li><p>新建项目jwtTest中的pom.xml中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建测试类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        JwtBuilder builder = Jwts.builder()<br>                                .setId(<span class="hljs-string">&quot;888&quot;</span>)<br>                                .setSubject(<span class="hljs-string">&quot;小白&quot;</span>)<br>                                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                                .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itcast&quot;</span>);<br><br>        System.out.println(builder.compact());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行打印结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eyJhbGciOiJIUzI1NiJ9</span>.eyJqdGkiOiI<span class="hljs-number">4</span>ODgiLCJzdWIiOiLlsI_nmb<span class="hljs-number">0</span>iLCJpYXQiOjE<span class="hljs-number">2</span>MjczOTI<span class="hljs-number">3</span>MzR<span class="hljs-number">9</span>.Je<span class="hljs-number">1</span>REFE<span class="hljs-number">0</span>D<span class="hljs-number">0</span>w<span class="hljs-number">9</span>eV<span class="hljs-number">3</span>rUl<span class="hljs-number">6</span>sqQN<span class="hljs-number">4</span>m<span class="hljs-number">3</span>Z-LSShbyn<span class="hljs-number">8</span>JGleEgw<br></code></pre></td></tr></table></figure><p>由于载荷中包含时间，每次生成的jwt是不一样的。</p></li></ol><h4 id="2-3-2-解析token"><a href="#2-3-2-解析token" class="headerlink" title="2.3.2 解析token"></a>2.3.2 解析<strong>token</strong></h4><p>我们刚才已经创建了token ，在web应用中这个操作是由服务端进行然后发给客户端，客户端在下次向服务端发送请求时需要携带这个token，那服务端接到这个token 应该解析出token中的信息（例如用户id）,根据这些信息查询数据库返回相应的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        JwtBuilder builder = Jwts.builder()<br>                                .setId(<span class="hljs-string">&quot;888&quot;</span>)<br>                                .setSubject(<span class="hljs-string">&quot;小白&quot;</span>)<br>                                .setIssuedAt(<span class="hljs-keyword">new</span> Date())<br>                                .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;itcast&quot;</span>);<br><br>        String compactJwt = builder.compact();<br>        System.out.println(compactJwt);<br><br>        Claims claims = Jwts.parser().setSigningKey(<span class="hljs-string">&quot;itcast&quot;</span>).parseClaimsJws(compactJwt).getBody();<br>        System.out.println(claims);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiJ9</span>.eyJqdGkiOiI<span class="hljs-number">4</span>ODgiLCJzdWIiOiLlsI_<span class="hljs-symbol">nmb0</span>iLCJpYXQiOjE<span class="hljs-number">2</span>MjczOT<span class="hljs-name">M2</span><span class="hljs-symbol">NDN9</span><span class="hljs-number">.2</span>QzU<span class="hljs-number">2</span>Z-MSSGpspIe<span class="hljs-number">9</span>za<span class="hljs-number">7</span>SmkLJT<span class="hljs-number">2</span>tqHv<span class="hljs-number">9</span>mOBQ<span class="hljs-symbol">N1</span>JWqBU<br>&#123;jti=<span class="hljs-number">888</span>, <span class="hljs-keyword">sub</span>=小白, iat=<span class="hljs-number">1627393643</span>&#125;<br></code></pre></td></tr></table></figure><p>试着将token或签名秘钥(代码里面的<code>&quot;itcast&quot;</code>字符串)篡改一下，会发现运行时就会报错，所以解析token也就是验证token.</p><p>还可以设置token的过期时间，自定义claims(载荷里的键值对)等。具体用法可以上网查也可以看本地笔记。</p><h3 id="2-4-畅购微服务鉴权代码实现"><a href="#2-4-畅购微服务鉴权代码实现" class="headerlink" title="2.4 畅购微服务鉴权代码实现"></a>2.4 畅购微服务鉴权代码实现</h3><h4 id="2-4-1-思路分析"><a href="#2-4-1-思路分析" class="headerlink" title="2.4.1 思路分析"></a>2.4.1 思路分析</h4><img src="/images/image-20210727225002149.png" alt="image-20210727225002149" style="zoom:80%;" /><ol><li>用户进入网关开始登陆，网关过滤器进行判断，如果是登录，则路由到后台管理微服务进行登录</li><li>用户登录成功，后台管理微服务签发JWT TOKEN信息返回给用户 </li><li>用户再次进入网关开始访问，网关过滤器接收用户携带的TOKEN </li><li>网关过滤器解析TOKEN ，判断是否有权限，如果有，则放行，如果没有则返回未认证错误</li></ol><h4 id="2-4-2-系统微服务签发token"><a href="#2-4-2-系统微服务签发token" class="headerlink" title="2.4.2 系统微服务签发token"></a>2.4.2 系统微服务签发<strong>token</strong></h4><ol><li><p>在changgou_service_system添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在changgou_service_system的util包中创建类： JwtUtil (这个工具类会用就行，需要深入学习的时候再学)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//有效期为</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long JWT_TTL = <span class="hljs-number">3600000L</span>;<span class="hljs-comment">// 60 * 60 *1000  一个小时</span><br>    <span class="hljs-comment">//设置秘钥明文</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JWT_KEY = <span class="hljs-string">&quot;itcast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createJWT</span><span class="hljs-params">(String id, String subject, Long ttlMillis)</span> </span>&#123;<br><br>        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;<br>        <span class="hljs-keyword">long</span> nowMillis = System.currentTimeMillis();<br>        Date now = <span class="hljs-keyword">new</span> Date(nowMillis);<br>        <span class="hljs-keyword">if</span>(ttlMillis==<span class="hljs-keyword">null</span>)&#123;<br>            ttlMillis=JwtUtil.JWT_TTL;<br>        &#125;<br>        <span class="hljs-keyword">long</span> expMillis = nowMillis + ttlMillis;<br>        Date expDate = <span class="hljs-keyword">new</span> Date(expMillis);<br>        SecretKey secretKey = generalKey();<br><br>        JwtBuilder builder = Jwts.builder()<br>                .setId(id)              <span class="hljs-comment">//唯一的ID</span><br>                .setSubject(subject)   <span class="hljs-comment">// 主题  可以是JSON数据</span><br>                .setIssuer(<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">// 签发者</span><br>                .setIssuedAt(now)      <span class="hljs-comment">// 签发时间</span><br>                .signWith(signatureAlgorithm, secretKey) <span class="hljs-comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span><br>                .setExpiration(expDate);<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成加密后的秘钥 secretKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecretKey <span class="hljs-title">generalKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);<br>        SecretKey key = <span class="hljs-keyword">new</span> SecretKeySpec(encodedKey, <span class="hljs-number">0</span>, encodedKey.length, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改AdminController的login方法, 用户登录成功 则签发TOKEN</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <span class="hljs-comment">//post 表示会传递json串过来</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Admin admin)</span></span>&#123;<br>       <span class="hljs-keyword">boolean</span> login = adminService.login(admin);<br>       <span class="hljs-keyword">if</span> (login)&#123;  <span class="hljs-comment">//如果验证成功</span><br>           Map&lt;String, String&gt; info = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>           info.put(<span class="hljs-string">&quot;username&quot;</span>, admin.getLoginName());<br>           String token = JwtUtil.createJWT(UUID.randomUUID().toString(), admin.getLoginName(), <span class="hljs-keyword">null</span>);<br>           info.put(<span class="hljs-string">&quot;token&quot;</span>, token);<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;登录成功&quot;</span>, info);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, StatusCode.LOGINERROR, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><p>使用postman测试</p><h4 id="2-4-3-网关过滤器验证token"><a href="#2-4-3-网关过滤器验证token" class="headerlink" title="2.4.3 网关过滤器验证token"></a>2.4.3 网关过滤器验证<strong>token</strong></h4><ol><li><p>在changgou_gateway_system网关系统添加依赖 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>util包下创建JWTUtil类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JwtUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">//有效期为</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Long JWT_TTL = <span class="hljs-number">3600000L</span>;<span class="hljs-comment">// 60 * 60 *1000  一个小时</span><br>    <span class="hljs-comment">//设置秘钥明文</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String JWT_KEY = <span class="hljs-string">&quot;itcast&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> subject</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ttlMillis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createJWT</span><span class="hljs-params">(String id, String subject, Long ttlMillis)</span> </span>&#123;<br><br>        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;<br>        <span class="hljs-keyword">long</span> nowMillis = System.currentTimeMillis();<br>        Date now = <span class="hljs-keyword">new</span> Date(nowMillis);<br>        <span class="hljs-keyword">if</span>(ttlMillis==<span class="hljs-keyword">null</span>)&#123;<br>            ttlMillis=JwtUtil.JWT_TTL;<br>        &#125;<br>        <span class="hljs-keyword">long</span> expMillis = nowMillis + ttlMillis;<br>        Date expDate = <span class="hljs-keyword">new</span> Date(expMillis);<br>        SecretKey secretKey = generalKey();<br><br>        JwtBuilder builder = Jwts.builder()<br>                .setId(id)              <span class="hljs-comment">//唯一的ID</span><br>                .setSubject(subject)   <span class="hljs-comment">// 主题  可以是JSON数据</span><br>                .setIssuer(<span class="hljs-string">&quot;admin&quot;</span>)     <span class="hljs-comment">// 签发者</span><br>                .setIssuedAt(now)      <span class="hljs-comment">// 签发时间</span><br>                .signWith(signatureAlgorithm, secretKey) <span class="hljs-comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span><br>                .setExpiration(expDate);<span class="hljs-comment">// 设置过期时间</span><br>        <span class="hljs-keyword">return</span> builder.compact();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成加密后的秘钥 secretKey</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SecretKey <span class="hljs-title">generalKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);<br>        SecretKey key = <span class="hljs-keyword">new</span> SecretKeySpec(encodedKey, <span class="hljs-number">0</span>, encodedKey.length, <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建过滤器，用于token验证</p><p>注意：记得把过滤类放入spring容器中，不要忘了<code>@Component</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        <span class="hljs-comment">//1.获取请求</span><br>        ServerHttpRequest request = exchange.getRequest();<br>        <span class="hljs-comment">//2.获取响应</span><br>        ServerHttpResponse response = exchange.getResponse();<br>        <span class="hljs-comment">//3.如果是登录请求则放行</span><br>        <span class="hljs-keyword">if</span>(request.getURI().getPath().contains(<span class="hljs-string">&quot;/admin/login&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//4.获取请求头</span><br>        HttpHeaders headers = request.getHeaders();<br>        <span class="hljs-comment">//5.获取请求头中的令牌。自己写路径的时候记得按照key=Authorization, value=token的形式来，不要瞎起名字</span><br>        String token = headers.getFirst(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        <span class="hljs-comment">//6.判断请求头中是否有令牌</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(token))&#123;<br>            <span class="hljs-comment">//7. 响应中放入返回的状态吗, 没有权限访问</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//8.返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br>        <span class="hljs-comment">//9.如果请求头中有令牌则解析令牌</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            JwtUtil.parseJWT(token);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-comment">//10. 解析jwt令牌出错, 说明令牌过期或者伪造等不合法情况出现</span><br>            response.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-comment">//11.返回</span><br>            <span class="hljs-keyword">return</span> response.setComplete();<br>        &#125;<br><br>        <span class="hljs-comment">//12.放行</span><br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>最后再postman中进行测试</p><h1 id="Part-04-商品管理"><a href="#Part-04-商品管理" class="headerlink" title="Part-04 商品管理"></a>Part-04 商品管理</h1><h2 id="1-分布式ID生成解决方案"><a href="#1-分布式ID生成解决方案" class="headerlink" title="1. 分布式ID生成解决方案"></a>1. 分布式<strong>ID</strong>生成解决方案</h2><p>数据太多导致数据库单表性能下降，需要对数据库进行分库分表、数据库多实例部署等，如果此时这张表还按照主键自增，因为已经不在一个机器上了，这种方式会使主键重复。为了避免ID重复，因此需要分布式ID</p><h3 id="1-1-分布式ID生成解决方案"><a href="#1-1-分布式ID生成解决方案" class="headerlink" title="1.1 分布式ID生成解决方案"></a>1.1 分布式<strong>ID</strong>生成解决方案</h3><p>UUID, Redis, 开源算法<strong>snowflake</strong> 都可以实现分布式ID。这里主要讲下开源算法<strong>snowflake</strong> ，其他的如果用到去网上搜博客深入学习。</p><h4 id="1-1-1-开源算法snowflake"><a href="#1-1-1-开源算法snowflake" class="headerlink" title="1.1.1 开源算法snowflake"></a>1.1.1 开源算法<strong>snowflake</strong></h4><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型（8字节，64位）的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0</p><img src="/images/image-20210728121416974.png" alt="image-20210728121416974" style="zoom:80%;" /><p>快速入门</p><ol><li><p>新建工程，将资料/工具类下的IdWorker.java拷贝到工程中 （这个工具类会用就行了，需要深入学习时再细看）</p></li><li><p>编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">snowFlakeTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        IdWorker idWorker = <span class="hljs-keyword">new</span> IdWorker(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>            <span class="hljs-keyword">long</span> id = idWorker.nextId();<br>            System.out.println(id);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="1-1-2-配置分布式ID生成器"><a href="#1-1-2-配置分布式ID生成器" class="headerlink" title="1.1.2 配置分布式ID生成器"></a>1.1.2 配置分布式<strong>ID</strong>生成器</h4><ol><li><p>IdWorker.java拷贝到changgou_common工程com.changgou.util包中 （放到common包是因为微服务都要用到他。如果把这个类部署到微服务会很麻烦，要一个一个部署）</p></li><li><p>changgou_service_goods的application.yml添加配置 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">workerId:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">datacenterId:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>修改GoodsApplication, 增加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;workerId&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer workerId;<br>   <br>   <span class="hljs-meta">@Value(&quot;$&#123;datacenterId&#125;&quot;)</span><br>   <span class="hljs-keyword">private</span> Integer  datacenterId;<br>   <br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> IdWorker <span class="hljs-title">idWorker</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> IdWorker(workerId,datacenterId);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-新增和修改商品"><a href="#2-新增和修改商品" class="headerlink" title="2. 新增和修改商品"></a>2. 新增和修改商品</h2><h3 id="2-1-概念与表结构分析"><a href="#2-1-概念与表结构分析" class="headerlink" title="2.1 概念与表结构分析"></a><strong>2.1</strong> 概念与表结构分析</h3><h4 id="2-1-1-SPU与SKU概念"><a href="#2-1-1-SPU与SKU概念" class="headerlink" title="2.1.1 SPU与SKU概念"></a><strong>2.1.1 SPU</strong>与<strong>SKU</strong>概念</h4><p><strong>SPU = Standard Product Unit （标准产品单位）</strong> </p><ul><li><p>概念 : SPU 是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。 </p></li><li><p>通俗点讲，属性值、特性相同的货品就可以称为一个 SPU</p><p>例如：华为<strong>P30</strong> 就是一个 <strong>SPU</strong> </p></li></ul><p><strong>SKU=stock keeping unit ( 库存量单位)</strong></p><ul><li><p>SKU 即库存进出计量的单位， 可以是以件、盒、托盘等为单位。</p></li><li><p>SKU 是物理上不可分割的最小存货单元。在使用时要根据不同业态，不同管理模式来处理。</p><p>例如：华为<strong>P30</strong> 红色 <strong>64G</strong> 就是一个 <strong>SKU</strong></p></li></ul><h4 id="2-1-2-表结构分析"><a href="#2-1-2-表结构分析" class="headerlink" title="2.1.2 表结构分析"></a><strong>2.1.2</strong> 表结构分析</h4><p>tb_spu 表 （SPU表）</p><img src="/images/image-20210728142103218.png" alt="image-20210728142103218"  /><p>tb_sku 表（SKU商品表）</p><p><img src="/images/image-20210728142351938.png" alt="image-20210728142351938"></p><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a><strong>2.2</strong> 代码实现</h3><h4 id="2-2-1-SPU与SKU列表的保存"><a href="#2-2-1-SPU与SKU列表的保存" class="headerlink" title="2.2.1 SPU与SKU列表的保存"></a>2.2.1 <strong>SPU</strong>与<strong>SKU</strong>列表的保存</h4><ol><li><p>changgou_service_goods_api工程的pojo包中创建组合实体类Goods </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Spu spu;<br>    <span class="hljs-keyword">private</span> List&lt;Sku&gt; skuList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Spu <span class="hljs-title">getSpu</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> spu;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSpu</span><span class="hljs-params">(Spu spu)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.spu = spu;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">getSkuList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> skuList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSkuList</span><span class="hljs-params">(List&lt;Sku&gt; skuList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.skuList = skuList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuService新增方法add(Goods goods) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Goods goods)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> CategoryMapper categoryMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> SkuMapper skuMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> BrandMapper brandMapper;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> IdWorker idWorker;<br>   <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 增加</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Transactional</span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Goods goods)</span></span>&#123;<br>   <br>       Spu spu = goods.getSpu();<br>       <span class="hljs-keyword">long</span> spuId = idWorker.nextId();<br>       spu.setId(String.valueOf(spuId));<br>       spu.setIsDelete(<span class="hljs-string">&quot;0&quot;</span>);<br>       spu.setIsMarketable(<span class="hljs-string">&quot;0&quot;</span>);<br>       spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<br>       spuMapper.insertSelective(spu);<br>   <br>       saveSkuList(goods);<br>   &#125;<br>   <br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存sku列表。</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * 这里单独加一个方法是因为这个操作步骤较多</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSkuList</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//获取spu对象</span><br>       Spu spu = goods.getSpu();<br>       <span class="hljs-comment">//获取当前日期</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>       <span class="hljs-comment">//获取品牌对象</span><br>       Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());<br>       <span class="hljs-comment">//获取分类对象</span><br>       Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());<br>       <span class="hljs-comment">//获取sku集合对象</span><br>       List&lt;Sku&gt; skuList = goods.getSkuList();<br>   <br>       <span class="hljs-keyword">if</span>(skuList != <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-comment">//小技巧： 直接打 iter 可以快速出来下面的遍历代码</span><br>           <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>               <span class="hljs-comment">//设置sku主键ID</span><br>               sku.setId(String.valueOf(idWorker.nextId()));<br>               <span class="hljs-comment">//设置sku规格</span><br>               <span class="hljs-keyword">if</span>(sku.getSpec() == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(sku.getSpec()))&#123;<br>                   sku.setSpec(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>               &#125;<br>               <span class="hljs-comment">//设置sku名称(商品名称 + 规格)</span><br>               String name = spu.getName();<br>               <span class="hljs-comment">//将规格json字符串转换成Map</span><br>               Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);<br>               <span class="hljs-keyword">if</span> (specMap != <span class="hljs-keyword">null</span> &amp;&amp; specMap.size() &gt;<span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-keyword">for</span> (String value : specMap.values()) &#123;<br>                       name += <span class="hljs-string">&quot; &quot;</span>+value;<br>                   &#125;<br>               &#125;<br>   <br>               sku.setName(name);<span class="hljs-comment">//名称</span><br>               sku.setSpuId(spu.getId());<span class="hljs-comment">//设置spu的ID</span><br>               sku.setCreateTime(date);<span class="hljs-comment">//创建日期</span><br>               sku.setUpdateTime(date);<span class="hljs-comment">//修改日期</span><br>               sku.setCategoryId(category.getId());<span class="hljs-comment">//商品分类ID</span><br>               sku.setCategoryName(category.getName());<span class="hljs-comment">//商品分类名称</span><br>               sku.setBrandName(brand.getName());<span class="hljs-comment">//品牌名称</span><br>               skuMapper.insertSelective(sku);<span class="hljs-comment">//插入sku表数据</span><br>           &#125;<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 新增数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Goods goods)</span></span>&#123;<br>       spuService.add(goods);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;添加成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-2-品牌与分类关联"><a href="#2-2-2-品牌与分类关联" class="headerlink" title="2.2.2 品牌与分类关联"></a>2.2.2 品牌与分类关联</h4><p>将分类ID与SPU的品牌ID 一起插入到tb_category_brand表中</p><ol><li><p>创建实体类</p><p>注意：</p><ul><li>这个表是联合主键，所以categoryId和brandId都有@Id注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Table(name=&quot;tb_category_brand&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CategoryBrand</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer categoryId;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Integer brandId;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCategoryId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> categoryId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCategoryId</span><span class="hljs-params">(Integer categoryId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.categoryId = categoryId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getBrandId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> brandId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBrandId</span><span class="hljs-params">(Integer brandId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.brandId = brandId;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建数据访问接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CategoryBrandMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">CategoryBrand</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl引入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CategoryBrandMapper categoryBrandMapper;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuServiceImpl的saveSkuList方法，添加分类与品牌之间的关联, 修改后代码如下:</p><p>注意：</p><ul><li>在原基础上添加的部分在两个<code>=</code>之间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 保存sku列表。</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveSkuList</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//获取spu对象</span><br>       Spu spu = goods.getSpu();<br>       <span class="hljs-comment">//获取当前日期</span><br>       Date date = <span class="hljs-keyword">new</span> Date();<br>       <span class="hljs-comment">//获取品牌对象</span><br>       Brand brand = brandMapper.selectByPrimaryKey(spu.getBrandId());<br>       <span class="hljs-comment">//获取分类对象</span><br>       Category category = categoryMapper.selectByPrimaryKey(spu.getCategory3Id());<br>   <br>       <span class="hljs-comment">// =========================================</span><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 添加分类与品牌之间的关联</span><br><span class="hljs-comment">        */</span><br>       CategoryBrand categoryBrand = <span class="hljs-keyword">new</span> CategoryBrand();<br>       categoryBrand.setBrandId(spu.getBrandId());<br>       categoryBrand.setCategoryId(spu.getCategory3Id());<br>       <span class="hljs-keyword">int</span> count = categoryBrandMapper.selectCount(categoryBrand);<br>       <span class="hljs-comment">//判断是否有这个品牌和分类的关系数据</span><br>       <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<br>           <span class="hljs-comment">//如果没有关系数据则添加品牌和分类关系数据</span><br>           categoryBrandMapper.insert(categoryBrand);<br>       &#125;<br>       <span class="hljs-comment">// =========================================</span><br>       <br>       <span class="hljs-comment">//获取sku集合对象</span><br>       List&lt;Sku&gt; skuList = goods.getSkuList();<br>   <br>       <span class="hljs-keyword">if</span>(skuList != <span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-comment">//小技巧： 直接打 iter 可以快速出来下面的遍历代码</span><br>           <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>               <span class="hljs-comment">//设置sku主键ID</span><br>               sku.setId(String.valueOf(idWorker.nextId()));<br>               <span class="hljs-comment">//设置sku规格</span><br>               <span class="hljs-keyword">if</span>(sku.getSpec() == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(sku.getSpec()))&#123;<br>                   sku.setSpec(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>);<br>               &#125;<br>               <span class="hljs-comment">//设置sku名称(商品名称 + 规格)</span><br>               String name = spu.getName();<br>               <span class="hljs-comment">//将规格json字符串转换成Map</span><br>               Map&lt;String, String&gt; specMap = JSON.parseObject(sku.getSpec(), Map.class);<br>               <span class="hljs-keyword">if</span> (specMap != <span class="hljs-keyword">null</span> &amp;&amp; specMap.size() &gt;<span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-keyword">for</span> (String value : specMap.values()) &#123;<br>                       name += <span class="hljs-string">&quot; &quot;</span>+value;<br>                   &#125;<br>               &#125;<br>   <br>               sku.setName(name);<span class="hljs-comment">//名称</span><br>               sku.setSpuId(spu.getId());<span class="hljs-comment">//设置spu的ID</span><br>               sku.setCreateTime(date);<span class="hljs-comment">//创建日期</span><br>               sku.setUpdateTime(date);<span class="hljs-comment">//修改日期</span><br>               sku.setCategoryId(category.getId());<span class="hljs-comment">//商品分类ID</span><br>               sku.setCategoryName(category.getName());<span class="hljs-comment">//商品分类名称</span><br>               sku.setBrandName(brand.getName());<span class="hljs-comment">//品牌名称</span><br>               skuMapper.insertSelective(sku);<span class="hljs-comment">//插入sku表数据</span><br>           &#125;<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-3-根据ID查询商品"><a href="#2-2-3-根据ID查询商品" class="headerlink" title="2.2.3 根据ID查询商品"></a>2.2.3 根据ID查询商品</h4><p>需求：根据id 查询SPU和SKU列表 , 结果以goods对象返回</p><p>代码实现：</p><ol><li><p>changgou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 根据ID查询商品</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function">Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Goods <span class="hljs-title">findGoodsById</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//查询SKU 列表</span><br>    Example example = <span class="hljs-keyword">new</span> Example(Sku.class);<br>    Example.Criteria criteria = example.createCriteria();<br>    criteria.andEqualTo(<span class="hljs-string">&quot;spuId&quot;</span>, id);<br>    List&lt;Sku&gt; skuList = skuMapper.selectByExample(example);<br>   <br>    <span class="hljs-comment">//封装，返回</span><br>    Goods goods = <span class="hljs-keyword">new</span> Goods();<br>    goods.setSpu(spu);<br>    goods.setSkuList(skuList);<br>    <span class="hljs-keyword">return</span> goods;<br>&#125;<br>   <br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的findById方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    Goods goods = spuService.findGoodsById(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;查询成功&quot;</span>,goods);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-4-保存修改"><a href="#2-2-4-保存修改" class="headerlink" title="2.2.4 保存修改"></a>2.2.4 保存修改</h4><ol><li><p>changgou_service_goods工程SpuService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 修改数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Goods goods)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods工程SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Goods goods)</span> </span>&#123;<br>       <span class="hljs-comment">//取出spu部分</span><br>       Spu spu = goods.getSpu();<br>       spuMapper.updateByPrimaryKey(spu);<br>   <br>       <span class="hljs-comment">//删除原sku列表</span><br>       Example example = <span class="hljs-keyword">new</span> Example(Sku.class);<br>       Example.Criteria criteria = example.createCriteria();<br>       criteria.andEqualTo(<span class="hljs-string">&quot;spuId&quot;</span>, spu.getId());<br>       skuMapper.deleteByExample(example);<br>   <br>       <span class="hljs-comment">//保存sku列表</span><br>       saveSkuList(goods);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>修改SpuController的update方法</p><p>注意：</p><ul><li><code>&#123;id&#125;</code>是把请求路径中对应部分的字符串赋值给id, 并不是要在请求路径中拼接 <code>？id=string</code>这种写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/***</span><br><span class="hljs-comment">    * 修改数据</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> goods</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PutMapping(value=&quot;/&#123;id&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Goods goods,<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>       spuService.update(goods);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>,StatusCode.OK,<span class="hljs-string">&quot;修改成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-商品审核与上下架"><a href="#3-商品审核与上下架" class="headerlink" title="3. 商品审核与上下架"></a>3. 商品审核与上下架</h2><p>需求分析：</p><ul><li>商品新增后，审核状态为0（未审核），默认为下架状态(也为0)</li><li>审核商品，需要校验是否是被删除的商品，如果未删除则修改审核状态为1，并自动上架</li><li>下架商品，需要校验是否是被删除的商品，如果未删除则修改上架状态为0</li><li>上架商品，需要审核状态为1,如果为1,则更改上下架状态为1</li></ul><p>实现思路：</p><ul><li>按照ID查询SPU信息</li><li>判断修改审核、上架下架状态</li><li>保存Spu</li></ul><h3 id="3-1-代码实现"><a href="#3-1-代码实现" class="headerlink" title="3.1 代码实现"></a>3.1 代码实现</h3><h4 id="3-1-1-商品审核"><a href="#3-1-1-商品审核" class="headerlink" title="3.1.1 商品审核"></a>3.1.1 商品审核</h4><p>需要校验是否是被删除的商品，如果未删除则修改审核状态为1，并自动上架</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 审核</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">audit</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现方法</p><p>注意： </p><ul><li>开启<code>@Transactional</code>事务注解(对于要修改数据库的操作，都加上事务注解)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">audit</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu对象</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span>(spu == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品不存在&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//判断当前spu是否处于删除状态</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(spu.getIsDelete()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品处于删除状态&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//不处于删除状态,修改审核状态为1,上下架状态为1</span><br>    spu.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>    spu.setIsMarketable(<span class="hljs-string">&quot;1&quot;</span>);<br>   <br>    <span class="hljs-comment">//执行修改操作</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/audit/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">audit</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.audit(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;商品审核成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-1-2-下架商品"><a href="#3-1-2-下架商品" class="headerlink" title="3.1.2 下架商品"></a>3.1.2 下架商品</h4><p>校验是否是被删除的商品，如果未删除则修改上架状态为0</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    <span class="hljs-comment">//查询spu</span><br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span> (spu == <span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品不存在&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//判断当前商品是否处于删除状态</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(spu.getIsDelete()))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前商品处于删除状态&quot;</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">//商品处于未删除状态的话,则修改上下架状态为已下架(0)</span><br>    spu.setIsMarketable(<span class="hljs-string">&quot;0&quot;</span>);<br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(&quot;/pull/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.pull(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;商品下架成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-1-3-上架商品"><a href="#3-1-3-上架商品" class="headerlink" title="3.1.3 上架商品"></a>3.1.3 上架商品</h4><p>必须是通过审核的商品才能上架</p><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl 实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架商品</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-keyword">if</span>(!spu.getStatus().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;未通过审核的商品不能上架！&quot;</span>);<br>    &#125;<br>    spu.setIsMarketable(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//上架状态</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上架</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/put/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.put(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-删除与还原商品"><a href="#4-删除与还原商品" class="headerlink" title="4. 删除与还原商品"></a>4. 删除与还原商品</h2><p>需求分析：</p><ul><li>商品列表中的删除商品功能，并非真正的删除(物理删除)，而是采用逻辑删除将删除标记的字段设置为1.</li><li>在回收站中有还原商品的功能，将删除标记的字段设置为0</li><li>在回收站中有删除商品的功能，是真正的物理删除,将数据从数据库中删除掉。</li></ul><p>实现思路：</p><ul><li>商品列表中的删除商品,执行逻辑删除，修改spu表is_delete字段为1</li><li>商品回收站中的还原商品,修改spu表is_delete字段为0</li><li>商品回收站中的删除商品,执行delete操作,进行物理删除</li></ul><h3 id="4-1-代码实现"><a href="#4-1-代码实现" class="headerlink" title="4.1 代码实现"></a>4.1 代码实现</h3><h4 id="4-1-1-逻辑删除商品"><a href="#4-1-1-逻辑删除商品" class="headerlink" title="4.1.1 逻辑删除商品"></a>4.1.1 逻辑删除商品</h4><ol><li><p>修改SpuServiceImpl的delete方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String id)</span></span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否下架的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsMarketable().equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;必须先下架再删除！&quot;</span>);<br>    &#125;<br>    spu.setIsDelete(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//删除</span><br>    spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未审核</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-1-2-还原被删除的商品"><a href="#4-1-2-还原被删除的商品" class="headerlink" title="4.1.2 还原被删除的商品"></a>4.1.2 还原被删除的商品</h4><ol><li><p>SpuService新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">restore</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl实现此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">restore</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否删除的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsDelete().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;此商品未删除！&quot;</span>);<br>    &#125;<br>    spu.setIsDelete(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未删除</span><br>    spu.setStatus(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//未审核</span><br>    spuMapper.updateByPrimaryKeySelective(spu);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 恢复数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PutMapping(&quot;/restore/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">restore</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>    spuService.restore(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;还原成功&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-1-3-物理删除商品"><a href="#4-1-3-物理删除商品" class="headerlink" title="4.1.3 物理删除商品"></a>4.1.3 物理删除商品</h4><p>判断必须逻辑删除商品才能物理删除</p><ol><li><p>SpuService 新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 物理删除</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">realDelete</span><span class="hljs-params">(String id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>SpuServiceImpl 实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">realDelete</span><span class="hljs-params">(String id)</span> </span>&#123;<br>    Spu spu = spuMapper.selectByPrimaryKey(id);<br>    <span class="hljs-comment">//检查是否删除的商品</span><br>    <span class="hljs-keyword">if</span>(!spu.getIsDelete().equals(<span class="hljs-string">&quot;1&quot;</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;此商品未删除！&quot;</span>);<br>    &#125;<br>    spuMapper.deleteByPrimaryKey(id);<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>SpuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 物理删除</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@DeleteMapping(&quot;/realDelete/&#123;id&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">realDelete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span></span>&#123;<br>       spuService.realDelete(id);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK, <span class="hljs-string">&quot;物理删除成功&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="Part-05-网站首页高可用nginx-lua"><a href="#Part-05-网站首页高可用nginx-lua" class="headerlink" title="Part-05 网站首页高可用nginx+lua"></a>Part-05 网站首页高可用nginx+lua</h1><h2 id="1-Lua"><a href="#1-Lua" class="headerlink" title="1. Lua"></a>1. Lua</h2><h3 id="1-1-Lua介绍"><a href="#1-1-Lua介绍" class="headerlink" title="1.1 Lua介绍"></a>1.1 Lua介绍</h3><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。（如果想要了解他的详细背景去搜对应资料）</p><p><strong>lua 语言具有以下特性</strong>：（还不是很能理解，慢慢理解）</p><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><p><strong>应用场景</strong></p><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤 缓存等等的逻辑，例如nginx。</li></ul><h3 id="1-2-lua的安装"><a href="#1-2-lua的安装" class="headerlink" title="1.2 lua的安装"></a>1.2 lua的安装</h3><p>这里省略，有需要去搜具体博客或者本地笔记查看</p><h3 id="1-3-快速入门"><a href="#1-3-快速入门" class="headerlink" title="1.3 快速入门"></a>1.3 快速入门</h3><p>开启和关闭(ctrl + c)lua命令行交互</p><p><img src="/images/image-20210729135124466.png" alt="image-20210729135124466"></p><p>创建hello.lua文件，执行语句：</p><p><img src="/images/image-20210729134904915.png" alt="image-20210729134904915"></p><h3 id="1-4-LUA的基本语法"><a href="#1-4-LUA的基本语法" class="headerlink" title="1.4 LUA的基本语法"></a>1.4 LUA的基本语法</h3><ul><li>lua有交互式编程和脚本式编程。一般采用脚本式编程。</li></ul><h4 id="1-4-1-注释"><a href="#1-4-1-注释" class="headerlink" title="1.4.1 注释"></a>1.4.1 注释</h4><p>单行注释：两个减号是单行注释:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[</span><br><span class="hljs-comment"> 多行注释</span><br><span class="hljs-comment"> 多行注释</span><br><span class="hljs-comment"> --]]</span><br></code></pre></td></tr></table></figure><h4 id="1-4-2-关键字"><a href="#1-4-2-关键字" class="headerlink" title="1.4.2 关键字"></a>1.4.2 关键字</h4><p>lua的关键字如下：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>break</td><td>do</td><td>else</td></tr><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td></td><td></td><td></td></tr></tbody></table><h4 id="1-4-3-定义变量"><a href="#1-4-3-定义变量" class="headerlink" title="1.4.3 定义变量"></a>1.4.3 定义变量</h4><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 全局变量赋值</span><br>a=<span class="hljs-number">1</span><br><span class="hljs-comment">-- 局部变量赋值</span><br><span class="hljs-keyword">local</span> b=<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p>如果变量没有初始化：则 它的值为nil</p><h4 id="1-4-4-Lua中的数据类型"><a href="#1-4-4-Lua中的数据类型" class="headerlink" title="1.4.4 Lua中的数据类型"></a>1.4.4 Lua中的数据类型</h4><p>Lua 是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><h4 id="1-4-5-流程控制"><a href="#1-4-5-流程控制" class="headerlink" title="1.4.5 流程控制"></a>1.4.5 流程控制</h4><p>如下：类似于if else </p><p>注意：</p><ul><li>以<code>end</code>结束</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[ 0 为 true ]</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0 为 true&quot;</span>)<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0 不为true&quot;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="1-4-6-函数"><a href="#1-4-6-函数" class="headerlink" title="1.4.6 函数"></a>1.4.6 函数</h4><p>lua中也可以定义函数。例如：</p><p>注意：</p><ul><li>函数也是以<code>end</code>结束</li><li>稍微注意下他的字符串拼接方式</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--[[ 函数返回两个值的最大值 --]]</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span><span class="hljs-params">(num1, num2)</span></span><br><br>   <span class="hljs-keyword">if</span> (num1 &gt; num2) <span class="hljs-keyword">then</span><br>      result = num1;<br>   <span class="hljs-keyword">else</span><br>      result = num2;<br>   <span class="hljs-keyword">end</span><br><br>   <span class="hljs-keyword">return</span> result; <br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 调用函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两值比较最大值为 &quot;</span>,<span class="hljs-built_in">max</span>(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;两值比较最大值为 &quot;</span>,<span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>执行之后的结果：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">两值比较最大值为     <span class="hljs-number">10</span><br>两值比较最大值为     <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="1-4-7-require-函数"><a href="#1-4-7-require-函数" class="headerlink" title="1.4.7 require 函数"></a>1.4.7 require 函数</h4><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><p>用法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span> <span class="hljs-string">&quot;&lt;模块名&gt;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-nginx-lua-redis实现广告缓存"><a href="#2-nginx-lua-redis实现广告缓存" class="headerlink" title="2. nginx+lua+redis实现广告缓存"></a>2. nginx+lua+redis实现广告缓存</h2><p>需求分析：</p><ul><li>需要在首页页面不同位置处显示相应的广告</li></ul><h3 id="2-1-nginx"><a href="#2-1-nginx" class="headerlink" title="2.1 nginx"></a>2.1 nginx</h3><p>负载均衡功能</p><img src="/images/image-20210729153602339.png" alt="image-20210729153602339" style="zoom: 80%;" /><p>反向代理功能</p><img src="/images/image-20210729153737126.png" alt="image-20210729153737126" style="zoom:80%;" /><p>http服务器功能</p><img src="/images/image-20210729153818568.png" alt="image-20210729153818568" style="zoom:80%;" /><h3 id="2-2-OpenResty"><a href="#2-2-OpenResty" class="headerlink" title="2.2 OpenResty"></a>2.2 OpenResty</h3><h4 id="2-2-1-OpenResty介绍"><a href="#2-2-1-OpenResty介绍" class="headerlink" title="2.2.1 OpenResty介绍"></a>2.2.1 OpenResty介绍</h4><p>OpenResty(又称：ngx_openresty) 是一个基于 NGINX 的可伸缩的 Web 平台，由中国人章亦春发起，提供了很多高质量的第三方模块。</p><p>OpenResty 是一个强大的 Web 应用服务器，Web 开发人员可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块,更主要的是在性能方面，OpenResty可以 快速构造出足以胜任 10K 乃至1000K以上并发连接响应的超高性能 Web 应用系统。</p><p>360，UPYUN，阿里云，新浪，腾讯网，去哪儿网，酷狗音乐等都是 OpenResty 的深度用户。</p><p>OpenResty 简单理解，就相当于封装了nginx,并且集成了LUA脚本，开发人员只需要简单的为其提供模块就可以实现相关的逻辑，而不再像之前，还需要在nginx中自己编写lua的脚本，再进行调用了。</p><h3 id="2-2-2-OpenResty安装"><a href="#2-2-2-OpenResty安装" class="headerlink" title="2.2.2 OpenResty安装"></a>2.2.2 OpenResty安装</h3><p>具体见本地讲义</p><h4 id="2-2-3-安装nginx"><a href="#2-2-3-安装nginx" class="headerlink" title="2.2.3 安装nginx"></a>2.2.3 安装nginx</h4><p>默认已经安装好了nginx,在目录：/usr/local/openresty/nginx 下。</p><p>修改/usr/local/openresty/nginx/conf/nginx.conf ,将配置文件使用的根设置为root,目的就是将来要使用lua脚本的时候 ，直接可以加载在root下的lua脚本。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#user nobody; 配置文件第一行原来为这样, 现改为下面的配置</span><br><span class="hljs-keyword">user</span> <span class="hljs-title">root</span> root;<br></code></pre></td></tr></table></figure><p>测试访问 <a href="http://192.168.200.128/">http://192.168.200.128</a></p><img src="/images/image-20210729154301413.png" alt="image-20210729154301413" style="zoom: 67%;" /><h3 id="2-3-实现思路"><a href="#2-3-实现思路" class="headerlink" title="2.3 实现思路"></a>2.3 实现思路</h3><h4 id="2-3-1-表结构分析"><a href="#2-3-1-表结构分析" class="headerlink" title="2.3.1 表结构分析"></a>2.3.1 表结构分析</h4><p>tb_ad （广告表）</p><table><thead><tr><th>字段名称</th><th>字段含义</th><th>字段类型</th><th>字段长度</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>ID</td><td>INT</td><td></td><td></td></tr><tr><td>name</td><td>广告名称</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>position</td><td>广告位置</td><td>VARCHAR</td><td></td><td>系统定义</td></tr><tr><td>start_time</td><td>开始时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>end_time</td><td>到期时间</td><td>DATETIME</td><td></td><td></td></tr><tr><td>status</td><td>状态</td><td>CHAR</td><td></td><td>0：无效 1:有效</td></tr><tr><td>image</td><td>图片地址</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>url</td><td>URL</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>remarks</td><td>备注</td><td>VARCHAR</td><td></td><td></td></tr><tr><td>web_index_lb</td><td>首页轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_amusing</td><td>有趣区</td><td></td><td></td><td></td></tr><tr><td>web_index_ea_lb</td><td>家用电器楼层轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_ea</td><td>家用电器楼层广告</td><td></td><td></td><td></td></tr><tr><td>web_index_mobile_lb</td><td>手机通讯楼层轮播图</td><td></td><td></td><td></td></tr><tr><td>web_index_mobile</td><td>手机通讯楼层广告</td><td></td><td></td><td></td></tr></tbody></table><h4 id="2-3-2-缓存预热与二级缓存查询"><a href="#2-3-2-缓存预热与二级缓存查询" class="headerlink" title="2.3.2 缓存预热与二级缓存查询"></a>2.3.2 缓存预热与二级缓存查询</h4><ol><li><p>编写lua脚本实现缓存预热（将mysql里的数据查询出来存入redis）</p><img src="/images/image-20210729154726183.png" alt="image-20210729154726183" style="zoom:80%;" /></li><li><p>编写lua脚本实现二级缓存读取</p><img src="/images/image-20210729154821590.png" alt="image-20210729154821590" style="zoom:80%;" /><p>就是说客户端查询的时候先查询本地缓存</p></li></ol><h3 id="2-4-代码实现"><a href="#2-4-代码实现" class="headerlink" title="2.4 代码实现"></a>2.4 代码实现</h3><h4 id="2-4-1-缓存预热"><a href="#2-4-1-缓存预热" class="headerlink" title="2.4.1 缓存预热"></a>2.4.1 缓存预热</h4><p>实现思路：</p><p>定义请求：用于查询数据库中的数据更新到redis中。</p><ol><li>连接mysql ，按照广告分类ID读取广告列表，转换为json字符串</li><li>连接redis，将广告列表json字符串存入redis</li></ol><p>定义请求：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">请求：<br>    /ad_update<br>参数：<br>    position  <span class="hljs-comment">--指定广告位置</span><br>返回值：<br>    <span class="hljs-type">json</span><br></code></pre></td></tr></table></figure><p>在/root/lua目录下创建ad_load.lua ，实现连接mysql 查询数据 并存储到redis中。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs lua">ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span> <span class="hljs-comment">-- 表明内容以json数据进行传递</span><br><span class="hljs-keyword">local</span> cjson = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cjson&quot;</span>) <span class="hljs-comment">-- 引入第三方模块，表明支持json</span><br><span class="hljs-keyword">local</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.mysql&quot;</span>) <span class="hljs-comment">-- 引入mysql支持</span><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args() <span class="hljs-comment">-- 获取当前请求路径上的参数赋值给uri_args</span><br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>]  <span class="hljs-comment">-- 获取请求参数中的position的值</span><br><br><span class="hljs-keyword">local</span> db = mysql:new() <span class="hljs-comment">-- 设置一个新的mysql连接</span><br>db:set_timeout(<span class="hljs-number">1000</span>)  <span class="hljs-comment">-- 设置数据库连接的超时时间</span><br><span class="hljs-keyword">local</span> props = &#123;    <span class="hljs-comment">-- 设置要连接的数据库服务器的参数信息</span><br>    host = <span class="hljs-string">&quot;192.168.200.128&quot;</span>,  <br>    port = <span class="hljs-number">3306</span>,  <br>    database = <span class="hljs-string">&quot;changgou_business&quot;</span>,  <br>    user = <span class="hljs-string">&quot;root&quot;</span>,  <br>    password = <span class="hljs-string">&quot;root&quot;</span>  <br>&#125;<br><br><span class="hljs-keyword">local</span> res = db:connect(props)  <span class="hljs-comment">-- 基于上面的参数进行真正的连接</span><br><span class="hljs-keyword">local</span> select_sql = <span class="hljs-string">&quot;select url,image from tb_ad where status =&#x27;1&#x27; and position=&#x27;&quot;</span>..position..<span class="hljs-string">&quot;&#x27; and start_time&lt;= NOW() AND end_time&gt;= NOW()&quot;</span>  <span class="hljs-comment">-- 定义sql语句</span><br>res = db:query(select_sql)  <span class="hljs-comment">-- 执行连接到mysql以后要执行的sql语句</span><br>db:<span class="hljs-built_in">close</span>()  <span class="hljs-comment">-- 关闭数据库的连接</span><br><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>) <span class="hljs-comment">-- 引入redis第三方面模块</span><br><span class="hljs-keyword">local</span> red = redis:new() <span class="hljs-comment">-- 设置redis的连接</span><br>red:set_timeout(<span class="hljs-number">2000</span>)  <span class="hljs-comment">-- 设置redis的连接超时时间</span><br><br><span class="hljs-keyword">local</span> ip =<span class="hljs-string">&quot;192.168.200.128&quot;</span>  <span class="hljs-comment">-- 设置redis服务器的ip地址</span><br><span class="hljs-keyword">local</span> port = <span class="hljs-number">6379</span>  <span class="hljs-comment">-- 设置redis服务器的端口号</span><br>red:connect(ip,port) <span class="hljs-comment">-- 开启真正的redis连接</span><br><br>red:set(<span class="hljs-string">&quot;ad_&quot;</span>..position,cjson.encode(res))  <span class="hljs-comment">-- 设置向redis中存放的内容</span><br>red:<span class="hljs-built_in">close</span>() <span class="hljs-comment">-- 关闭连接</span><br><br>ngx.say(<span class="hljs-string">&quot;&#123;flag:true&#125;&quot;</span>)  <span class="hljs-comment">-- 响应给客户端的字符串信息</span><br></code></pre></td></tr></table></figure><p>修改/usr/local/openresty/nginx/conf/nginx.conf文件，代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br>        <span class="hljs-comment"># 添加</span><br>        <span class="hljs-attribute">location</span> /ad_update &#123; <span class="hljs-comment"># 这个路径映射到下面这个本地ad_update.lua文件</span><br>            <span class="hljs-attribute">content_by_lua_file</span> /root/lua/ad_update.lua;<br>        &#125;<br>        <br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-attribute">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动nginx   (<code>./nginx -s reload</code>)</p><p>测试：<a href="http://192.168.200.128/ad_update?position=web_index_lb">http://192.168.200.128/ad_update?position=web_index_lb</a>   （我这一步没报错，但是数据没输进去，这个bug先放这儿，后面熟悉了再慢慢解决）</p><h4 id="广告缓存读取"><a href="#广告缓存读取" class="headerlink" title="广告缓存读取"></a>广告缓存读取</h4><p>实现思路：</p><ul><li>通过lua脚本直接从redis中获取数据即可。</li></ul><p>定义请求：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">请求<span class="hljs-symbol">:/ad_read</span><br>参数：position<br>返回值：json<br></code></pre></td></tr></table></figure><p>在/root/lua目录下创建ad_read.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua"><br>ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span><br><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args();<br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>];<br><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>);<br><br><span class="hljs-keyword">local</span> red = redis:new()<br><br>red:set_timeout(<span class="hljs-number">2000</span>)<br><br><span class="hljs-keyword">local</span> ok, err = red:connect(<span class="hljs-string">&quot;192.168.200.128&quot;</span>, <span class="hljs-number">6379</span>)<br><br><span class="hljs-keyword">local</span> rescontent=red:get(<span class="hljs-string">&quot;ad_&quot;</span>..position)<br><br>ngx.say(rescontent)<br><br>red:<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><p>在/usr/local/openresty/nginx/conf/nginx.conf中server下添加配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /ad_read &#123;<br>  <span class="hljs-attribute">content_by_lua_file</span> /root/lua/ad_read.lua;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试 <a href="http://192.168.200.128/ad_read?position=web_index_lb">http://192.168.200.128/ad_read?position=web_index_lb</a> 输出</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">[&#123;<span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;img\/banner1.jpg&quot;</span>,<span class="hljs-attr">&quot;image&quot;</span>:<span class="hljs-string">&quot;img\/banner1.jpg&quot;</span>&#125;,&#123;<span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;img\/banner2.jpg&quot;</span>,<span class="hljs-attr">&quot;image&quot;</span>:<span class="hljs-string">&quot;img\/banner2.jpg&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><h4 id="2-4-3-二级缓存-加入openresty本地缓存"><a href="#2-4-3-二级缓存-加入openresty本地缓存" class="headerlink" title="2.4.3 二级缓存-加入openresty本地缓存"></a>2.4.3 二级缓存-加入openresty本地缓存</h4><p>如上的方式没有问题，但是如果请求都到redis，redis压力也很大，所以我们一般采用多级缓存的方式来减少下游系统的服务压力</p><p>先查询openresty本地缓存 如果没有再查询redis中的数据<br>修改/root/lua目录下ad_read文件, 内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--设置响应头类型</span><br>ngx.header.content_type=<span class="hljs-string">&quot;application/json;charset=utf8&quot;</span><br><span class="hljs-comment">--获取请求中的参数ID</span><br><span class="hljs-keyword">local</span> uri_args = ngx.req.get_uri_args();<br><span class="hljs-keyword">local</span> position = uri_args[<span class="hljs-string">&quot;position&quot;</span>];<br><br><span class="hljs-comment">--获取本地缓存</span><br><span class="hljs-keyword">local</span> cache_ngx = ngx.shared.dis_cache;<br><span class="hljs-comment">--根据ID 获取本地缓存数据</span><br><span class="hljs-keyword">local</span> adCache = cache_ngx:get(<span class="hljs-string">&#x27;ad_cache_&#x27;</span>..position);<br><br><span class="hljs-keyword">if</span> adCache == <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">or</span> adCache == <span class="hljs-literal">nil</span> <span class="hljs-keyword">then</span><br><br><span class="hljs-comment">--引入redis库</span><br><span class="hljs-keyword">local</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;resty.redis&quot;</span>);<br><span class="hljs-comment">--创建redis对象</span><br><span class="hljs-keyword">local</span> red = redis:new()<br><span class="hljs-comment">--设置超时时间</span><br>red:set_timeout(<span class="hljs-number">2000</span>)<br><span class="hljs-comment">--连接</span><br><span class="hljs-keyword">local</span> ok, err = red:connect(<span class="hljs-string">&quot;192.168.200.128&quot;</span>, <span class="hljs-number">6379</span>)<br><span class="hljs-comment">--获取key的值</span><br><span class="hljs-keyword">local</span> rescontent=red:get(<span class="hljs-string">&quot;ad_&quot;</span>..position)<br><span class="hljs-comment">--输出到返回响应中</span><br>ngx.say(rescontent)<br><span class="hljs-comment">--关闭连接</span><br>red:<span class="hljs-built_in">close</span>()<br><span class="hljs-comment">--将redis中获取到的数据存入nginx本地缓存</span><br>cache_ngx:set(<span class="hljs-string">&#x27;ad_cache_&#x27;</span>..position, rescontent, <span class="hljs-number">10</span>*<span class="hljs-number">60</span>);<br><br><span class="hljs-keyword">else</span><br> <span class="hljs-comment">--nginx本地缓存中获取到数据直接输出</span><br> ngx.say(adCache)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>修改nginx配置文件vi /usr/local/openresty/nginx/conf/nginx.conf ，http节点下添加配置:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#包含redis初始化模块</span><br><span class="hljs-attribute">lua_shared_dict</span> dis_cache <span class="hljs-number">5m</span>;  <span class="hljs-comment">#共享内存开启</span><br></code></pre></td></tr></table></figure><h4 id="2-4-4-前端页面实现（了解）"><a href="#2-4-4-前端页面实现（了解）" class="headerlink" title="2.4.4 前端页面实现（了解）"></a>2.4.4 前端页面实现（了解）</h4><p>这里先不学，有需要再说。</p><p>待更改完成后用FileZilla连接服务器（在这里就是那台linux虚拟机）</p><p><img src="/images/image-20210729213014273.png" alt="image-20210729213014273"></p><p>连接成功后，把本地的前端页面以及其样式设置的文件和文件夹全部都拷贝到服务器上nginx目录下的html文件夹中</p><p><img src="/images/image-20210729213222244.png" alt="image-20210729213222244"></p><p>最后更改nginx.conf的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 加载首页</span><br>      <span class="hljs-attribute">location</span> / &#123;<br>          <span class="hljs-attribute">root</span>   html;  <span class="hljs-comment"># 表明页面文件都部署在html文件夹下</span><br>          <span class="hljs-attribute">index</span>  index.html index.htm;  <span class="hljs-comment"># 表明location对应的主页页面</span><br>      &#125;<br></code></pre></td></tr></table></figure><p>配置完成后重启nginx即可</p><p>最后根据首页的<code>location</code>, 在浏览器输入 192.168.200.128 即可完成访问。<code>location</code>的<code>/</code>在地址栏可输也可不输入。看到主页的广告图出现，说明设置成功。</p><h2 id="3-nginx限流"><a href="#3-nginx限流" class="headerlink" title="3 nginx限流"></a>3 nginx限流</h2><p>一般情况下，首页的并发量是比较大的，即使有了多级缓存，如果有大量恶意的请求，也会对系统造成影响。而限流就是保护措施之一。</p><p>nginx提供两种限流的方式：</p><ul><li>一是控制速率</li><li>二是控制并发连接数</li></ul><h3 id="3-1-控制速率"><a href="#3-1-控制速率" class="headerlink" title="3.1 控制速率"></a>3.1 控制速率</h3><p>控制速率的方式之一就是采用漏桶算法</p><h4 id="3-1-1-漏桶算法实现控制速率限流"><a href="#3-1-1-漏桶算法实现控制速率限流" class="headerlink" title="3.1.1 漏桶算法实现控制速率限流"></a>3.1.1 漏桶算法实现控制速率限流</h4><p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率.</p><p>漏桶算法实现 nginx的配置：</p><ul><li><p>修改/usr/local/openresty/nginx/conf/nginx.conf:</p><p>注意：</p><ul><li><p>被<code>#</code>包裹的设置这个算法的地方</p></li><li><p>binary_remote_addr 是一种key，表示基于 remote_addr(客户端IP) 来做限流，binary_ 的目的是压缩内存占用量 </p></li><li><p>zone：定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。</p></li><li><p>rate 用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。我们这里设置成2 方便测试。</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br>    <span class="hljs-comment">##############################</span><br>    <span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=myRateLimit:<span class="hljs-number">10m</span> rate=2r/s;<br><span class="hljs-comment">###############################</span><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-comment">##########################</span><br>            <span class="hljs-attribute">limit_req</span> zone=myRateLimit;<br>            <span class="hljs-comment">##########################</span><br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：重新加载配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/openresty/</span>nginx/sbin<br><br>./nginx -s reload<br></code></pre></td></tr></table></figure><p>快速点击，会报错</p><p><img src="/images/image-20210729220115898.png" alt="image-20210729220115898"></p></li></ul><h4 id="3-1-2-处理突发流量"><a href="#3-1-2-处理突发流量" class="headerlink" title="3.1.2 处理突发流量"></a>3.1.2 处理突发流量</h4><p>上面例子限制 2r/s，如果有时正常流量突然增大，超出的请求将被拒绝，无法处理突发流量，可以结合 <strong>burst</strong> 参数使用来解决该问题。</p><p>例如，如下配置表示：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst=<span class="hljs-number">5</span>;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>burst 译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数,当 rate=2r/s 时，将1s拆成2份，即每500ms可处理1个请求。</p><p>此处，<strong>burst=5</strong> ，若同时有6个请求到达，Nginx 会处理第一个请求，剩余5个请求将放入队列，然后每隔500ms从队列中获取一个请求进行处理。若请求数大于6，将拒绝处理多余的请求，直接返回503.</p><p>不过，单独使用 burst 参数并不实用。假设 burst=50 ，rate为10r/s，排队中的50个请求虽然每100ms会处理一个，但第50个请求却需要等待 50 * 100ms即 5s，这么长的处理时间自然难以接受。</p><p>因此，burst 往往结合 nodelay 一起使用。</p><p>例如：如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst=<span class="hljs-number">5</span> nodelay;<br>        <span class="hljs-attribute">root</span>   html;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上表示：</p><p>处理突发5个请求的时候，没有延迟，等到完成之后，按照正常的速率处理。</p><p>如上两种配置结合就达到了速率稳定，但突然流量也能正常处理的效果。配置代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">user</span> root root;<br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-comment"># 设置限流配置</span><br>    <span class="hljs-attribute">limit_req_zone</span> $binary_remote_addr zone=myRateLimit:<span class="hljs-number">10m</span> rate=2r/s;<br><br>    <span class="hljs-section">server</span> &#123;  <br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">8081</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-attribute">limit_req</span> zone=myRateLimit burst = <span class="hljs-number">5</span> nodelay;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完成以后记得重启nginx （改配置文件需要重启，其他时候不用重启）</p><p>测试：在1秒钟之内可以刷新5次，正常处理。</p><p>但超过之后会报错</p><h1 id="Part-06-数据同步解决方案-canal"><a href="#Part-06-数据同步解决方案-canal" class="headerlink" title="Part-06 数据同步解决方案-canal"></a>Part-06 数据同步解决方案-canal</h1><h2 id="1-canal"><a href="#1-canal" class="headerlink" title="1. canal"></a>1. canal</h2><h3 id="1-1-canal简介"><a href="#1-1-canal简介" class="headerlink" title="1.1 canal简介"></a>1.1 canal简介</h3><p>canal可以用来监控数据库数据的变化，从而获得新增数据，或者修改的数据。</p><p>canal是应对阿里巴巴存在杭州和美国的双机房部署，存在跨机房同步的业务需求而提出的。</p><p>阿里系公司开始逐步的尝试基于数据库的日志解析，获取增量变更进行同步，由此衍生出了增量订阅&amp;消费的业务。</p><img src="/images/image-20210730122738581.png" alt="image-20210730122738581" style="zoom:80%;" /><p>原理相对比较简单：(这里不是太理解)</p><ol><li>canal模拟mysql slave的交互协议，伪装自己为mysql slave，向mysql master发送dump协议</li><li>mysql master收到dump请求，开始推送binary log给slave(也就是canal)</li><li>canal解析binary log对象(原始为byte流)</li></ol><h3 id="1-2-环境部署"><a href="#1-2-环境部署" class="headerlink" title="1.2 环境部署"></a>1.2 环境部署</h3><h4 id="1-2-1-mysql开启binlog模式"><a href="#1-2-1-mysql开启binlog模式" class="headerlink" title="1.2.1 mysql开启binlog模式"></a>1.2.1 mysql开启binlog模式</h4><p>​    这部分看具体博客或者本地笔记</p><h4 id="1-2-2-canal服务端安装配置"><a href="#1-2-2-canal服务端安装配置" class="headerlink" title="1.2.2 canal服务端安装配置"></a>1.2.2 canal服务端安装配置</h4><p>​    这部分看具体博客或者本地笔记都可</p><h3 id="1-3-数据监控微服务"><a href="#1-3-数据监控微服务" class="headerlink" title="1.3 数据监控微服务"></a>1.3 数据监控微服务</h3><p>当用户执行数据库的操作的时候，binlog 日志会被canal捕获到，并解析出数据。我们就可以将解析出来的数据进行相应的逻辑处理。</p><p>我们这里使用的一个开源的项目，它实现了springboot与canal的集成。比原生的canal更加优雅。springboot 没有这个包，需要自己下载并部署到本地仓库</p><ol><li><p>打开网址 <a href="https://github.com/chenqian56131/spring-boot-starter-canal">https://github.com/chenqian56131/spring-boot-starter-canal</a> 下载 spring-boot-starter-canal。（下载到本地的磁盘位置可随便选）</p></li><li><p>下载完成后解压，并打开文件夹到有pom.xml文件的那一级</p><img src="/images/image-20210730125655100.png" alt="image-20210730125655100" style="zoom:80%;" /></li><li><p>在此处输入mvn命令</p><p>注意：</p><ul><li>DskipTests 表明安装的时候跳过测试</li></ul><p><img src="/images/image-20210730125838140.png" alt="image-20210730125838140"></p></li><li><p>BUILD SUCCESS以后可以在本地的maven仓库看到一个xpand包</p><p><img src="/images/image-20210730130053149.png" alt="image-20210730130053149"></p></li></ol><h4 id="1-3-1-微服务搭建"><a href="#1-3-1-微服务搭建" class="headerlink" title="1.3.1 微服务搭建"></a>1.3.1 微服务搭建</h4><ol><li><p>创建工程模块changgou_canal，pom引入依赖</p><p>注意：</p><ul><li>上面那个包就是刚刚下载到本地的包，不然这里会报红</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xpand<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>starter-canal<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建包com.changgou.canal ，包下创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCanalClient</span> <span class="hljs-comment">//声明当前的服务是canal的客户端</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CanalApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(CanalApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>添加配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">canal.client.instances.example.host</span>=<span class="hljs-string">192.168.200.128</span><br><span class="hljs-meta">canal.client.instances.example.port</span>=<span class="hljs-string">11111</span><br><span class="hljs-meta">canal.client.instances.example.batchSize</span>=<span class="hljs-string">1000  # 这里不知道是什么意思</span><br><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.200.128</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.canal.listener包，包下创建类</p><p>注意：</p><ul><li><code>@CanalEventListener</code>: 声明当前的类是canal的监听类</li><li><code>@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</code>表明监听的是数据库changgou_business中的tb_ad表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span> <span class="hljs-comment">//声明当前的类是canal的监听类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessListener</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adUpdate</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;广告表数据发生改变&quot;</span>);<br>        <span class="hljs-comment">//获取改变之前的数据</span><br>        rowData.getBeforeColumnsList().forEach((c)-&gt; System.out.println(<span class="hljs-string">&quot;改变前的数据:&quot;</span>+c.getName()+<span class="hljs-string">&quot;::&quot;</span>+c.getValue()));<br>        System.out.println(<span class="hljs-string">&quot;===================&quot;</span>);<br>        <span class="hljs-comment">//获取改变之后的数据</span><br>        rowData.getAfterColumnsList().forEach((c) -&gt; System.out.println(<span class="hljs-string">&quot;改变之后的数据:&quot;</span>+c.getName()+<span class="hljs-string">&quot;::&quot;</span>+c.getValue())); <span class="hljs-comment">// 获取改变后的那一行的所有字段名和数据</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：启动数据监控微服务，修改changgou_business的tb_ad表，观察控制台输出</p></li></ol><h2 id="2-首页广告缓存更新"><a href="#2-首页广告缓存更新" class="headerlink" title="2. 首页广告缓存更新"></a>2. 首页广告缓存更新</h2><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p>当tb_ad（广告）表的数据发生变化时，更新redis中的广告数据</p><h3 id="2-2-实现思路"><a href="#2-2-实现思路" class="headerlink" title="2.2 实现思路"></a>2.2 实现思路</h3><ol><li><p>修改数据监控微服务，监控tb_ad表，当发生增删改操作时，提取position值（广告位置key），发送到rabbitmq</p></li><li><p>从rabbitmq中提取消息，通过OkHttpClient调用ad_update来实现对广告缓存数据的更新。</p><img src="/images/image-20210730193803227.png" alt="image-20210730193803227" style="zoom:80%;" /></li></ol><p>这个图要理解</p><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><h4 id="2-3-1-发送消息到mq"><a href="#2-3-1-发送消息到mq" class="headerlink" title="2.3.1 发送消息到mq"></a>2.3.1 发送消息到mq</h4><ol><li>在rabbitmq管理后台创建队列 ad_update_queue ，用于接收广告更新通知</li></ol><img src="/images/image-20210730194058801.png" alt="image-20210730194058801" style="zoom:80%;" /><ol start="2"><li><p>引入rabbitmq起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.amqp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-rabbit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置文件application.properties 添加内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.rabbitmq.host</span>=<span class="hljs-string">192.168.200.128</span><br></code></pre></td></tr></table></figure></li><li><p>新增rabbitMQ配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>   <br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改BusinessListener类</p><p>注意：</p><ul><li><code>@CanalEventListener</code>表明当前的类是canal的监听类</li><li><code>@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</code>表明监听是哪一个数据库中的哪张表</li><li>关于<code>CanalEntry</code>具体的实现细节先不深入</li><li>RabbitMQ与springboot结合的用法还不熟</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span> <span class="hljs-comment">//声明当前的类是canal的监听类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BusinessListener</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_business&quot;, table = &quot;tb_ad&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adUpdate</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;广告表数据发生改变&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (CanalEntry.Column column : rowData.getAfterColumnsList()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;position&quot;</span>.equals(column.getName()))&#123;<br>                System.out.println(<span class="hljs-string">&quot;发送最新的数据到MQ:&quot;</span>+column.getValue());<br><br>                <span class="hljs-comment">//发送消息</span><br>                rabbitTemplate.convertAndSend(<span class="hljs-string">&quot;&quot;</span>, RabbitMQConfig.AD_UPDATE_QUEUE, column.getValue());<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-3-2-从mq中提取消息执行更新"><a href="#2-3-2-从mq中提取消息执行更新" class="headerlink" title="2.3.2 从mq中提取消息执行更新"></a>2.3.2 从mq中提取消息执行更新</h4><ol><li><p>changgou_service_business工程pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--消息队列依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在spring节点下添加rabbitmq配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">rabbitmq:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br></code></pre></td></tr></table></figure></li><li><p>com.changgou.business包下创建listener包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@RabbitListener(queues = &quot;ad_update_queue&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String message)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息为:&quot;</span>+message);<br><br>        <span class="hljs-comment">//发起远程调用</span><br>        OkHttpClient okHttpClient = <span class="hljs-keyword">new</span> OkHttpClient();<br>        String url = <span class="hljs-string">&quot;http://192.168.200.128/ad_update?position=&quot;</span>+message;<br>        Request request = <span class="hljs-keyword">new</span> Request.Builder().url(url).build();<br>        Call call = okHttpClient.newCall(request);<br>        call.enqueue(<span class="hljs-keyword">new</span> Callback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(Call call, IOException e)</span> </span>&#123;<br>                <span class="hljs-comment">//请求失败</span><br>                e.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(Call call, Response response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>                <span class="hljs-comment">//请求成功</span><br>                System.out.println(<span class="hljs-string">&quot;请求成功:&quot;</span>+response.message());<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试，启动business微服务(前面已经启动了eureka, canal的微服务。不然达不成效果)，观察控制台输出和数据同步效果</p></li></ol><h2 id="3-商品上架索引库导入数据"><a href="#3-商品上架索引库导入数据" class="headerlink" title="3. 商品上架索引库导入数据"></a>3. 商品上架索引库导入数据</h2><h3 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h3><p>商品上架将商品的sku列表导入或更新索引库。</p><h3 id="3-2-实现思路"><a href="#3-2-实现思路" class="headerlink" title="3.2 实现思路"></a>3.2 实现思路</h3><ol><li><p>在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为1时，表示商品上架，将spu的id发送到rabbitmq。</p></li><li><p>在rabbitmq管理后台创建商品上架交换器（fanout）。使用分列模式的交换器是考虑商品上架会有很多种逻辑需要处理，导入索引库只是其中一项，另外还有商品详细页静态化等操作。这样我们可以创建导入索引库的队列和商品详细页静态化队列并与商品上架交换器进行绑定。</p></li><li><p>搜索微服务从rabbitmq的导入索引库的队列中提取spu的id，通过feign调用商品微服务得到sku的列表，并且通过调用elasticsearch的高级restAPI 将sku列表导入到索引库。</p><p><img src="/images/image-20210803144338107.png" alt="image-20210803144338107"></p></li></ol><h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><h4 id="3-3-1-发送消息到mq"><a href="#3-3-1-发送消息到mq" class="headerlink" title="3.3.1 发送消息到mq"></a>3.3.1 发送消息到mq</h4><ol><li><p>在rabbitmq后台创建交换器goods_up_exchange（类型为fanout），创建队列search_add_queue绑定交换器goods_up_exchange,更新rabbitmq配置类</p><p>注意：</p><ul><li><code>@Bean(SEARCH_ADD_QUEUE)</code>是用来声明这个方法返回的bean的名称，便于后面的绑定zhu入。</li><li><code>@Qualifier(SEARCH_ADD_QUEUE)</code>：qualifier注解是按照名称来注入引用类型的bean的，而autowire是按照bean的类型来注入的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br><br>    <span class="hljs-comment">//大小写转换快捷键：CTRL+SHIFT+U</span><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE = <span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">SEARCH_ADD_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span> Queue queue, <span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>数据监控微服务新增SpuListener，添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CanalEventListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpuListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br><br>    <span class="hljs-meta">@ListenPoint(schema = &quot;changgou_goods&quot;, table = &quot;tb_spu&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">goodsUp</span><span class="hljs-params">(CanalEntry.EventType eventType, CanalEntry.RowData rowData)</span></span>&#123;<br>        <span class="hljs-comment">//获取改变之前的数据并将这部分数据转换为map</span><br>        Map&lt;String, String&gt; oldData = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        rowData.getBeforeColumnsList().forEach((c)-&gt;oldData.put(c.getName(), c.getValue()));<br><br>        <span class="hljs-comment">//获取改变之后的数据并这部分数据转换为map</span><br>        Map&lt;String,String&gt; newData = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        rowData.getAfterColumnsList().forEach((c)-&gt;newData.put(c.getName(),c.getValue()));<br><br>        <span class="hljs-comment">//获取最新上架的商品 0-&gt;1</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;0&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;1&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)))&#123;<br>            <span class="hljs-comment">//将商品的spuid发送到mq</span><br>            rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_UP_EXCHANGE, <span class="hljs-string">&quot;&quot;</span>, newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-2-创建索引结构"><a href="#3-3-2-创建索引结构" class="headerlink" title="3.3.2 创建索引结构"></a>3.3.2 创建索引结构</h4><p>新建changgou_service_search_api模块,并添加索引库实体类</p><ol><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建实体类</p><p>注意： </p><ul><li><code>@Document</code>标示映射到Elasticsearch文档上的领域对象, <code>indexName = &quot;skuinfo&quot;</code>表明这个索引库的名称是skuinfo，<code>docs</code>表明这个索引库的类型是<code>_doc</code></li><li><code>@Field(index = true, store = true, type = FieldType.Keyword)</code>, 依次表示建立倒排索引，存储文档数据，不需要中文分词的字段设置成@Field(type = FieldType.Keyword)类型，需要中文分词的设置成@Field(analyzer = “ik_max_word”,type = FieldType.Text)类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;skuinfo&quot;, type = &quot;docs&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SkuInfo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-comment">//商品id，同时也是商品编号</span><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">//SKU名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Text, analyzer = &quot;ik_smart&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//商品价格，单位为：元</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Double)</span><br>    <span class="hljs-keyword">private</span> Long price;<br><br>    <span class="hljs-comment">//库存数量</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer num;<br><br>    <span class="hljs-comment">//商品图片</span><br>    <span class="hljs-meta">@Field(index = false, store = true, type = FieldType.Text)</span><br>    <span class="hljs-keyword">private</span> String image;<br><br>    <span class="hljs-comment">//商品状态，1-正常，2-下架，3-删除</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-comment">//更新时间</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-comment">//是否默认</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String isDefault;<br><br>    <span class="hljs-comment">//SPUID</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Long)</span><br>    <span class="hljs-keyword">private</span> Long spuId;<br><br>    <span class="hljs-comment">//类目ID</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Long)</span><br>    <span class="hljs-keyword">private</span> Long categoryId;<br><br>    <span class="hljs-comment">//类目名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String categoryName;<br><br>    <span class="hljs-comment">//品牌名称</span><br>    <span class="hljs-meta">@Field(index = true, store = true, type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String brandName;<br><br>    <span class="hljs-comment">//规格</span><br>    <span class="hljs-keyword">private</span> String spec;<br><br>    <span class="hljs-comment">//规格参数</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; specMap;<br>    <br>    <span class="hljs-comment">//getter &amp; setter略</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-3-搜索微服务搭建"><a href="#3-3-3-搜索微服务搭建" class="headerlink" title="3.3.3 搜索微服务搭建"></a>3.3.3 搜索微服务搭建</h4><ol><li><p>创建changgou_service_search模块，pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_goods_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_service_search_api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置changgou_service_search的application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9009</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">search</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><br>  <span class="hljs-attr">main:</span><br>    <span class="hljs-attr">allow-bean-definition-overriding:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#当遇到同样名字的时候，是否允许覆盖注册</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">elasticsearch:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">elasticsearch</span><br>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.128</span><span class="hljs-string">:9300</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:6868/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment">#配置全局的feign的调用超时时间  如果 有指定的服务配置 默认的配置不会生效</span><br>        <span class="hljs-attr">connectTimeout:</span> <span class="hljs-number">600000</span> <span class="hljs-comment"># 指定的是 消费者 连接服务提供者的连接超时时间 是否能连接  单位是毫秒</span><br>        <span class="hljs-attr">readTimeout:</span> <span class="hljs-number">600000</span>  <span class="hljs-comment"># 指定的是调用服务提供者的 服务 的超时时间（）  单位是毫秒</span><br><span class="hljs-comment">#hystrix 配置</span><br><span class="hljs-attr">hystrix:</span><br>  <span class="hljs-attr">command:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">execution:</span><br>        <span class="hljs-attr">timeout:</span><br>          <span class="hljs-comment">#如果enabled设置为false，则请求超时交给ribbon控制</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">isolation:</span><br>          <span class="hljs-attr">strategy:</span> <span class="hljs-string">SEMAPHORE</span><br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou包，包下创建SearchApplication启动类</p><p>注意：</p><ul><li><code>@EnableFeignClients</code>使用<strong>basePackages</strong>属性字段去指明应用程序在启动的时候需要扫描服务中的标注了@FeignClient注解的接口的包路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients(basePackages = &#123;&quot;com.changgou.goods.feign&quot;&#125;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchApplication</span> </span>&#123;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SearchApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将rabbitmq配置类放入该模块下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">//定义交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE=<span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br><br>    <span class="hljs-comment">//队列与交换机的绑定</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_UP_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-4-商品服务查询商品信息"><a href="#3-3-4-商品服务查询商品信息" class="headerlink" title="3.3.4 商品服务查询商品信息"></a>3.3.4 商品服务查询商品信息</h4><ol><li><p>SkuController新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String spuId)</span></span>&#123;<br>    Map&lt;String, Object&gt; searchMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;all&quot;</span>.equals(spuId))&#123;<br>        searchMap.put(<span class="hljs-string">&quot;spuId&quot;</span>,spuId);<br>    &#125;<br>    searchMap.put(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>    List&lt;Sku&gt; skuList = skuService.findList(searchMap);<br>   <br>    <span class="hljs-keyword">return</span> skuList;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods_api新增common依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.changgou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>changgou_common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>changgou_service_goods_api新增feign包并定义skuFegin接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(name=&quot;goods&quot;)</span><br><span class="hljs-meta">@RequestMapping(&quot;/sku&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SkuFeign</span> </span>&#123;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 多条件搜索品牌数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/spu/&#123;spuId&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Sku&gt; <span class="hljs-title">findSkuListBySpuId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spuId&quot;)</span> String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-5-搜索微服务批量导入数据逻辑"><a href="#3-3-5-搜索微服务批量导入数据逻辑" class="headerlink" title="3.3.5 搜索微服务批量导入数据逻辑"></a>3.3.5 搜索微服务批量导入数据逻辑</h4><ol><li><p>创建 com.changgou.search.dao包,并新增ESManagerMapper接口（这里是操作es的详细步骤，其实和操作mysql的比较类似）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ESManagerMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">SkuInfo</span>,<span class="hljs-title">Long</span>&gt; </span>&#123;  <span class="hljs-comment">// 括号里表示的是当前要操作的实体类和当前主键的数据类型</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 com.changgou.search.service包，包下创建接口EsManagerService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ESManagerService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建索引库结构</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">createMappingAndIndex</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 导入全部数据到ES索引库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">importAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据spuid导入数据到ES索引库</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> spuId 商品id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">importDataBySpuId</span><span class="hljs-params">(String spuId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.search.service.impl包，包下创建服务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESManagerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ESManagerService</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SkuFeign skuFeign;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerMapper esManagerMapper;<br><br>    <span class="hljs-comment">//创建索引库结构</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createMappingAndIndex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//创建索引</span><br>        elasticsearchTemplate.createIndex(SkuInfo.class);<br>        <span class="hljs-comment">//创建映射</span><br>        elasticsearchTemplate.putMapping(SkuInfo.class);<br>    &#125;<br><br>    <span class="hljs-comment">//导入全部sku集合进入到索引库</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importAll</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//查询sku集合</span><br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(<span class="hljs-string">&quot;all&quot;</span>);<br>        <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//skulist转换为json</span><br>        String jsonSkuList = JSON.toJSONString(skuList);<br>        <span class="hljs-comment">//将json转换为skuinfo</span><br>        List&lt;SkuInfo&gt; skuInfoList = JSON.parseArray(jsonSkuList, SkuInfo.class);<br><br>        <span class="hljs-keyword">for</span> (SkuInfo skuInfo : skuInfoList) &#123;<br>            <span class="hljs-comment">//将规格信息转换为map</span><br>            Map specMap = JSON.parseObject(skuInfo.getSpec(), Map.class);<br>            skuInfo.setSpecMap(specMap);<br>        &#125;<br><br>        <span class="hljs-comment">//导入索引库</span><br>        esManagerMapper.saveAll(skuInfoList);<br>    &#125;<br><br>    <span class="hljs-comment">//根据spuid查询skuList,添加到索引库</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">importDataBySpuId</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>        List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>        <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//将集合转换为json</span><br>        String jsonSkuList = JSON.toJSONString(skuList);<br>        List&lt;SkuInfo&gt; skuInfoList = JSON.parseArray(jsonSkuList, SkuInfo.class);<br><br>        <span class="hljs-keyword">for</span> (SkuInfo skuInfo : skuInfoList) &#123;<br>            <span class="hljs-comment">//将规格信息进行转换</span><br>            Map specMap = JSON.parseObject(skuInfo.getSpec(), Map.class);<br>            skuInfo.setSpecMap(specMap);<br>        &#125;<br><br>        <span class="hljs-comment">//添加索引库</span><br>        esManagerMapper.saveAll(skuInfoList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建com.changgou.search.controller.定义ESManagerController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/manager&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESManagerController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-comment">//创建索引库结构</span><br>    <span class="hljs-meta">@GetMapping(&quot;/create&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        esManagerService.createMappingAndIndex();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;创建索引库结构成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//导入全部数据</span><br>    <span class="hljs-meta">@GetMapping(&quot;/importAll&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">importAll</span><span class="hljs-params">()</span></span>&#123;<br>        esManagerService.importAll();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, StatusCode.OK,<span class="hljs-string">&quot;导入全部数据成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-3-6-接收mq消息执行导入"><a href="#3-3-6-接收mq消息执行导入" class="headerlink" title="3.3.6 接收mq消息执行导入"></a>3.3.6 接收mq消息执行导入</h4><p>changgou_service_search工程创建com.changgou.search.listener包，包下创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsUpListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收到的消息为:   &quot;</span>+spuId);<br><br>        <span class="hljs-comment">//查询skulist,并导入到索引库</span><br>        esManagerService.importDataBySpuId(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-7-测试"><a href="#3-3-7-测试" class="headerlink" title="3.3.7 测试"></a>3.3.7 测试</h4><ol><li><p>启动环境 eureka 、elasticsearch 、canal服务端、canal数据监控微服务、rabbitmq</p></li><li><p>启动商品微服务、搜索微服务</p></li><li><p>修改tb_spu某记录的is_marketable值为1，观察控制台输出，启动kibana查询记录是否导入成功</p><p>可以看到成功导入3条数据</p><p><img src="/images/image-20210804135358627.png" alt="image-20210804135358627"></p></li></ol><h2 id="4-商品下架索引库删除数据"><a href="#4-商品下架索引库删除数据" class="headerlink" title="4. 商品下架索引库删除数据"></a>4. 商品下架索引库删除数据</h2><h3 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h3><p>商品下架后将商品从索引库中移除。</p><h3 id="4-2-实现思路"><a href="#4-2-实现思路" class="headerlink" title="4.2 实现思路"></a>4.2 实现思路</h3><p>思路与商品上架思路非常相似</p><ol><li><p>在数据监控微服务中监控tb_spu表的数据，当tb_spu发生更改且is_marketable为0时，表示商品下架，将spu的id发送到rabbitmq。</p></li><li><p>在rabbitmq管理后台创建商品下架交换器（fanout）。使用分列模式的交换器是考虑商品下架会有很多种逻辑需要处理，索引库删除数据只是其中一项，另外还有删除商品详细页等操作</p></li><li><p>搜索微服务从rabbitmq的的队列中提取spu的id，通过调用elasticsearch的高级restAPI 将相关的sku列表从索引库删除</p><p><img src="/images/image-20210804135821285.png" alt="image-20210804135821285"></p></li></ol><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><ol><li><p><strong>创建交换器与队列</strong></p><p>完成商品下架交换器的创建，队列的创建与绑定，将spuId发送消息到mq</p><p>商品下架交换器：goods_down_exchange</p><p>队列名称： search_delete_queue</p><p>绑定 search_delete_queue到goods_down_exchange</p><p>完善RabbitMQConfig的代码</p><p><img src="/images/image-20210804140359619.png" alt="image-20210804140359619"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitMQConfig</span> </span>&#123;<br>    <span class="hljs-comment">//交换机名称</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_UP_EXCHANGE=<span class="hljs-string">&quot;goods_up_exchange&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String GOODS_DOWN_EXCHANGE=<span class="hljs-string">&quot;goods_down_exchange&quot;</span>;<br><br>    <span class="hljs-comment">//定义队列名称 (tips: 大小写转换快捷键：CTRL+SHIFT+U)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_ADD_QUEUE=<span class="hljs-string">&quot;search_add_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String AD_UPDATE_QUEUE = <span class="hljs-string">&quot;ad_update_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SEARCH_DEL_QUEUE=<span class="hljs-string">&quot;search_del_queue&quot;</span>;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(AD_UPDATE_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明队列</span><br>    <span class="hljs-meta">@Bean(SEARCH_ADD_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_ADD_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_ADD_QUEUE);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">SEARCH_DEL_QUEUE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(SEARCH_DEL_QUEUE);<br>    &#125;<br><br>    <span class="hljs-comment">//声明交换机</span><br>    <span class="hljs-meta">@Bean(GOODS_UP_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_UP_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_UP_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(GOODS_DOWN_EXCHANGE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">GOODS_DOWN_EXCHANGE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> ExchangeBuilder.fanoutExchange(GOODS_DOWN_EXCHANGE).durable(<span class="hljs-keyword">true</span>).build();<br>    &#125;<br><br>    <span class="hljs-comment">//队列绑定交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">SEARCH_ADD_QUEUE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_ADD_QUEUE)</span> Queue queue, <span class="hljs-meta">@Qualifier(GOODS_UP_EXCHANGE)</span> Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">GOODS_DOWN_EXCHANGE_BINDING</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(SEARCH_DEL_QUEUE)</span>Queue queue,<span class="hljs-meta">@Qualifier(GOODS_DOWN_EXCHANGE)</span>Exchange exchange)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="hljs-string">&quot;&quot;</span>).noargs();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>由于搜索微服务也会用到消息队列，因此把已经写好的配置类复制一份给它</p><p><img src="/images/image-20210804140812672.png" alt="image-20210804140812672"></p></li><li><p><strong>canal监听下架</strong></p><p>修改changgou_canal的SpuListener的spuUpdate方法，添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取最新下架的商品 1-&gt;0</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;1&quot;</span>.equals(oldData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)) &amp;&amp; <span class="hljs-string">&quot;0&quot;</span>.equals(newData.get(<span class="hljs-string">&quot;is_marketable&quot;</span>)))&#123;<br>    <span class="hljs-comment">//将商品的spuid发送到mq</span><br>    rabbitTemplate.convertAndSend(RabbitMQConfig.GOODS_DOWN_EXCHANGE,<span class="hljs-string">&quot;&quot;</span>,newData.get(<span class="hljs-string">&quot;id&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>根据spuId删除索引数据</strong></p><p>编写业务逻辑，实现根据spuId删除索引库数据的方法。</p><ol><li><p>ESManagerService新增方法定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据souid删除es索引库中相关的sku数据</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delDataBySpuId</span><span class="hljs-params">(String spuId)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>ESManagerServiceImpl实现方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delDataBySpuId</span><span class="hljs-params">(String spuId)</span> </span>&#123;<br>    List&lt;Sku&gt; skuList = skuFeign.findSkuListBySpuId(spuId);<br>    <span class="hljs-keyword">if</span> (skuList == <span class="hljs-keyword">null</span> || skuList.size()&lt;=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;当前没有数据被查询到,无法导入索引库&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Sku sku : skuList) &#123;<br>        esManagerMapper.deleteById(Long.parseLong(sku.getId()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>接受mq消息，执行索引库删除</strong></p><p>从rabbitmq中提取消息，调动根据spuId删除索引库数据的方法 changgou_service_search新增监听类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsDelListener</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ESManagerService esManagerService;<br><br>    <span class="hljs-meta">@RabbitListener(queues = RabbitMQConfig.SEARCH_DEL_QUEUE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(String spuId)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除索引库监听类,接收到的spuId:  &quot;</span>+spuId);<br><br>        <span class="hljs-comment">//调用业务层完成索引库数据删除</span><br>        esManagerService.delDataBySpuId(spuId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid样式修改</title>
    <link href="/2021/06/28/0.%20fluid%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
    <url>/2021/06/28/0.%20fluid%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="修改fluid主题样式大致流程"><a href="#修改fluid主题样式大致流程" class="headerlink" title="修改fluid主题样式大致流程"></a>修改fluid主题样式大致流程</h1><h2 id="1-定位资源"><a href="#1-定位资源" class="headerlink" title="1. 定位资源"></a>1. 定位资源</h2><ol><li>打开下图文件夹处</li></ol><p><img src="/images/image-20210806152838538.png" alt="image-20210806152838538"></p><ol start="2"><li><p>在此处打开git bash 命令行，并通过<code>code ./</code>打开vscode进行编辑</p><p><img src="/images/image-20210806153104629.png" alt="image-20210806153104629"></p></li></ol><h2 id="2-修改样式"><a href="#2-修改样式" class="headerlink" title="2. 修改样式"></a>2. 修改样式</h2><ol><li><p>在 rewrite.styl文件中，我去掉了标题的超链接样式，代码如下(注意他的相对位置)</p><p>165行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><br>  <span class="hljs-attribute">color</span> var(--post-link-color)<br>  <span class="hljs-comment">//下面三行是自己加的</span><br>  --link-hover-<span class="hljs-attribute">color</span>: transparent   //把链接颜色改成透明<br>  --post-link-<span class="hljs-attribute">color</span>: transparent<br>  <span class="hljs-attribute">cursor</span>: context-menu  //把鼠标悬停手势改为文本手势<br></code></pre></td></tr></table></figure></li><li><p>在copy.stl文件中，我去掉了代码框右上角的鼠标悬停显示copy的样式，代码如下(注意他的相对位置)</p><p>第一行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.copy-btn</span><br>  <span class="hljs-comment">//display inline-block</span><br>  <span class="hljs-attribute">display</span> none<br></code></pre></td></tr></table></figure><p><img src="/images/image-20210806153755890.png" alt="image-20210806153755890"></p></li><li><p>在 rewrite.styl文件中，去掉图片的边框阴影</p><p>代码如下 (注释的那一行就是去掉阴影效果)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">img</span>, <span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">img</span><br>  <span class="hljs-attribute">max-width</span> <span class="hljs-number">90%</span><br>  <span class="hljs-attribute">margin</span> <span class="hljs-number">1.5rem</span> auto<br>  <span class="hljs-attribute">display</span> block<br>  <span class="hljs-comment">//box-shadow $img-shadow  // 增加边框阴影效果</span><br>  <span class="hljs-attribute">border-radius</span> <span class="hljs-number">3px</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="3-完成页面部署"><a href="#3-完成页面部署" class="headerlink" title="3. 完成页面部署"></a>3. 完成页面部署</h2><p>待样式更改完毕后，在blog的下一级目录开启git命令行，输入命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g <span class="hljs-comment"># 生成页面</span><br></code></pre></td></tr></table></figure><p>然后开启hexo本地服务,</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>浏览器输入网址：localhost:4000，访问博客。可以发现，此时样式已经发生变化</p><p>最后部署到远端仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
